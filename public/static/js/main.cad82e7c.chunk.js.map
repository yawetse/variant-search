{"version":3,"sources":["hooks/state.js","components/AppAutoSuggest.js","components/AppDataGrid.js","container/App.js","serviceWorker.js","index.js"],"names":["initialGlobalState","selectedGene","undefined","globalActions","setGene","store","Gene","console","log","setState","useGlobal","useGlobalHook","React","AppAutoSuggest","state","value","suggestions","event","newValue","method","this","fetch","then","response","json","responseJSON","data","genes","catch","error","inputProps","placeholder","onChange","bind","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","props","renderSuggestion","Component","columnNames","emptyTable","titleText","loading","className","AppDataGrid","globalState","rows","e","loadGeneData","dataGridProps","columns","map","colName","column","key","name","frozen","rowGetter","i","rowsCount","length","App","autoSuggestProps","style","marginTop","all","href","Card","Body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cad82e7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport useGlobalHook from 'use-global-hook';\r\n\r\nconst initialGlobalState = {\r\n  selectedGene: undefined,\r\n};\r\nconst globalActions = {\r\n  setGene: (store, Gene) => {\r\n    console.log({ store, Gene });\r\n    store.setState({\r\n      selectedGene: Gene,\r\n    });\r\n  },\r\n};\r\n\r\nexport const useGlobal = useGlobalHook(React, initialGlobalState, globalActions);","import React, { Component, } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nexport default class AppAutoSuggest extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { value: '', suggestions: [], };\r\n  }\r\n  onChange(event, { newValue, method, }){\r\n    this.setState({ value: newValue, });\r\n  }\r\n  onSuggestionsFetchRequested({ value, }){\r\n    fetch(`/basic_api/v1/search/genes/${value}?format=json`)\r\n      .then(response => response.json())\r\n      .then(responseJSON => {\r\n        this.setState({ suggestions: responseJSON.data.genes, });\r\n      })\r\n      .catch(console.error);\r\n  }\r\n  onSuggestionsClearRequested() {\r\n    this.setState({ suggestions: [], });\r\n  }\r\n  render() { \r\n    const { value, suggestions, } = this.state;\r\n    const inputProps = {\r\n      placeholder: 'Search Genes',\r\n      value,\r\n      onChange: this.onChange.bind(this),\r\n    };\r\n    return (\r\n      <Autosuggest\r\n      suggestions={suggestions}\r\n      onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n      onSuggestionsClearRequested={this.onSuggestionsClearRequested.bind(this)}\r\n      getSuggestionValue={(suggestion) => {\r\n        this.props.globalActions.setGene(suggestion);\r\n        return suggestion;\r\n      }}\r\n      renderSuggestion={suggestion => <span>{suggestion}</span>}\r\n      inputProps={inputProps} />\r\n    );\r\n  }\r\n}\r\n","import React, { Component, } from 'react';\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst columnNames = ['Gene', 'Nucleotide Change', 'Protein Change', 'Other Mappings', 'Alias', 'Transcripts', 'Region', 'Reported Classification', 'Inferred Classification', 'Source', 'Last Evaluated', 'Last Updated', 'URL', 'Submitter Comment', 'Assembly', 'Chr', 'Genomic Start', 'Genomic Stop', 'Ref', 'Alt', 'Accession', 'Reported Ref', 'Reported Alt',\r\n];\r\n\r\nconst emptyTable = ({ titleText = 'You have no Gene selected', loading = false, }) => {\r\n  return (\r\n    <div className=\"empty\">\r\n      {loading\r\n        ? ( <div className=\"loading loading-lg\"></div>)\r\n        : (\r\n          <div className=\"empty-icon\">\r\n            <i className=\"icon icon-3x icon-stop\"></i>\r\n          </div>\r\n        )\r\n      }\r\n      <p className='empty-title h5' >\r\n        {titleText}\r\n      </p>\r\n      <p className='empty-subtitle'>\r\n        Search for a Gene to get started\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default class AppDataGrid extends Component{\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      selectedGene: props.globalState.selectedGene,\r\n      loading:false,\r\n      rows:[],\r\n    };\r\n  }\r\n  loadGeneData() {\r\n    console.log('in loadGeneData')\r\n      fetch(`/basic_api/v1/genes/${this.state.selectedGene}?format=json`)\r\n        .then(response => response.json())\r\n        .then(responseJSON => {\r\n          this.setState({ rows: responseJSON.data.genes, loading:false, });\r\n        })\r\n        .catch(e => {\r\n          console.error(e);\r\n          this.setState({ loading: false, });\r\n        });\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    const loading = state.selectedGene!== props.globalState.selectedGene\r\n    return {\r\n      selectedGene: props.globalState.selectedGene,\r\n      loading,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (this.state.selectedGene) {\r\n      this.loadGeneData();\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.state.selectedGene && this.state.loading) {\r\n      this.loadGeneData();\r\n    }\r\n  }\r\n  setRows(rows) {\r\n    this.state.setState({ rows, });\r\n  }\r\n  render() {\r\n    const columns = columnNames.map(colName => {\r\n      // if(colName==='URL'){\r\n      // column.formatter = function({value}){\r\n      //   return <ProgressBar now={value} label={`${value}%`} />;\r\n      // }\r\n      // // }\r\n      const column = {\r\n        key: colName,\r\n        name: colName,\r\n      };\r\n      if (colName === 'Gene') column.frozen = true;\r\n      return column;\r\n    });\r\n    const dataGridProps = {\r\n      columns,\r\n      rowGetter: i => this.state.rows[ i ],\r\n      rowsCount: this.state.rows.length,\r\n    };\r\n    if (this.state.loading) {\r\n      return emptyTable({ loading:true, });\r\n    } else if (!this.state.selectedGene) {\r\n      return emptyTable({ titleText:'You have no Gene selected', });\r\n    } else if (this.state.rows.length) {\r\n      return <ReactDataGrid {...dataGridProps}/>\r\n    } else {\r\n      return emptyTable({ titleText:'You have there are no Gene variants', });\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { useGlobal, } from '../hooks/state';\r\nimport { Card, } from 'jsonx/design/spectre.umd';\r\nimport * as Layout from '@react-spectre/layout';\r\nimport AppAutoSuggest from '../components/AppAutoSuggest';\r\nimport AppDataGrid from '../components/AppDataGrid';\r\n// console.log({ Layout, Card });\r\n\r\nconst App = () => {\r\n  const [ globalState, globalActions, ] = useGlobal();\r\n  const autoSuggestProps = { globalState, globalActions, };\r\n  const dataGridProps = { globalState, };\r\n  return (\r\n    <Layout.Grid style={{ marginTop: '1rem', }}>\r\n      <Layout.Row>\r\n        <Layout.Col all={12}>\r\n          <Layout.Navbar>\r\n            <Layout.Section>\r\n              <Layout.Brand href=\"/\">\r\n                Gene Variant Search\r\n              </Layout.Brand>\r\n            </Layout.Section>\r\n            <Layout.Section>\r\n              <AppAutoSuggest {...autoSuggestProps} />\r\n            </Layout.Section>\r\n          </Layout.Navbar>\r\n        </Layout.Col>\r\n      </Layout.Row>\r\n      <Layout.Row style={{ marginTop: '1rem', }}>\r\n        <Layout.Col all={12}>\r\n          <Card.Card>\r\n            <Card.Body>\r\n              <AppDataGrid {...dataGridProps}/>\r\n            </Card.Body>\r\n          </Card.Card>\r\n        </Layout.Col>\r\n      </Layout.Row>\r\n    </Layout.Grid>\r\n  );\r\n  // return JSONX.getReactElementFromJSONX.call(AppBoundContext, {\r\n  //   component: 'Spectre.Layout.Grid',\r\n  //   props: {\r\n  //     style: {\r\n  //       marginTop:'1rem',\r\n  //     },\r\n  //   },\r\n  //   children: [\r\n  //     {\r\n  //       component: 'Spectre.Layout.Row',\r\n  //       children: [\r\n  //         {\r\n  //           component: 'Spectre.Layout.Col',\r\n  //           props: {\r\n  //             all: 12,\r\n  //           },\r\n  //           children: [\r\n  //             {\r\n  //               component: 'Spectre.Card.Card',\r\n  //               children: [\r\n  //                 {\r\n  //                   component: 'Spectre.Card.Body',\r\n  //                   children: [\r\n  //                     {\r\n  //                       component: 'AppDataGrid',\r\n  //                       props: {\r\n  //                         globalState,\r\n  //                       },\r\n  //                     },\r\n  //                   ],\r\n  //                 },\r\n  //               ],\r\n  //             },\r\n  //           ],\r\n  //         },\r\n  //       ],\r\n  //     },\r\n  //   ],\r\n  // });\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/spectre.css/dist/spectre.min.css';\nimport '../node_modules/spectre.css/dist/spectre-exp.min.css';\nimport '../node_modules/spectre.css/dist/spectre-icons.min.css';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}