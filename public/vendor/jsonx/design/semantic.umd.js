(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
	(factory((global.SemanticUI = {}),global.React,null));
}(this, (function (exports,React,reactDom) { 'use strict';

	var React__default = 'default' in React ? React['default'] : React;

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	var possibleConstructorReturn = _possibleConstructorReturn;

	var getPrototypeOf = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	var setPrototypeOf = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	var inherits = _inherits;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty = _defineProperty;

	var _typeof_1$1 = createCommonjsModule(function (module) {
	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global$1 === "undefined" ? "undefined" : _typeof_1$1(global$1)) == 'object' && global$1 && global$1.Object === Object && global$1;

	/** Detect free variable `self`. */

	var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof_1$1(self)) == 'object' && self && self.Object === Object && self;
	/** Used as a reference to the global object. */

	var root = freeGlobal || freeSelf || Function('return this')();

	/** Built-in value references. */

	var _Symbol = root.Symbol;

	/** Used for built-in method references. */

	var objectProto = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty = objectProto.hasOwnProperty;
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString = objectProto.toString;
	/** Built-in value references. */

	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */

	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);

	  {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }

	  return result;
	}

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString$1 = objectProto$1.toString;
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */

	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	/** `Object#toString` result references. */

	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	/** Built-in value references. */

	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */

	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }

	  return symToStringTag$1 && symToStringTag$1 in Object(value) ? getRawTag(value) : objectToString(value);
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && _typeof_1$1(value) == 'object';
	}

	/** `Object#toString` result references. */

	var symbolTag = '[object Symbol]';
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */

	function isSymbol(value) {
	  return _typeof_1$1(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	}

	/** Used as references for various `Number` constants. */

	var NAN = 0 / 0;
	/**
	 * The base implementation of `_.toNumber` which doesn't ensure correct
	 * conversions of binary, hexadecimal, or octal string values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 */

	function baseToNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }

	  if (isSymbol(value)) {
	    return NAN;
	  }

	  return +value;
	}

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }

	  return result;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/** Used as references for various `Number` constants. */

	var INFINITY = 1 / 0;
	/** Used to convert symbols to primitives and strings. */

	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */

	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }

	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }

	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }

	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	/**
	 * Creates a function that performs a mathematical operation on two values.
	 *
	 * @private
	 * @param {Function} operator The function to perform the operation.
	 * @param {number} [defaultValue] The value used for `undefined` arguments.
	 * @returns {Function} Returns the new mathematical operation function.
	 */

	function createMathOperation(operator, defaultValue) {
	  return function (value, other) {
	    var result;

	    if (value === undefined && other === undefined) {
	      return defaultValue;
	    }

	    if (value !== undefined) {
	      result = value;
	    }

	    if (other !== undefined) {
	      if (result === undefined) {
	        return other;
	      }

	      if (typeof value == 'string' || typeof other == 'string') {
	        value = baseToString(value);
	        other = baseToString(other);
	      } else {
	        value = baseToNumber(value);
	        other = baseToNumber(other);
	      }

	      result = operator(value, other);
	    }

	    return result;
	  };
	}

	/**
	 * Adds two numbers.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.4.0
	 * @category Math
	 * @param {number} augend The first number in an addition.
	 * @param {number} addend The second number in an addition.
	 * @returns {number} Returns the total.
	 * @example
	 *
	 * _.add(6, 4);
	 * // => 10
	 */

	var add = createMathOperation(function (augend, addend) {
	  return augend + addend;
	}, 0);

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = _typeof_1$1(value);

	  return value != null && (type == 'object' || type == 'function');
	}

	/** Used as references for various `Number` constants. */

	var NAN$1 = 0 / 0;
	/** Used to match leading and trailing whitespace. */

	var reTrim = /^\s+|\s+$/g;
	/** Used to detect bad signed hexadecimal string values. */

	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	/** Used to detect binary string values. */

	var reIsBinary = /^0b[01]+$/i;
	/** Used to detect octal string values. */

	var reIsOctal = /^0o[0-7]+$/i;
	/** Built-in method references without a dependency on `root`. */

	var freeParseInt = parseInt;
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */

	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }

	  if (isSymbol(value)) {
	    return NAN$1;
	  }

	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }

	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }

	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN$1 : +value;
	}

	/** Used as references for various `Number` constants. */

	var INFINITY$1 = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;
	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */

	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }

	  value = toNumber(value);

	  if (value === INFINITY$1 || value === -INFINITY$1) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }

	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */

	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;
	  return result === result ? remainder ? result - remainder : result : 0;
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT = 'Expected a function';
	/**
	 * The opposite of `_.before`; this method creates a function that invokes
	 * `func` once it's called `n` or more times.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {number} n The number of calls before `func` is invoked.
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * var saves = ['profile', 'settings'];
	 *
	 * var done = _.after(saves.length, function() {
	 *   console.log('done saving!');
	 * });
	 *
	 * _.forEach(saves, function(type) {
	 *   asyncSave({ 'type': type, 'complete': done });
	 * });
	 * // => Logs 'done saving!' after the two async saves have completed.
	 */

	function after(n, func) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }

	  n = toInteger(n);
	  return function () {
	    if (--n < 1) {
	      return func.apply(this, arguments);
	    }
	  };
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	/** `Object#toString` result references. */

	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */

	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  } // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.


	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	/** Used to detect overreaching core-js shims. */

	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */

	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */


	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	/** Used to resolve the decompiled source of functions. */

	var funcToString = funcProto.toString;
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */

	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}

	    try {
	      return func + '';
	    } catch (e) {}
	  }

	  return '';
	}

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */

	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	/** Used to detect host constructors (Safari). */

	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	/** Used for built-in method references. */

	var funcProto$1 = Function.prototype,
	    objectProto$2 = Object.prototype;
	/** Used to resolve the decompiled source of functions. */

	var funcToString$1 = funcProto$1.toString;
	/** Used to check objects for own properties. */

	var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
	/** Used to detect if a method is native. */

	var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */

	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }

	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */

	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/* Built-in method references that are verified to be native. */

	var WeakMap = getNative(root, 'WeakMap');

	/** Used to store function metadata. */

	var metaMap = WeakMap && new WeakMap();

	/**
	 * The base implementation of `setData` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */

	var baseSetData = !metaMap ? identity : function (func, data) {
	  metaMap.set(func, data);
	  return func;
	};

	/** Built-in value references. */

	var objectCreate = Object.create;
	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */

	var baseCreate = function () {
	  function object() {}

	  return function (proto) {
	    if (!isObject(proto)) {
	      return {};
	    }

	    if (objectCreate) {
	      return objectCreate(proto);
	    }

	    object.prototype = proto;
	    var result = new object();
	    object.prototype = undefined;
	    return result;
	  };
	}();

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createCtor(Ctor) {
	  return function () {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;

	    switch (args.length) {
	      case 0:
	        return new Ctor();

	      case 1:
	        return new Ctor(args[0]);

	      case 2:
	        return new Ctor(args[0], args[1]);

	      case 3:
	        return new Ctor(args[0], args[1], args[2]);

	      case 4:
	        return new Ctor(args[0], args[1], args[2], args[3]);

	      case 5:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4]);

	      case 6:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

	      case 7:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }

	    var thisBinding = baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args); // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.

	    return isObject(result) ? result : thisBinding;
	  };
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG = 1;
	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createBind(func, bitmask, thisArg) {
	  var isBind = bitmask & WRAP_BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }

	  return wrapper;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);

	    case 1:
	      return func.call(thisArg, args[0]);

	    case 2:
	      return func.call(thisArg, args[0], args[1]);

	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }

	  return func.apply(thisArg, args);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */

	function composeArgs(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersLength = holders.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(leftLength + rangeLength),
	      isUncurried = !isCurried;

	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }

	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }

	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }

	  return result;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$1 = Math.max;
	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */

	function composeArgsRight(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersIndex = -1,
	      holdersLength = holders.length,
	      rightIndex = -1,
	      rightLength = partials.length,
	      rangeLength = nativeMax$1(argsLength - holdersLength, 0),
	      result = Array(rangeLength + rightLength),
	      isUncurried = !isCurried;

	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }

	  var offset = argsIndex;

	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }

	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }

	  return result;
	}

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
	  var length = array.length,
	      result = 0;

	  while (length--) {
	    if (array[length] === placeholder) {
	      ++result;
	    }
	  }

	  return result;
	}

	/**
	 * The function whose prototype chain sequence wrappers inherit from.
	 *
	 * @private
	 */
	function baseLodash() {// No operation performed.
	}

	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH = 4294967295;
	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @constructor
	 * @param {*} value The value to wrap.
	 */

	function LazyWrapper(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	} // Ensure `LazyWrapper` is an instance of `baseLodash`.


	LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	LazyWrapper.prototype.constructor = LazyWrapper;

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {// No operation performed.
	}

	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */

	var getData = !metaMap ? noop : function (func) {
	  return metaMap.get(func);
	};

	/** Used to lookup unminified function names. */
	var realNames = {};

	/** Used for built-in method references. */

	var objectProto$3 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */

	function getFuncName(func) {
	  var result = func.name + '',
	      array = realNames[result],
	      length = hasOwnProperty$2.call(realNames, result) ? array.length : 0;

	  while (length--) {
	    var data = array[length],
	        otherFunc = data.func;

	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }

	  return result;
	}

	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable explicit method chain sequences.
	 */

	function LodashWrapper(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}

	LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	LodashWrapper.prototype.constructor = LodashWrapper;

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;
	  array || (array = Array(length));

	  while (++index < length) {
	    array[index] = source[index];
	  }

	  return array;
	}

	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */

	function wrapperClone(wrapper) {
	  if (wrapper instanceof LazyWrapper) {
	    return wrapper.clone();
	  }

	  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = copyArray(wrapper.__actions__);
	  result.__index__ = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}

	/** Used for built-in method references. */

	var objectProto$4 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit method
	 * chain sequences. Methods that operate on and return arrays, collections,
	 * and functions can be chained together. Methods that retrieve a single value
	 * or may return a primitive value will automatically end the chain sequence
	 * and return the unwrapped value. Otherwise, the value must be unwrapped
	 * with `_#value`.
	 *
	 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	 * enabled using `_.chain`.
	 *
	 * The execution of chained methods is lazy, that is, it's deferred until
	 * `_#value` is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion.
	 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	 * the creation of intermediate arrays and can greatly reduce the number of
	 * iteratee executions. Sections of a chain sequence qualify for shortcut
	 * fusion if the section is applied to an array and iteratees accept only
	 * one argument. The heuristic for whether a section qualifies for shortcut
	 * fusion is subject to change.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	 * `zipObject`, `zipObjectDeep`, and `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	 * `upperFirst`, `value`, and `words`
	 *
	 * @name _
	 * @constructor
	 * @category Seq
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // Returns an unwrapped value.
	 * wrapped.reduce(_.add);
	 * // => 6
	 *
	 * // Returns a wrapped value.
	 * var squares = wrapped.map(square);
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */

	function lodash(value) {
	  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }

	    if (hasOwnProperty$3.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }

	  return new LodashWrapper(value);
	} // Ensure wrappers are instances of `baseLodash`.


	lodash.prototype = baseLodash.prototype;
	lodash.prototype.constructor = lodash;

	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	 *  else `false`.
	 */

	function isLaziable(func) {
	  var funcName = getFuncName(func),
	      other = lodash[funcName];

	  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	    return false;
	  }

	  if (func === other) {
	    return true;
	  }

	  var data = getData(other);
	  return !!data && func === data[0];
	}

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeNow = Date.now;
	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */

	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;
	  return function () {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);
	    lastCalled = stamp;

	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }

	    return func.apply(undefined, arguments);
	  };
	}

	/**
	 * Sets metadata for `func`.
	 *
	 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	 * period of time, it will trip its breaker and transition to an identity
	 * function to avoid garbage collection pauses in V8. See
	 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	 * for more details.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */

	var setData = shortOut(baseSetData);

	/** Used to match wrap detail comments. */
	var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	    reSplitDetails = /,? & /;
	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */

	function getWrapDetails(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */

	function insertWrapDetails(source, details) {
	  var length = details.length;

	  if (!length) {
	    return source;
	  }

	  var lastIndex = length - 1;
	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function () {
	    return value;
	  };
	}

	var defineProperty$1 = function () {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}();

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */

	var baseSetToString = !defineProperty$1 ? identity : function (func, string) {
	  return defineProperty$1(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */

	var setToString = shortOut(baseSetToString);

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }

	  return array;
	}

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }

	  return -1;
	}

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }

	  return -1;
	}

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function baseIndexOf(array, value, fromIndex) {
	  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */

	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$1 = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_CURRY_RIGHT_FLAG = 16,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_PARTIAL_RIGHT_FLAG = 64,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256,
	    WRAP_FLIP_FLAG = 512;
	/** Used to associate wrap methods with their bit flags. */

	var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG$1], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */

	function updateWrapDetails(details, bitmask) {
	  arrayEach(wrapFlags, function (pair) {
	    var value = '_.' + pair[0];

	    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */

	function setWrapToString(wrapper, reference, bitmask) {
	  var source = reference + '';
	  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$2 = 1,
	    WRAP_BIND_KEY_FLAG$1 = 2,
	    WRAP_CURRY_BOUND_FLAG = 4,
	    WRAP_CURRY_FLAG$1 = 8,
	    WRAP_PARTIAL_FLAG$1 = 32,
	    WRAP_PARTIAL_RIGHT_FLAG$1 = 64;
	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & WRAP_CURRY_FLAG$1,
	      newHolders = isCurry ? holders : undefined,
	      newHoldersRight = isCurry ? undefined : holders,
	      newPartials = isCurry ? partials : undefined,
	      newPartialsRight = isCurry ? undefined : partials;
	  bitmask |= isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1;
	  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);

	  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	    bitmask &= ~(WRAP_BIND_FLAG$2 | WRAP_BIND_KEY_FLAG$1);
	  }

	  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
	  var result = wrapFunc.apply(undefined, newData);

	  if (isLaziable(func)) {
	    setData(result, newData);
	  }

	  result.placeholder = placeholder;
	  return setWrapToString(result, func, bitmask);
	}

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */
	function getHolder(func) {
	  var object = func;
	  return object.placeholder;
	}

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	/** Used to detect unsigned integer values. */

	var reIsUint = /^(?:0|[1-9]\d*)$/;
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */

	function isIndex(value, length) {
	  var type = _typeof_1$1(value);

	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin = Math.min;
	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */

	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin(indexes.length, arrLength),
	      oldArray = copyArray(array);

	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }

	  return array;
	}

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';
	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */

	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];

	    if (value === placeholder || value === PLACEHOLDER) {
	      array[index] = PLACEHOLDER;
	      result[resIndex++] = index;
	    }
	  }

	  return result;
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$3 = 1,
	    WRAP_BIND_KEY_FLAG$2 = 2,
	    WRAP_CURRY_FLAG$2 = 8,
	    WRAP_CURRY_RIGHT_FLAG$1 = 16,
	    WRAP_ARY_FLAG$1 = 128,
	    WRAP_FLIP_FLAG$1 = 512;
	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & WRAP_ARY_FLAG$1,
	      isBind = bitmask & WRAP_BIND_FLAG$3,
	      isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
	      isCurried = bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1),
	      isFlip = bitmask & WRAP_FLIP_FLAG$1,
	      Ctor = isBindKey ? undefined : createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length;

	    while (index--) {
	      args[index] = arguments[index];
	    }

	    if (isCurried) {
	      var placeholder = getHolder(wrapper),
	          holdersCount = countHolders(args, placeholder);
	    }

	    if (partials) {
	      args = composeArgs(args, partials, holders, isCurried);
	    }

	    if (partialsRight) {
	      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	    }

	    length -= holdersCount;

	    if (isCurried && length < arity) {
	      var newHolders = replaceHolders(args, placeholder);
	      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
	    }

	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;
	    length = args.length;

	    if (argPos) {
	      args = reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }

	    if (isAry && ary < length) {
	      args.length = ary;
	    }

	    if (this && this !== root && this instanceof wrapper) {
	      fn = Ctor || createCtor(fn);
	    }

	    return fn.apply(thisBinding, args);
	  }

	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createCurry(func, bitmask, arity) {
	  var Ctor = createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length,
	        placeholder = getHolder(wrapper);

	    while (index--) {
	      args[index] = arguments[index];
	    }

	    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
	    length -= holders.length;

	    if (length < arity) {
	      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
	    }

	    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
	    return apply(fn, this, args);
	  }

	  return wrapper;
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$4 = 1;
	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createPartial(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & WRAP_BIND_FLAG$4,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength),
	        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }

	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }

	    return apply(fn, isBind ? thisArg : this, args);
	  }

	  return wrapper;
	}

	/** Used as the internal argument placeholder. */

	var PLACEHOLDER$1 = '__lodash_placeholder__';
	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$5 = 1,
	    WRAP_BIND_KEY_FLAG$3 = 2,
	    WRAP_CURRY_BOUND_FLAG$1 = 4,
	    WRAP_CURRY_FLAG$3 = 8,
	    WRAP_ARY_FLAG$2 = 128,
	    WRAP_REARG_FLAG$1 = 256;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$1 = Math.min;
	/**
	 * Merges the function metadata of `source` into `data`.
	 *
	 * Merging metadata reduces the number of wrappers used to invoke a function.
	 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	 * may be applied regardless of execution order. Methods like `_.ary` and
	 * `_.rearg` modify function arguments, making the order in which they are
	 * executed important, preventing the merging of metadata. However, we make
	 * an exception for a safe combined case where curried functions have `_.ary`
	 * and or `_.rearg` applied.
	 *
	 * @private
	 * @param {Array} data The destination metadata.
	 * @param {Array} source The source metadata.
	 * @returns {Array} Returns `data`.
	 */

	function mergeData(data, source) {
	  var bitmask = data[1],
	      srcBitmask = source[1],
	      newBitmask = bitmask | srcBitmask,
	      isCommon = newBitmask < (WRAP_BIND_FLAG$5 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);
	  var isCombo = srcBitmask == WRAP_ARY_FLAG$2 && bitmask == WRAP_CURRY_FLAG$3 || srcBitmask == WRAP_ARY_FLAG$2 && bitmask == WRAP_REARG_FLAG$1 && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$1) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG$3; // Exit early if metadata can't be merged.

	  if (!(isCommon || isCombo)) {
	    return data;
	  } // Use source `thisArg` if available.


	  if (srcBitmask & WRAP_BIND_FLAG$5) {
	    data[2] = source[2]; // Set when currying a bound function.

	    newBitmask |= bitmask & WRAP_BIND_FLAG$5 ? 0 : WRAP_CURRY_BOUND_FLAG$1;
	  } // Compose partial arguments.


	  var value = source[3];

	  if (value) {
	    var partials = data[3];
	    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER$1) : source[4];
	  } // Compose partial right arguments.


	  value = source[5];

	  if (value) {
	    partials = data[5];
	    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER$1) : source[6];
	  } // Use source `argPos` if available.


	  value = source[7];

	  if (value) {
	    data[7] = value;
	  } // Use source `ary` if it's smaller.


	  if (srcBitmask & WRAP_ARY_FLAG$2) {
	    data[8] = data[8] == null ? source[8] : nativeMin$1(data[8], source[8]);
	  } // Use source `arity` if one is not provided.


	  if (data[9] == null) {
	    data[9] = source[9];
	  } // Use source `func` and merge bitmasks.


	  data[0] = source[0];
	  data[1] = newBitmask;
	  return data;
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT$1 = 'Expected a function';
	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$6 = 1,
	    WRAP_BIND_KEY_FLAG$4 = 2,
	    WRAP_CURRY_FLAG$4 = 8,
	    WRAP_CURRY_RIGHT_FLAG$2 = 16,
	    WRAP_PARTIAL_FLAG$2 = 32,
	    WRAP_PARTIAL_RIGHT_FLAG$2 = 64;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$2 = Math.max;
	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *    1 - `_.bind`
	 *    2 - `_.bindKey`
	 *    4 - `_.curry` or `_.curryRight` of a bound function
	 *    8 - `_.curry`
	 *   16 - `_.curryRight`
	 *   32 - `_.partial`
	 *   64 - `_.partialRight`
	 *  128 - `_.rearg`
	 *  256 - `_.ary`
	 *  512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */

	function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4;

	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }

	  var length = partials ? partials.length : 0;

	  if (!length) {
	    bitmask &= ~(WRAP_PARTIAL_FLAG$2 | WRAP_PARTIAL_RIGHT_FLAG$2);
	    partials = holders = undefined;
	  }

	  ary = ary === undefined ? ary : nativeMax$2(toInteger(ary), 0);
	  arity = arity === undefined ? arity : toInteger(arity);
	  length -= holders ? holders.length : 0;

	  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$2) {
	    var partialsRight = partials,
	        holdersRight = holders;
	    partials = holders = undefined;
	  }

	  var data = isBindKey ? undefined : getData(func);
	  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	  if (data) {
	    mergeData(newData, data);
	  }

	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax$2(newData[9] - length, 0);

	  if (!arity && bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2)) {
	    bitmask &= ~(WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2);
	  }

	  if (!bitmask || bitmask == WRAP_BIND_FLAG$6) {
	    var result = createBind(func, bitmask, thisArg);
	  } else if (bitmask == WRAP_CURRY_FLAG$4 || bitmask == WRAP_CURRY_RIGHT_FLAG$2) {
	    result = createCurry(func, bitmask, arity);
	  } else if ((bitmask == WRAP_PARTIAL_FLAG$2 || bitmask == (WRAP_BIND_FLAG$6 | WRAP_PARTIAL_FLAG$2)) && !holders.length) {
	    result = createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = createHybrid.apply(undefined, newData);
	  }

	  var setter = data ? baseSetData : setData;
	  return setWrapToString(setter(result, newData), func, bitmask);
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_ARY_FLAG$3 = 128;
	/**
	 * Creates a function that invokes `func`, with up to `n` arguments,
	 * ignoring any additional arguments.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} [n=func.length] The arity cap.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new capped function.
	 * @example
	 *
	 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	 * // => [6, 8, 10]
	 */

	function ary(func, n, guard) {
	  n = guard ? undefined : n;
	  n = func && n == null ? func.length : n;
	  return createWrap(func, WRAP_ARY_FLAG$3, undefined, undefined, undefined, undefined, n);
	}

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */

	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty$1) {
	    defineProperty$1(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}

	/** Used for built-in method references. */

	var objectProto$5 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */

	function assignValue(object, key, value) {
	  var objValue = object[key];

	  if (!(hasOwnProperty$4.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	    baseAssignValue(object, key, value);
	  }
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */

	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});
	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }

	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }

	  return object;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$3 = Math.max;
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */

	function overRest(func, start, transform) {
	  start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax$3(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }

	    index = -1;
	    var otherArgs = Array(start + 1);

	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }

	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */

	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */

	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */

	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */

	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }

	  var type = _typeof_1$1(index);

	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	    return eq(object[index], value);
	  }

	  return false;
	}

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */

	function createAssigner(assigner) {
	  return baseRest(function (object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;
	    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }

	    object = Object(object);

	    while (++index < length) {
	      var source = sources[index];

	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }

	    return object;
	  });
	}

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */

	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$6;
	  return value === proto;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }

	  return result;
	}

	/** `Object#toString` result references. */

	var argsTag = '[object Arguments]';
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */

	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	/** Used for built-in method references. */

	var objectProto$7 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
	/** Built-in value references. */

	var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */

	var isArguments = baseIsArguments(function () {
	  return arguments;
	}()) ? baseIsArguments : function (value) {
	  return isObjectLike(value) && hasOwnProperty$5.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	/** Detect free variable `exports`. */

	var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof_1$1(exports)) == 'object' && exports && !exports.nodeType && exports;
	/** Detect free variable `module`. */

	var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof_1$1(module)) == 'object' && module && !module.nodeType && module;
	/** Detect the popular CommonJS extension `module.exports`. */

	var moduleExports = freeModule && freeModule.exports === freeExports;
	/** Built-in value references. */

	var Buffer = moduleExports ? root.Buffer : undefined;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */

	var isBuffer = nativeIsBuffer || stubFalse;

	/** `Object#toString` result references. */

	var argsTag$1 = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag$1 = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	/** Used to identify `toStringTag` values of typed arrays. */

	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */

	function baseIsTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}

	/** Detect free variable `exports`. */

	var freeExports$1 = (typeof exports === "undefined" ? "undefined" : _typeof_1$1(exports)) == 'object' && exports && !exports.nodeType && exports;
	/** Detect free variable `module`. */

	var freeModule$1 = freeExports$1 && (typeof module === "undefined" ? "undefined" : _typeof_1$1(module)) == 'object' && module && !module.nodeType && module;
	/** Detect the popular CommonJS extension `module.exports`. */

	var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
	/** Detect free variable `process` from Node.js. */

	var freeProcess = moduleExports$1 && freeGlobal.process;
	/** Used to access faster Node.js helpers. */

	var nodeUtil = function () {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

	    if (types) {
	      return types;
	    } // Legacy `process.binding('util')` for Node.js < 10.


	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}();

	/* Node.js helper references. */

	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */

	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/** Used for built-in method references. */

	var objectProto$8 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */

	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$6.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
	    isIndex(key, length)))) {
	      result.push(key);
	    }
	  }

	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeKeys = overArg(Object.keys, Object);

	/** Used for built-in method references. */

	var objectProto$9 = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }

	  var result = [];

	  for (var key in Object(object)) {
	    if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }

	  return result;
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */

	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/** Used for built-in method references. */

	var objectProto$a = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */

	var assign = createAssigner(function (object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }

	  for (var key in source) {
	    if (hasOwnProperty$8.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];

	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }

	  return result;
	}

	/** Used for built-in method references. */

	var objectProto$b = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }

	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
	      result.push(key);
	    }
	  }

	  return result;
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */

	function keysIn$1(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	/**
	 * This method is like `_.assign` except that it iterates over own and
	 * inherited source properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assign
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	 */

	var assignIn = createAssigner(function (object, source) {
	  copyObject(source, keysIn$1(source), object);
	});

	/**
	 * This method is like `_.assignIn` except that it accepts `customizer`
	 * which is invoked to produce the assigned values. If `customizer` returns
	 * `undefined`, assignment is handled by the method instead. The `customizer`
	 * is invoked with five arguments: (objValue, srcValue, key, object, source).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias extendWith
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @see _.assignWith
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   return _.isUndefined(objValue) ? srcValue : objValue;
	 * }
	 *
	 * var defaults = _.partialRight(_.assignInWith, customizer);
	 *
	 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */

	var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
	  copyObject(source, keysIn$1(source), object, customizer);
	});

	/**
	 * This method is like `_.assign` except that it accepts `customizer`
	 * which is invoked to produce the assigned values. If `customizer` returns
	 * `undefined`, assignment is handled by the method instead. The `customizer`
	 * is invoked with five arguments: (objValue, srcValue, key, object, source).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @see _.assignInWith
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   return _.isUndefined(objValue) ? srcValue : objValue;
	 * }
	 *
	 * var defaults = _.partialRight(_.assignWith, customizer);
	 *
	 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */

	var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
	  copyObject(source, keys(source), object, customizer);
	});

	/** Used to match property names within property paths. */

	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */

	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }

	  var type = _typeof_1$1(value);

	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
	    return true;
	  }

	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}

	/* Built-in method references that are verified to be native. */

	var nativeCreate = getNative(Object, 'create');

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */

	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	/** Used to stand-in for `undefined` hash values. */

	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	/** Used for built-in method references. */

	var objectProto$c = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$a = objectProto$c.hasOwnProperty;
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	function hashGet(key) {
	  var data = this.__data__;

	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }

	  return hasOwnProperty$a.call(data, key) ? data[key] : undefined;
	}

	/** Used for built-in method references. */

	var objectProto$d = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$b = objectProto$d.hasOwnProperty;
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty$b.call(data, key);
	}

	/** Used to stand-in for `undefined` hash values. */

	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */

	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */

	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	  this.clear();

	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	} // Add methods to `Hash`.


	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function assocIndexOf(array, key) {
	  var length = array.length;

	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }

	  return -1;
	}

	/** Used for built-in method references. */

	var arrayProto = Array.prototype;
	/** Built-in value references. */

	var splice = arrayProto.splice;
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }

	  var lastIndex = data.length - 1;

	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }

	  --this.size;
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */

	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }

	  return this;
	}

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */

	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	  this.clear();

	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	} // Add methods to `ListCache`.


	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/* Built-in method references that are verified to be native. */

	var Map$1 = getNative(root, 'Map');

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */

	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map$1 || ListCache)(),
	    'string': new Hash()
	  };
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = _typeof_1$1(value);

	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */

	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */

	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */

	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	  this.clear();

	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	} // Add methods to `MapCache`.


	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/** Error message constants. */

	var FUNC_ERROR_TEXT$2 = 'Expected a function';
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */

	function memoize(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$2);
	  }

	  var memoized = function memoized() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }

	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };

	  memoized.cache = new (memoize.Cache || MapCache)();
	  return memoized;
	} // Expose `MapCache`.


	memoize.Cache = MapCache;

	/** Used as the maximum memoize cache size. */

	var MAX_MEMOIZE_SIZE = 500;
	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */

	function memoizeCapped(func) {
	  var result = memoize(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }

	    return key;
	  });
	  var cache = result.cache;
	  return result;
	}

	/** Used to match property names within property paths. */

	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	/** Used to match backslashes in property paths. */

	var reEscapeChar = /\\(\\)?/g;
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */

	var stringToPath = memoizeCapped(function (string) {
	  var result = [];

	  if (string.charCodeAt(0) === 46
	  /* . */
	  ) {
	      result.push('');
	    }

	  string.replace(rePropName, function (match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */

	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */

	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }

	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	/** Used as references for various `Number` constants. */

	var INFINITY$2 = 1 / 0;
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */

	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }

	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */

	function baseGet(object, path) {
	  path = castPath(path, object);
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }

	  return index && index == length ? object : undefined;
	}

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */

	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	/**
	 * The base implementation of `_.at` without support for individual paths.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Array} Returns the picked elements.
	 */

	function baseAt(object, paths) {
	  var index = -1,
	      length = paths.length,
	      result = Array(length),
	      skip = object == null;

	  while (++index < length) {
	    result[index] = skip ? undefined : get(object, paths[index]);
	  }

	  return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }

	  return array;
	}

	/** Built-in value references. */

	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;
	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */

	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */

	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;
	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];

	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }

	  return result;
	}

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */

	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */

	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	/**
	 * Creates an array of values corresponding to `paths` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Array} Returns the picked values.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	 *
	 * _.at(object, ['a[0].b.c', 'a[1]']);
	 * // => [3, 4]
	 */

	var at = flatRest(baseAt);

	/** Built-in value references. */

	var getPrototype = overArg(Object.getPrototypeOf, Object);

	/** `Object#toString` result references. */

	var objectTag$1 = '[object Object]';
	/** Used for built-in method references. */

	var funcProto$2 = Function.prototype,
	    objectProto$e = Object.prototype;
	/** Used to resolve the decompiled source of functions. */

	var funcToString$2 = funcProto$2.toString;
	/** Used to check objects for own properties. */

	var hasOwnProperty$c = objectProto$e.hasOwnProperty;
	/** Used to infer the `Object` constructor. */

	var objectCtorString = funcToString$2.call(Object);
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */

	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag$1) {
	    return false;
	  }

	  var proto = getPrototype(value);

	  if (proto === null) {
	    return true;
	  }

	  var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
	}

	/** `Object#toString` result references. */

	var domExcTag = '[object DOMException]',
	    errorTag$1 = '[object Error]';
	/**
	 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	 * `SyntaxError`, `TypeError`, or `URIError` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	 * @example
	 *
	 * _.isError(new Error);
	 * // => true
	 *
	 * _.isError(Error);
	 * // => false
	 */

	function isError(value) {
	  if (!isObjectLike(value)) {
	    return false;
	  }

	  var tag = baseGetTag(value);
	  return tag == errorTag$1 || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
	}

	/**
	 * Attempts to invoke `func`, returning either the result or the caught error
	 * object. Any additional arguments are provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {Function} func The function to attempt.
	 * @param {...*} [args] The arguments to invoke `func` with.
	 * @returns {*} Returns the `func` result or error object.
	 * @example
	 *
	 * // Avoid throwing errors for invalid selectors.
	 * var elements = _.attempt(function(selector) {
	 *   return document.querySelectorAll(selector);
	 * }, '>_>');
	 *
	 * if (_.isError(elements)) {
	 *   elements = [];
	 * }
	 */

	var attempt = baseRest(function (func, args) {
	  try {
	    return apply(func, undefined, args);
	  } catch (e) {
	    return isError(e) ? e : new Error(e);
	  }
	});

	/** Error message constants. */

	var FUNC_ERROR_TEXT$3 = 'Expected a function';
	/**
	 * Creates a function that invokes `func`, with the `this` binding and arguments
	 * of the created function, while it's called less than `n` times. Subsequent
	 * calls to the created function return the result of the last `func` invocation.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {number} n The number of calls at which `func` is no longer invoked.
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * jQuery(element).on('click', _.before(5, addContactToList));
	 * // => Allows adding up to 4 contacts to the list.
	 */

	function before(n, func) {
	  var result;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$3);
	  }

	  n = toInteger(n);
	  return function () {
	    if (--n > 0) {
	      result = func.apply(this, arguments);
	    }

	    if (n <= 1) {
	      func = undefined;
	    }

	    return result;
	  };
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$7 = 1,
	    WRAP_PARTIAL_FLAG$3 = 32;
	/**
	 * Creates a function that invokes `func` with the `this` binding of `thisArg`
	 * and `partials` prepended to the arguments it receives.
	 *
	 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	 * property of bound functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * function greet(greeting, punctuation) {
	 *   return greeting + ' ' + this.user + punctuation;
	 * }
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * var bound = _.bind(greet, object, 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * // Bound with placeholders.
	 * var bound = _.bind(greet, object, _, '!');
	 * bound('hi');
	 * // => 'hi fred!'
	 */

	var bind = baseRest(function (func, thisArg, partials) {
	  var bitmask = WRAP_BIND_FLAG$7;

	  if (partials.length) {
	    var holders = replaceHolders(partials, getHolder(bind));
	    bitmask |= WRAP_PARTIAL_FLAG$3;
	  }

	  return createWrap(func, bitmask, thisArg, partials, holders);
	}); // Assign default placeholders.

	bind.placeholder = {};

	/**
	 * Binds methods of an object to the object itself, overwriting the existing
	 * method.
	 *
	 * **Note:** This method doesn't set the "length" property of bound functions.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {Object} object The object to bind and assign the bound methods to.
	 * @param {...(string|string[])} methodNames The object method names to bind.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var view = {
	 *   'label': 'docs',
	 *   'click': function() {
	 *     console.log('clicked ' + this.label);
	 *   }
	 * };
	 *
	 * _.bindAll(view, ['click']);
	 * jQuery(element).on('click', view.click);
	 * // => Logs 'clicked docs' when clicked.
	 */

	var bindAll = flatRest(function (object, methodNames) {
	  arrayEach(methodNames, function (key) {
	    key = toKey(key);
	    baseAssignValue(object, key, bind(object[key], object));
	  });
	  return object;
	});

	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_FLAG$8 = 1,
	    WRAP_BIND_KEY_FLAG$5 = 2,
	    WRAP_PARTIAL_FLAG$4 = 32;
	/**
	 * Creates a function that invokes the method at `object[key]` with `partials`
	 * prepended to the arguments it receives.
	 *
	 * This method differs from `_.bind` by allowing bound functions to reference
	 * methods that may be redefined or don't yet exist. See
	 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	 * for more details.
	 *
	 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Function
	 * @param {Object} object The object to invoke the method on.
	 * @param {string} key The key of the method.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * var object = {
	 *   'user': 'fred',
	 *   'greet': function(greeting, punctuation) {
	 *     return greeting + ' ' + this.user + punctuation;
	 *   }
	 * };
	 *
	 * var bound = _.bindKey(object, 'greet', 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * object.greet = function(greeting, punctuation) {
	 *   return greeting + 'ya ' + this.user + punctuation;
	 * };
	 *
	 * bound('!');
	 * // => 'hiya fred!'
	 *
	 * // Bound with placeholders.
	 * var bound = _.bindKey(object, 'greet', _, '!');
	 * bound('hi');
	 * // => 'hiya fred!'
	 */

	var bindKey = baseRest(function (object, key, partials) {
	  var bitmask = WRAP_BIND_FLAG$8 | WRAP_BIND_KEY_FLAG$5;

	  if (partials.length) {
	    var holders = replaceHolders(partials, getHolder(bindKey));
	    bitmask |= WRAP_PARTIAL_FLAG$4;
	  }

	  return createWrap(key, bitmask, object, partials, holders);
	}); // Assign default placeholders.

	bindKey.placeholder = {};

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }

	  end = end > length ? length : end;

	  if (end < 0) {
	    end += length;
	  }

	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;
	  var result = Array(length);

	  while (++index < length) {
	    result[index] = array[index + start];
	  }

	  return result;
	}

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */

	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : baseSlice(array, start, end);
	}

	/** Used to compose unicode character classes. */
	var rsAstralRange = "\\ud800-\\udfff",
	    rsComboMarksRange = "\\u0300-\\u036f",
	    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
	    rsComboSymbolsRange = "\\u20d0-\\u20ff",
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = "\\ufe0e\\ufe0f";
	/** Used to compose unicode capture groups. */

	var rsZWJ = "\\u200d";
	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */

	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	/** Used to compose unicode character classes. */
	var rsAstralRange$1 = "\\ud800-\\udfff",
	    rsComboMarksRange$1 = "\\u0300-\\u036f",
	    reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
	    rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
	    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
	    rsVarRange$1 = "\\ufe0e\\ufe0f";
	/** Used to compose unicode capture groups. */

	var rsAstral = '[' + rsAstralRange$1 + ']',
	    rsCombo = '[' + rsComboRange$1 + ']',
	    rsFitz = "\\ud83c[\\udffb-\\udfff]",
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange$1 + ']',
	    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
	    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
	    rsZWJ$1 = "\\u200d";
	/** Used to compose unicode regexes. */

	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange$1 + ']?',
	    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function stringToArray(string) {
	  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
	}

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */

	function createCaseFirst(methodName) {
	  return function (string) {
	    string = toString(string);
	    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
	    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
	    return chr[methodName]() + trailing;
	  };
	}

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */

	var upperFirst = createCaseFirst('toUpperCase');

	/**
	 * Converts the first character of `string` to upper case and the remaining
	 * to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('FRED');
	 * // => 'Fred'
	 */

	function capitalize(string) {
	  return upperFirst(toString(string).toLowerCase());
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }

	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }

	  return accumulator;
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}

	/** Used to map Latin Unicode letters to basic Latin letters. */

	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',
	  '\xc1': 'A',
	  '\xc2': 'A',
	  '\xc3': 'A',
	  '\xc4': 'A',
	  '\xc5': 'A',
	  '\xe0': 'a',
	  '\xe1': 'a',
	  '\xe2': 'a',
	  '\xe3': 'a',
	  '\xe4': 'a',
	  '\xe5': 'a',
	  '\xc7': 'C',
	  '\xe7': 'c',
	  '\xd0': 'D',
	  '\xf0': 'd',
	  '\xc8': 'E',
	  '\xc9': 'E',
	  '\xca': 'E',
	  '\xcb': 'E',
	  '\xe8': 'e',
	  '\xe9': 'e',
	  '\xea': 'e',
	  '\xeb': 'e',
	  '\xcc': 'I',
	  '\xcd': 'I',
	  '\xce': 'I',
	  '\xcf': 'I',
	  '\xec': 'i',
	  '\xed': 'i',
	  '\xee': 'i',
	  '\xef': 'i',
	  '\xd1': 'N',
	  '\xf1': 'n',
	  '\xd2': 'O',
	  '\xd3': 'O',
	  '\xd4': 'O',
	  '\xd5': 'O',
	  '\xd6': 'O',
	  '\xd8': 'O',
	  '\xf2': 'o',
	  '\xf3': 'o',
	  '\xf4': 'o',
	  '\xf5': 'o',
	  '\xf6': 'o',
	  '\xf8': 'o',
	  '\xd9': 'U',
	  '\xda': 'U',
	  '\xdb': 'U',
	  '\xdc': 'U',
	  '\xf9': 'u',
	  '\xfa': 'u',
	  '\xfb': 'u',
	  '\xfc': 'u',
	  '\xdd': 'Y',
	  '\xfd': 'y',
	  '\xff': 'y',
	  '\xc6': 'Ae',
	  '\xe6': 'ae',
	  '\xde': 'Th',
	  '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  "\u0100": 'A',
	  "\u0102": 'A',
	  "\u0104": 'A',
	  "\u0101": 'a',
	  "\u0103": 'a',
	  "\u0105": 'a',
	  "\u0106": 'C',
	  "\u0108": 'C',
	  "\u010A": 'C',
	  "\u010C": 'C',
	  "\u0107": 'c',
	  "\u0109": 'c',
	  "\u010B": 'c',
	  "\u010D": 'c',
	  "\u010E": 'D',
	  "\u0110": 'D',
	  "\u010F": 'd',
	  "\u0111": 'd',
	  "\u0112": 'E',
	  "\u0114": 'E',
	  "\u0116": 'E',
	  "\u0118": 'E',
	  "\u011A": 'E',
	  "\u0113": 'e',
	  "\u0115": 'e',
	  "\u0117": 'e',
	  "\u0119": 'e',
	  "\u011B": 'e',
	  "\u011C": 'G',
	  "\u011E": 'G',
	  "\u0120": 'G',
	  "\u0122": 'G',
	  "\u011D": 'g',
	  "\u011F": 'g',
	  "\u0121": 'g',
	  "\u0123": 'g',
	  "\u0124": 'H',
	  "\u0126": 'H',
	  "\u0125": 'h',
	  "\u0127": 'h',
	  "\u0128": 'I',
	  "\u012A": 'I',
	  "\u012C": 'I',
	  "\u012E": 'I',
	  "\u0130": 'I',
	  "\u0129": 'i',
	  "\u012B": 'i',
	  "\u012D": 'i',
	  "\u012F": 'i',
	  "\u0131": 'i',
	  "\u0134": 'J',
	  "\u0135": 'j',
	  "\u0136": 'K',
	  "\u0137": 'k',
	  "\u0138": 'k',
	  "\u0139": 'L',
	  "\u013B": 'L',
	  "\u013D": 'L',
	  "\u013F": 'L',
	  "\u0141": 'L',
	  "\u013A": 'l',
	  "\u013C": 'l',
	  "\u013E": 'l',
	  "\u0140": 'l',
	  "\u0142": 'l',
	  "\u0143": 'N',
	  "\u0145": 'N',
	  "\u0147": 'N',
	  "\u014A": 'N',
	  "\u0144": 'n',
	  "\u0146": 'n',
	  "\u0148": 'n',
	  "\u014B": 'n',
	  "\u014C": 'O',
	  "\u014E": 'O',
	  "\u0150": 'O',
	  "\u014D": 'o',
	  "\u014F": 'o',
	  "\u0151": 'o',
	  "\u0154": 'R',
	  "\u0156": 'R',
	  "\u0158": 'R',
	  "\u0155": 'r',
	  "\u0157": 'r',
	  "\u0159": 'r',
	  "\u015A": 'S',
	  "\u015C": 'S',
	  "\u015E": 'S',
	  "\u0160": 'S',
	  "\u015B": 's',
	  "\u015D": 's',
	  "\u015F": 's',
	  "\u0161": 's',
	  "\u0162": 'T',
	  "\u0164": 'T',
	  "\u0166": 'T',
	  "\u0163": 't',
	  "\u0165": 't',
	  "\u0167": 't',
	  "\u0168": 'U',
	  "\u016A": 'U',
	  "\u016C": 'U',
	  "\u016E": 'U',
	  "\u0170": 'U',
	  "\u0172": 'U',
	  "\u0169": 'u',
	  "\u016B": 'u',
	  "\u016D": 'u',
	  "\u016F": 'u',
	  "\u0171": 'u',
	  "\u0173": 'u',
	  "\u0174": 'W',
	  "\u0175": 'w',
	  "\u0176": 'Y',
	  "\u0177": 'y',
	  "\u0178": 'Y',
	  "\u0179": 'Z',
	  "\u017B": 'Z',
	  "\u017D": 'Z',
	  "\u017A": 'z',
	  "\u017C": 'z',
	  "\u017E": 'z',
	  "\u0132": 'IJ',
	  "\u0133": 'ij',
	  "\u0152": 'Oe',
	  "\u0153": 'oe',
	  "\u0149": "'n",
	  "\u017F": 's'
	};
	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */

	var deburrLetter = basePropertyOf(deburredLetters);

	/** Used to match Latin Unicode letters (excluding mathematical operators). */

	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	/** Used to compose unicode character classes. */

	var rsComboMarksRange$2 = "\\u0300-\\u036f",
	    reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
	    rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
	    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
	/** Used to compose unicode capture groups. */

	var rsCombo$1 = '[' + rsComboRange$2 + ']';
	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */

	var reComboMark = RegExp(rsCombo$1, 'g');
	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */

	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */

	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */

	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	/** Used to compose unicode character classes. */
	var rsAstralRange$2 = "\\ud800-\\udfff",
	    rsComboMarksRange$3 = "\\u0300-\\u036f",
	    reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
	    rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
	    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
	    rsDingbatRange = "\\u2700-\\u27bf",
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = "\\u2000-\\u206f",
	    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange$2 = "\\ufe0e\\ufe0f",
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	/** Used to compose unicode capture groups. */

	var rsApos = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo$2 = '[' + rsComboRange$3 + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
	    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
	    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
	    rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
	    rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ$2 = "\\u200d";
	/** Used to compose unicode regexes. */

	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod$1 = rsModifier$1 + '?',
	    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
	    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
	/** Used to match complex or compound words. */

	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */

	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */

	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }

	  return string.match(pattern) || [];
	}

	/** Used to compose unicode capture groups. */

	var rsApos$1 = "['\u2019]";
	/** Used to match apostrophes. */

	var reApos = RegExp(rsApos$1, 'g');
	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */

	function createCompounder(callback) {
	  return function (string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	/**
	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar--');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__FOO_BAR__');
	 * // => 'fooBar'
	 */

	var camelCase = createCompounder(function (result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize(word) : word);
	});

	/**
	 * Casts `value` as an array if it's not one.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.4.0
	 * @category Lang
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast array.
	 * @example
	 *
	 * _.castArray(1);
	 * // => [1]
	 *
	 * _.castArray({ 'a': 1 });
	 * // => [{ 'a': 1 }]
	 *
	 * _.castArray('abc');
	 * // => ['abc']
	 *
	 * _.castArray(null);
	 * // => [null]
	 *
	 * _.castArray(undefined);
	 * // => [undefined]
	 *
	 * _.castArray();
	 * // => []
	 *
	 * var array = [1, 2, 3];
	 * console.log(_.castArray(array) === array);
	 * // => true
	 */

	function castArray() {
	  if (!arguments.length) {
	    return [];
	  }

	  var value = arguments[0];
	  return isArray(value) ? value : [value];
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$2 = Math.min;
	/**
	 * Creates a function like `_.round`.
	 *
	 * @private
	 * @param {string} methodName The name of the `Math` method to use when rounding.
	 * @returns {Function} Returns the new round function.
	 */

	function createRound(methodName) {
	  var func = Math[methodName];
	  return function (number, precision) {
	    number = toNumber(number);
	    precision = precision == null ? 0 : nativeMin$2(toInteger(precision), 292);

	    if (precision) {
	      // Shift with exponential notation to avoid floating-point issues.
	      // See [MDN](https://mdn.io/round#Examples) for more details.
	      var pair = (toString(number) + 'e').split('e'),
	          value = func(pair[0] + 'e' + (+pair[1] + precision));
	      pair = (toString(value) + 'e').split('e');
	      return +(pair[0] + 'e' + (+pair[1] - precision));
	    }

	    return func(number);
	  };
	}

	/**
	 * Computes `number` rounded up to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round up.
	 * @param {number} [precision=0] The precision to round up to.
	 * @returns {number} Returns the rounded up number.
	 * @example
	 *
	 * _.ceil(4.006);
	 * // => 5
	 *
	 * _.ceil(6.004, 2);
	 * // => 6.01
	 *
	 * _.ceil(6040, -2);
	 * // => 6100
	 */

	var ceil = createRound('ceil');

	/**
	 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	 * chain sequences enabled. The result of such sequences must be unwrapped
	 * with `_#value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Seq
	 * @param {*} value The value to wrap.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36 },
	 *   { 'user': 'fred',    'age': 40 },
	 *   { 'user': 'pebbles', 'age': 1 }
	 * ];
	 *
	 * var youngest = _
	 *   .chain(users)
	 *   .sortBy('age')
	 *   .map(function(o) {
	 *     return o.user + ' is ' + o.age;
	 *   })
	 *   .head()
	 *   .value();
	 * // => 'pebbles is 1'
	 */

	function chain(value) {
	  var result = lodash(value);
	  result.__chain__ = true;
	  return result;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeCeil = Math.ceil,
	    nativeMax$4 = Math.max;
	/**
	 * Creates an array of elements split into groups the length of `size`.
	 * If `array` can't be split evenly, the final chunk will be the remaining
	 * elements.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to process.
	 * @param {number} [size=1] The length of each chunk
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the new array of chunks.
	 * @example
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 2);
	 * // => [['a', 'b'], ['c', 'd']]
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 3);
	 * // => [['a', 'b', 'c'], ['d']]
	 */

	function chunk(array, size, guard) {
	  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
	    size = 1;
	  } else {
	    size = nativeMax$4(toInteger(size), 0);
	  }

	  var length = array == null ? 0 : array.length;

	  if (!length || size < 1) {
	    return [];
	  }

	  var index = 0,
	      resIndex = 0,
	      result = Array(nativeCeil(length / size));

	  while (index < length) {
	    result[resIndex++] = baseSlice(array, index, index += size);
	  }

	  return result;
	}

	/**
	 * The base implementation of `_.clamp` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 */
	function baseClamp(number, lower, upper) {
	  if (number === number) {
	    if (upper !== undefined) {
	      number = number <= upper ? number : upper;
	    }

	    if (lower !== undefined) {
	      number = number >= lower ? number : lower;
	    }
	  }

	  return number;
	}

	/**
	 * Clamps `number` within the inclusive `lower` and `upper` bounds.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Number
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 * @example
	 *
	 * _.clamp(-10, -5, 5);
	 * // => -5
	 *
	 * _.clamp(10, -5, 5);
	 * // => 5
	 */

	function clamp(number, lower, upper) {
	  if (upper === undefined) {
	    upper = lower;
	    lower = undefined;
	  }

	  if (upper !== undefined) {
	    upper = toNumber(upper);
	    upper = upper === upper ? upper : 0;
	  }

	  if (lower !== undefined) {
	    lower = toNumber(lower);
	    lower = lower === lower ? lower : 0;
	  }

	  return baseClamp(toNumber(number), lower, upper);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */

	function stackClear() {
	  this.__data__ = new ListCache();
	  this.size = 0;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	  this.size = data.size;
	  return result;
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/** Used as the size to enable large array optimizations. */

	var LARGE_ARRAY_SIZE = 200;
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */

	function stackSet(key, value) {
	  var data = this.__data__;

	  if (data instanceof ListCache) {
	    var pairs = data.__data__;

	    if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }

	    data = this.__data__ = new MapCache(pairs);
	  }

	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */

	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	} // Add methods to `Stack`.


	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */

	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */

	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn$1(source), object);
	}

	/** Detect free variable `exports`. */

	var freeExports$2 = (typeof exports === "undefined" ? "undefined" : _typeof_1$1(exports)) == 'object' && exports && !exports.nodeType && exports;
	/** Detect free variable `module`. */

	var freeModule$2 = freeExports$2 && (typeof module === "undefined" ? "undefined" : _typeof_1$1(module)) == 'object' && module && !module.nodeType && module;
	/** Detect the popular CommonJS extension `module.exports`. */

	var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
	/** Built-in value references. */

	var Buffer$1 = moduleExports$2 ? root.Buffer : undefined,
	    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;
	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */

	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }

	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];

	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }

	  return result;
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/** Used for built-in method references. */

	var objectProto$f = Object.prototype;
	/** Built-in value references. */

	var propertyIsEnumerable$1 = objectProto$f.propertyIsEnumerable;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeGetSymbols = Object.getOwnPropertySymbols;
	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */

	var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	  if (object == null) {
	    return [];
	  }

	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function (symbol) {
	    return propertyIsEnumerable$1.call(object, symbol);
	  });
	};

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */

	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */

	var getSymbolsIn = !nativeGetSymbols$1 ? stubArray : function (object) {
	  var result = [];

	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }

	  return result;
	};

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */

	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */

	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */

	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */

	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
	}

	/* Built-in method references that are verified to be native. */

	var DataView = getNative(root, 'DataView');

	/* Built-in method references that are verified to be native. */

	var Promise = getNative(root, 'Promise');

	/* Built-in method references that are verified to be native. */

	var Set$1 = getNative(root, 'Set');

	/** `Object#toString` result references. */

	var mapTag$1 = '[object Map]',
	    objectTag$2 = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag$1 = '[object Set]',
	    weakMapTag$1 = '[object WeakMap]';
	var dataViewTag$1 = '[object DataView]';
	/** Used to detect maps, sets, and weakmaps. */

	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map$1),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set$1),
	    weakMapCtorString = toSource(WeakMap);
	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */

	var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$1 || Map$1 && getTag(new Map$1()) != mapTag$1 || Promise && getTag(Promise.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$1 || WeakMap && getTag(new WeakMap()) != weakMapTag$1) {
	  getTag = function getTag(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag$2 ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString:
	          return dataViewTag$1;

	        case mapCtorString:
	          return mapTag$1;

	        case promiseCtorString:
	          return promiseTag;

	        case setCtorString:
	          return setTag$1;

	        case weakMapCtorString:
	          return weakMapTag$1;
	      }
	    }

	    return result;
	  };
	}

	var getTag$1 = getTag;

	/** Used for built-in method references. */
	var objectProto$g = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$d = objectProto$g.hasOwnProperty;
	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */

	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

	  if (length && typeof array[0] == 'string' && hasOwnProperty$d.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }

	  return result;
	}

	/** Built-in value references. */

	var Uint8Array$1 = root.Uint8Array;

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */

	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */

	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;
	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */

	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/** Used to convert symbols to primitives and strings. */

	var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;
	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */

	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */

	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/** `Object#toString` result references. */

	var boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    mapTag$2 = '[object Map]',
	    numberTag$1 = '[object Number]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$2 = '[object Set]',
	    stringTag$1 = '[object String]',
	    symbolTag$1 = '[object Symbol]';
	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$2 = '[object DataView]',
	    float32Tag$1 = '[object Float32Array]',
	    float64Tag$1 = '[object Float64Array]',
	    int8Tag$1 = '[object Int8Array]',
	    int16Tag$1 = '[object Int16Array]',
	    int32Tag$1 = '[object Int32Array]',
	    uint8Tag$1 = '[object Uint8Array]',
	    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
	    uint16Tag$1 = '[object Uint16Array]',
	    uint32Tag$1 = '[object Uint32Array]';
	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */

	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;

	  switch (tag) {
	    case arrayBufferTag$1:
	      return cloneArrayBuffer(object);

	    case boolTag$1:
	    case dateTag$1:
	      return new Ctor(+object);

	    case dataViewTag$2:
	      return cloneDataView(object, isDeep);

	    case float32Tag$1:
	    case float64Tag$1:
	    case int8Tag$1:
	    case int16Tag$1:
	    case int32Tag$1:
	    case uint8Tag$1:
	    case uint8ClampedTag$1:
	    case uint16Tag$1:
	    case uint32Tag$1:
	      return cloneTypedArray(object, isDeep);

	    case mapTag$2:
	      return new Ctor();

	    case numberTag$1:
	    case stringTag$1:
	      return new Ctor(object);

	    case regexpTag$1:
	      return cloneRegExp(object);

	    case setTag$2:
	      return new Ctor();

	    case symbolTag$1:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */

	function initCloneObject(object) {
	  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	}

	/** `Object#toString` result references. */

	var mapTag$3 = '[object Map]';
	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */

	function baseIsMap(value) {
	  return isObjectLike(value) && getTag$1(value) == mapTag$3;
	}

	/* Node.js helper references. */

	var nodeIsMap = nodeUtil && nodeUtil.isMap;
	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */

	var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	/** `Object#toString` result references. */

	var setTag$3 = '[object Set]';
	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */

	function baseIsSet(value) {
	  return isObjectLike(value) && getTag$1(value) == setTag$3;
	}

	/* Node.js helper references. */

	var nodeIsSet = nodeUtil && nodeUtil.isSet;
	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */

	var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;
	/** `Object#toString` result references. */

	var argsTag$2 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    boolTag$2 = '[object Boolean]',
	    dateTag$2 = '[object Date]',
	    errorTag$2 = '[object Error]',
	    funcTag$2 = '[object Function]',
	    genTag$1 = '[object GeneratorFunction]',
	    mapTag$4 = '[object Map]',
	    numberTag$2 = '[object Number]',
	    objectTag$3 = '[object Object]',
	    regexpTag$2 = '[object RegExp]',
	    setTag$4 = '[object Set]',
	    stringTag$2 = '[object String]',
	    symbolTag$2 = '[object Symbol]',
	    weakMapTag$2 = '[object WeakMap]';
	var arrayBufferTag$2 = '[object ArrayBuffer]',
	    dataViewTag$3 = '[object DataView]',
	    float32Tag$2 = '[object Float32Array]',
	    float64Tag$2 = '[object Float64Array]',
	    int8Tag$2 = '[object Int8Array]',
	    int16Tag$2 = '[object Int16Array]',
	    int32Tag$2 = '[object Int32Array]',
	    uint8Tag$2 = '[object Uint8Array]',
	    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
	    uint16Tag$2 = '[object Uint16Array]',
	    uint32Tag$2 = '[object Uint32Array]';
	/** Used to identify `toStringTag` values supported by `_.clone`. */

	var cloneableTags = {};
	cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] = cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] = cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] = cloneableTags[numberTag$2] = cloneableTags[objectTag$3] = cloneableTags[regexpTag$2] = cloneableTags[setTag$4] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] = cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
	cloneableTags[errorTag$2] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */

	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }

	  if (result !== undefined) {
	    return result;
	  }

	  if (!isObject(value)) {
	    return value;
	  }

	  var isArr = isArray(value);

	  if (isArr) {
	    result = initCloneArray(value);

	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag$1(value),
	        isFunc = tag == funcTag$2 || tag == genTag$1;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }

	    if (tag == objectTag$3 || tag == argsTag$2 || isFunc && !object) {
	      result = isFlat || isFunc ? {} : initCloneObject(value);

	      if (!isDeep) {
	        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }

	      result = initCloneByTag(value, tag, isDeep);
	    }
	  } // Check for circular references and return its corresponding clone.


	  stack || (stack = new Stack());
	  var stacked = stack.get(value);

	  if (stacked) {
	    return stacked;
	  }

	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function (subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });
	    return result;
	  }

	  if (isMap(value)) {
	    value.forEach(function (subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });
	    return result;
	  }

	  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    } // Recursively populate clone (susceptible to call stack limits).


	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_SYMBOLS_FLAG$1 = 4;
	/**
	 * Creates a shallow clone of `value`.
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	 * and supports cloning arrays, array buffers, booleans, date objects, maps,
	 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	 * arrays. The own enumerable properties of `arguments` objects are cloned
	 * as plain objects. An empty object is returned for uncloneable values such
	 * as error objects, functions, DOM nodes, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeep
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = _.clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 */

	function clone(value) {
	  return baseClone(value, CLONE_SYMBOLS_FLAG$1);
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$1 = 1,
	    CLONE_SYMBOLS_FLAG$2 = 4;
	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */

	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$2);
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$2 = 1,
	    CLONE_SYMBOLS_FLAG$3 = 4;
	/**
	 * This method is like `_.cloneWith` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.cloneWith
	 * @example
	 *
	 * function customizer(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * }
	 *
	 * var el = _.cloneDeepWith(document.body, customizer);
	 *
	 * console.log(el === document.body);
	 * // => false
	 * console.log(el.nodeName);
	 * // => 'BODY'
	 * console.log(el.childNodes.length);
	 * // => 20
	 */

	function cloneDeepWith(value, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return baseClone(value, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$3, customizer);
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_SYMBOLS_FLAG$4 = 4;
	/**
	 * This method is like `_.clone` except that it accepts `customizer` which
	 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	 * cloning is handled by the method instead. The `customizer` is invoked with
	 * up to four arguments; (value [, index|key, object, stack]).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeepWith
	 * @example
	 *
	 * function customizer(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(false);
	 *   }
	 * }
	 *
	 * var el = _.cloneWith(document.body, customizer);
	 *
	 * console.log(el === document.body);
	 * // => false
	 * console.log(el.nodeName);
	 * // => 'BODY'
	 * console.log(el.childNodes.length);
	 * // => 0
	 */

	function cloneWith(value, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return baseClone(value, CLONE_SYMBOLS_FLAG$4, customizer);
	}

	/**
	 * Executes the chain sequence and returns the wrapped result.
	 *
	 * @name commit
	 * @memberOf _
	 * @since 3.2.0
	 * @category Seq
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var array = [1, 2];
	 * var wrapped = _(array).push(3);
	 *
	 * console.log(array);
	 * // => [1, 2]
	 *
	 * wrapped = wrapped.commit();
	 * console.log(array);
	 * // => [1, 2, 3]
	 *
	 * wrapped.last();
	 * // => 3
	 *
	 * console.log(array);
	 * // => [1, 2, 3]
	 */

	function wrapperCommit() {
	  return new LodashWrapper(this.value(), this.__chain__);
	}

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];

	    if (value) {
	      result[resIndex++] = value;
	    }
	  }

	  return result;
	}

	/**
	 * Creates a new array concatenating `array` with any additional arrays
	 * and/or values.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to concatenate.
	 * @param {...*} [values] The values to concatenate.
	 * @returns {Array} Returns the new concatenated array.
	 * @example
	 *
	 * var array = [1];
	 * var other = _.concat(array, 2, [3], [[4]]);
	 *
	 * console.log(other);
	 * // => [1, 2, 3, [4]]
	 *
	 * console.log(array);
	 * // => [1]
	 */

	function concat() {
	  var length = arguments.length;

	  if (!length) {
	    return [];
	  }

	  var args = Array(length - 1),
	      array = arguments[0],
	      index = length;

	  while (index--) {
	    args[index - 1] = arguments[index];
	  }

	  return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	}

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */

	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED$2);

	  return this;
	}

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */

	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;
	  this.__data__ = new MapCache();

	  while (++index < length) {
	    this.add(values[index]);
	  }
	} // Add methods to `SetCache`.


	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */

	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  } // Assume cyclic values are equal.


	  var stacked = stack.get(array);

	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }

	  var index = -1,
	      result = true,
	      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
	  stack.set(array, other);
	  stack.set(other, array); // Ignore non-index properties.

	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }

	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }

	      result = false;
	      break;
	    } // Recursively compare arrays (susceptible to call stack limits).


	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }

	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);
	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);
	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG$1 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;
	/** `Object#toString` result references. */

	var boolTag$3 = '[object Boolean]',
	    dateTag$3 = '[object Date]',
	    errorTag$3 = '[object Error]',
	    mapTag$5 = '[object Map]',
	    numberTag$3 = '[object Number]',
	    regexpTag$3 = '[object RegExp]',
	    setTag$5 = '[object Set]',
	    stringTag$3 = '[object String]',
	    symbolTag$3 = '[object Symbol]';
	var arrayBufferTag$3 = '[object ArrayBuffer]',
	    dataViewTag$4 = '[object DataView]';
	/** Used to convert symbols to primitives and strings. */

	var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */

	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag$4:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }

	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag$3:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
	        return false;
	      }

	      return true;

	    case boolTag$3:
	    case dateTag$3:
	    case numberTag$3:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag$3:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag$3:
	    case stringTag$3:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == other + '';

	    case mapTag$5:
	      var convert = mapToArray;

	    case setTag$5:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      } // Assume cyclic values are equal.


	      var stacked = stack.get(object);

	      if (stacked) {
	        return stacked == other;
	      }

	      bitmask |= COMPARE_UNORDERED_FLAG$1; // Recursively compare objects (susceptible to call stack limits).

	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag$3:
	      if (symbolValueOf$1) {
	        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
	      }

	  }

	  return false;
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG$2 = 1;
	/** Used for built-in method references. */

	var objectProto$h = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$e = objectProto$h.hasOwnProperty;
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */

	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }

	  var index = objLength;

	  while (index--) {
	    var key = objProps[index];

	    if (!(isPartial ? key in other : hasOwnProperty$e.call(other, key))) {
	      return false;
	    }
	  } // Assume cyclic values are equal.


	  var stacked = stack.get(object);

	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }

	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	  var skipCtor = isPartial;

	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    } // Recursively compare objects (susceptible to call stack limits).


	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }

	    skipCtor || (skipCtor = key == 'constructor');
	  }

	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }

	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG$3 = 1;
	/** `Object#toString` result references. */

	var argsTag$3 = '[object Arguments]',
	    arrayTag$2 = '[object Array]',
	    objectTag$4 = '[object Object]';
	/** Used for built-in method references. */

	var objectProto$i = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$f = objectProto$i.hasOwnProperty;
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */

	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag$2 : getTag$1(object),
	      othTag = othIsArr ? arrayTag$2 : getTag$1(other);
	  objTag = objTag == argsTag$3 ? objectTag$4 : objTag;
	  othTag = othTag == argsTag$3 ? objectTag$4 : othTag;
	  var objIsObj = objTag == objectTag$4,
	      othIsObj = othTag == objectTag$4,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }

	    objIsArr = true;
	    objIsObj = false;
	  }

	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack());
	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }

	  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$f.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$f.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;
	      stack || (stack = new Stack());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }

	  if (!isSameTag) {
	    return false;
	  }

	  stack || (stack = new Stack());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */

	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }

	  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	    return value !== value && other !== other;
	  }

	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG$4 = 1,
	    COMPARE_UNORDERED_FLAG$2 = 2;
	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */

	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }

	  object = Object(object);

	  while (index--) {
	    var data = matchData[index];

	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	      return false;
	    }
	  }

	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack();

	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }

	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack) : result)) {
	        return false;
	      }
	    }
	  }

	  return true;
	}

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */

	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */

	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];
	    result[length] = [key, value, isStrictComparable(value)];
	  }

	  return result;
	}

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function (object) {
	    if (object == null) {
	      return false;
	    }

	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	  };
	}

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */

	function baseMatches(source) {
	  var matchData = getMatchData(source);

	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }

	  return function (object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */

	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);
	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);

	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }

	    object = object[key];
	  }

	  if (result || ++index != length) {
	    return result;
	  }

	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
	}

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */

	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	/** Used to compose bitmasks for value comparisons. */

	var COMPARE_PARTIAL_FLAG$5 = 1,
	    COMPARE_UNORDERED_FLAG$3 = 2;
	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */

	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }

	  return function (object) {
	    var objValue = get(object, path);
	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
	  };
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */

	function basePropertyDeep(path) {
	  return function (object) {
	    return baseGet(object, path);
	  };
	}

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */

	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */

	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }

	  if (value == null) {
	    return identity;
	  }

	  if (_typeof_1$1(value) == 'object') {
	    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	  }

	  return property(value);
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT$4 = 'Expected a function';
	/**
	 * Creates a function that iterates over `pairs` and invokes the corresponding
	 * function of the first predicate to return truthy. The predicate-function
	 * pairs are invoked with the `this` binding and arguments of the created
	 * function.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {Array} pairs The predicate-function pairs.
	 * @returns {Function} Returns the new composite function.
	 * @example
	 *
	 * var func = _.cond([
	 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	 *   [_.stubTrue,                      _.constant('no match')]
	 * ]);
	 *
	 * func({ 'a': 1, 'b': 2 });
	 * // => 'matches A'
	 *
	 * func({ 'a': 0, 'b': 1 });
	 * // => 'matches B'
	 *
	 * func({ 'a': '1', 'b': '2' });
	 * // => 'no match'
	 */

	function cond(pairs) {
	  var length = pairs == null ? 0 : pairs.length,
	      toIteratee = baseIteratee;
	  pairs = !length ? [] : arrayMap(pairs, function (pair) {
	    if (typeof pair[1] != 'function') {
	      throw new TypeError(FUNC_ERROR_TEXT$4);
	    }

	    return [toIteratee(pair[0]), pair[1]];
	  });
	  return baseRest(function (args) {
	    var index = -1;

	    while (++index < length) {
	      var pair = pairs[index];

	      if (apply(pair[0], this, args)) {
	        return apply(pair[1], this, args);
	      }
	    }
	  });
	}

	/**
	 * The base implementation of `_.conformsTo` which accepts `props` to check.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property predicates to conform to.
	 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	 */
	function baseConformsTo(object, source, props) {
	  var length = props.length;

	  if (object == null) {
	    return !length;
	  }

	  object = Object(object);

	  while (length--) {
	    var key = props[length],
	        predicate = source[key],
	        value = object[key];

	    if (value === undefined && !(key in object) || !predicate(value)) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * The base implementation of `_.conforms` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property predicates to conform to.
	 * @returns {Function} Returns the new spec function.
	 */

	function baseConforms(source) {
	  var props = keys(source);
	  return function (object) {
	    return baseConformsTo(object, source, props);
	  };
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$3 = 1;
	/**
	 * Creates a function that invokes the predicate properties of `source` with
	 * the corresponding property values of a given object, returning `true` if
	 * all predicates return truthy, else `false`.
	 *
	 * **Note:** The created function is equivalent to `_.conformsTo` with
	 * `source` partially applied.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {Object} source The object of property predicates to conform to.
	 * @returns {Function} Returns the new spec function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': 2, 'b': 1 },
	 *   { 'a': 1, 'b': 2 }
	 * ];
	 *
	 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	 * // => [{ 'a': 1, 'b': 2 }]
	 */

	function conforms(source) {
	  return baseConforms(baseClone(source, CLONE_DEEP_FLAG$3));
	}

	/**
	 * Checks if `object` conforms to `source` by invoking the predicate
	 * properties of `source` with the corresponding property values of `object`.
	 *
	 * **Note:** This method is equivalent to `_.conforms` when `source` is
	 * partially applied.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.14.0
	 * @category Lang
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property predicates to conform to.
	 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 *
	 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	 * // => true
	 *
	 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	 * // => false
	 */

	function conformsTo(object, source) {
	  return source == null || baseConformsTo(object, source, keys(source));
	}

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }

	  return accumulator;
	}

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function (object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];

	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }

	    return object;
	  };
	}

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */

	var baseFor = createBaseFor();

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */

	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */

	function createBaseEach(eachFunc, fromRight) {
	  return function (collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }

	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }

	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while (fromRight ? index-- : ++index < length) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }

	    return collection;
	  };
	}

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */

	var baseEach = createBaseEach(baseForOwn);

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */

	function baseAggregator(collection, setter, iteratee, accumulator) {
	  baseEach(collection, function (value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */

	function createAggregator(setter, initializer) {
	  return function (collection, iteratee) {
	    var func = isArray(collection) ? arrayAggregator : baseAggregator,
	        accumulator = initializer ? initializer() : {};
	    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
	  };
	}

	/** Used for built-in method references. */

	var objectProto$j = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$g = objectProto$j.hasOwnProperty;
	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The corresponding value of
	 * each key is the number of times the key was returned by `iteratee`. The
	 * iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.countBy([6.1, 4.2, 6.3], Math.floor);
	 * // => { '4': 1, '6': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.countBy(['one', 'two', 'three'], 'length');
	 * // => { '3': 2, '5': 1 }
	 */

	var countBy = createAggregator(function (result, value, key) {
	  if (hasOwnProperty$g.call(result, key)) {
	    ++result[key];
	  } else {
	    baseAssignValue(result, key, 1);
	  }
	});

	/**
	 * Creates an object that inherits from the `prototype` object. If a
	 * `properties` object is given, its own enumerable string keyed properties
	 * are assigned to the created object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Object
	 * @param {Object} prototype The object to inherit from.
	 * @param {Object} [properties] The properties to assign to the object.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * function Shape() {
	 *   this.x = 0;
	 *   this.y = 0;
	 * }
	 *
	 * function Circle() {
	 *   Shape.call(this);
	 * }
	 *
	 * Circle.prototype = _.create(Shape.prototype, {
	 *   'constructor': Circle
	 * });
	 *
	 * var circle = new Circle;
	 * circle instanceof Circle;
	 * // => true
	 *
	 * circle instanceof Shape;
	 * // => true
	 */

	function create(prototype, properties) {
	  var result = baseCreate(prototype);
	  return properties == null ? result : baseAssign(result, properties);
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_CURRY_FLAG$5 = 8;
	/**
	 * Creates a function that accepts arguments of `func` and either invokes
	 * `func` returning its result, if at least `arity` number of arguments have
	 * been provided, or returns a function that accepts the remaining `func`
	 * arguments, and so on. The arity of `func` may be specified if `func.length`
	 * is not sufficient.
	 *
	 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curry(abc);
	 *
	 * curried(1)(2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // Curried with placeholders.
	 * curried(1)(_, 3)(2);
	 * // => [1, 2, 3]
	 */

	function curry(func, arity, guard) {
	  arity = guard ? undefined : arity;
	  var result = createWrap(func, WRAP_CURRY_FLAG$5, undefined, undefined, undefined, undefined, undefined, arity);
	  result.placeholder = curry.placeholder;
	  return result;
	} // Assign default placeholders.


	curry.placeholder = {};

	/** Used to compose bitmasks for function metadata. */

	var WRAP_CURRY_RIGHT_FLAG$3 = 16;
	/**
	 * This method is like `_.curry` except that arguments are applied to `func`
	 * in the manner of `_.partialRight` instead of `_.partial`.
	 *
	 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curryRight(abc);
	 *
	 * curried(3)(2)(1);
	 * // => [1, 2, 3]
	 *
	 * curried(2, 3)(1);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // Curried with placeholders.
	 * curried(3)(1, _)(2);
	 * // => [1, 2, 3]
	 */

	function curryRight(func, arity, guard) {
	  arity = guard ? undefined : arity;
	  var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG$3, undefined, undefined, undefined, undefined, undefined, arity);
	  result.placeholder = curryRight.placeholder;
	  return result;
	} // Assign default placeholders.


	curryRight.placeholder = {};

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */

	var now = function now() {
	  return root.Date.now();
	};

	/** Error message constants. */

	var FUNC_ERROR_TEXT$5 = 'Expected a function';
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$5 = Math.max,
	    nativeMin$3 = Math.min;
	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */

	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$5);
	  }

	  wait = toNumber(wait) || 0;

	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax$5(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;
	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time; // Start the timer for the trailing edge.

	    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;
	    return maxing ? nativeMin$3(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.

	    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
	  }

	  function timerExpired() {
	    var time = now();

	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    } // Restart the timer.


	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.

	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }

	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }

	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);
	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }

	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }

	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }

	    return result;
	  }

	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Checks `value` to determine whether a default value should be returned in
	 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	 * or `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.14.0
	 * @category Util
	 * @param {*} value The value to check.
	 * @param {*} defaultValue The default value.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * _.defaultTo(1, 10);
	 * // => 1
	 *
	 * _.defaultTo(undefined, 10);
	 * // => 10
	 */
	function defaultTo(value, defaultValue) {
	  return value == null || value !== value ? defaultValue : value;
	}

	/** Used for built-in method references. */

	var objectProto$k = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$h = objectProto$k.hasOwnProperty;
	/**
	 * Assigns own and inherited enumerable string keyed properties of source
	 * objects to the destination object for all destination properties that
	 * resolve to `undefined`. Source objects are applied from left to right.
	 * Once a property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaultsDeep
	 * @example
	 *
	 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */

	var defaults = baseRest(function (object, sources) {
	  object = Object(object);
	  var index = -1;
	  var length = sources.length;
	  var guard = length > 2 ? sources[2] : undefined;

	  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	    length = 1;
	  }

	  while (++index < length) {
	    var source = sources[index];
	    var props = keysIn$1(source);
	    var propsIndex = -1;
	    var propsLength = props.length;

	    while (++propsIndex < propsLength) {
	      var key = props[propsIndex];
	      var value = object[key];

	      if (value === undefined || eq(value, objectProto$k[key]) && !hasOwnProperty$h.call(object, key)) {
	        object[key] = source[key];
	      }
	    }
	  }

	  return object;
	});

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */

	function assignMergeValue(object, key, value) {
	  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
	    baseAssignValue(object, key, value);
	  }
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */

	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Gets the value at `key`, unless `key` is "__proto__".
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function safeGet(object, key) {
	  if (key == '__proto__') {
	    return;
	  }

	  return object[key];
	}

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */

	function toPlainObject(value) {
	  return copyObject(value, keysIn$1(value));
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */

	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = safeGet(object, key),
	      srcValue = safeGet(source, key),
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }

	  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    var isArr = isArray(srcValue),
	        isBuff = !isArr && isBuffer(srcValue),
	        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	    newValue = srcValue;

	    if (isArr || isBuff || isTyped) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      } else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      } else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer(srcValue, true);
	      } else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray(srcValue, true);
	      } else {
	        newValue = [];
	      }
	    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      newValue = objValue;

	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      } else if (!isObject(objValue) || isFunction(objValue)) {
	        newValue = initCloneObject(srcValue);
	      }
	    } else {
	      isCommon = false;
	    }
	  }

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }

	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */

	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }

	  baseFor(source, function (srcValue, key) {
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack());
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    } else {
	      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }

	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn$1);
	}

	/**
	 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	 * objects into destination objects that are passed thru.
	 *
	 * @private
	 * @param {*} objValue The destination value.
	 * @param {*} srcValue The source value.
	 * @param {string} key The key of the property to merge.
	 * @param {Object} object The parent object of `objValue`.
	 * @param {Object} source The parent object of `srcValue`.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 * @returns {*} Returns the value to assign.
	 */

	function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	  if (isObject(objValue) && isObject(srcValue)) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, objValue);
	    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
	    stack['delete'](srcValue);
	  }

	  return objValue;
	}

	/**
	 * This method is like `_.merge` except that it accepts `customizer` which
	 * is invoked to produce the merged values of the destination and source
	 * properties. If `customizer` returns `undefined`, merging is handled by the
	 * method instead. The `customizer` is invoked with six arguments:
	 * (objValue, srcValue, key, object, source, stack).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   if (_.isArray(objValue)) {
	 *     return objValue.concat(srcValue);
	 *   }
	 * }
	 *
	 * var object = { 'a': [1], 'b': [2] };
	 * var other = { 'a': [3], 'b': [4] };
	 *
	 * _.mergeWith(object, other, customizer);
	 * // => { 'a': [1, 3], 'b': [2, 4] }
	 */

	var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
	  baseMerge(object, source, srcIndex, customizer);
	});

	/**
	 * This method is like `_.defaults` except that it recursively assigns
	 * default properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaults
	 * @example
	 *
	 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	 * // => { 'a': { 'b': 2, 'c': 3 } }
	 */

	var defaultsDeep = baseRest(function (args) {
	  args.push(undefined, customDefaultsMerge);
	  return apply(mergeWith, undefined, args);
	});

	/** Error message constants. */
	var FUNC_ERROR_TEXT$6 = 'Expected a function';
	/**
	 * The base implementation of `_.delay` and `_.defer` which accepts `args`
	 * to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to delay.
	 * @param {number} wait The number of milliseconds to delay invocation.
	 * @param {Array} args The arguments to provide to `func`.
	 * @returns {number|Object} Returns the timer id or timeout object.
	 */

	function baseDelay(func, wait, args) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$6);
	  }

	  return setTimeout(function () {
	    func.apply(undefined, args);
	  }, wait);
	}

	/**
	 * Defers invoking the `func` until the current call stack has cleared. Any
	 * additional arguments are provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to defer.
	 * @param {...*} [args] The arguments to invoke `func` with.
	 * @returns {number} Returns the timer id.
	 * @example
	 *
	 * _.defer(function(text) {
	 *   console.log(text);
	 * }, 'deferred');
	 * // => Logs 'deferred' after one millisecond.
	 */

	var defer = baseRest(function (func, args) {
	  return baseDelay(func, 1, args);
	});

	/**
	 * Invokes `func` after `wait` milliseconds. Any additional arguments are
	 * provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to delay.
	 * @param {number} wait The number of milliseconds to delay invocation.
	 * @param {...*} [args] The arguments to invoke `func` with.
	 * @returns {number} Returns the timer id.
	 * @example
	 *
	 * _.delay(function(text) {
	 *   console.log(text);
	 * }, 1000, 'later');
	 * // => Logs 'later' after one second.
	 */

	var delay = baseRest(function (func, wait, args) {
	  return baseDelay(func, toNumber(wait) || 0, args);
	});

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }

	  return false;
	}

	/** Used as the size to enable large array optimizations. */

	var LARGE_ARRAY_SIZE$1 = 200;
	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */

	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;

	  if (!length) {
	    return result;
	  }

	  if (iteratee) {
	    values = arrayMap(values, baseUnary(iteratee));
	  }

	  if (comparator) {
	    includes = arrayIncludesWith;
	    isCommon = false;
	  } else if (values.length >= LARGE_ARRAY_SIZE$1) {
	    includes = cacheHas;
	    isCommon = false;
	    values = new SetCache(values);
	  }

	  outer: while (++index < length) {
	    var value = array[index],
	        computed = iteratee == null ? value : iteratee(value);
	    value = comparator || value !== 0 ? value : 0;

	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;

	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }

	      result.push(value);
	    } else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }

	  return result;
	}

	/**
	 * Creates an array of `array` values not included in the other given arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. The order and references of result values are
	 * determined by the first array.
	 *
	 * **Note:** Unlike `_.pullAll`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.without, _.xor
	 * @example
	 *
	 * _.difference([2, 1], [2, 3]);
	 * // => [1]
	 */

	var difference = baseRest(function (array, values) {
	  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
	});

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}

	/**
	 * This method is like `_.difference` except that it accepts `iteratee` which
	 * is invoked for each element of `array` and `values` to generate the criterion
	 * by which they're compared. The order and references of result values are
	 * determined by the first array. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	 * // => [1.2]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	 * // => [{ 'x': 2 }]
	 */

	var differenceBy = baseRest(function (array, values) {
	  var iteratee = last(values);

	  if (isArrayLikeObject(iteratee)) {
	    iteratee = undefined;
	  }

	  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2)) : [];
	});

	/**
	 * This method is like `_.difference` except that it accepts `comparator`
	 * which is invoked to compare elements of `array` to `values`. The order and
	 * references of result values are determined by the first array. The comparator
	 * is invoked with two arguments: (arrVal, othVal).
	 *
	 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	 *
	 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	 * // => [{ 'x': 2, 'y': 1 }]
	 */

	var differenceWith = baseRest(function (array, values) {
	  var comparator = last(values);

	  if (isArrayLikeObject(comparator)) {
	    comparator = undefined;
	  }

	  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
	});

	/**
	 * Divide two numbers.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.7.0
	 * @category Math
	 * @param {number} dividend The first number in a division.
	 * @param {number} divisor The second number in a division.
	 * @returns {number} Returns the quotient.
	 * @example
	 *
	 * _.divide(6, 4);
	 * // => 1.5
	 */

	var divide = createMathOperation(function (dividend, divisor) {
	  return dividend / divisor;
	}, 1);

	/**
	 * Creates a slice of `array` with `n` elements dropped from the beginning.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to drop.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.drop([1, 2, 3]);
	 * // => [2, 3]
	 *
	 * _.drop([1, 2, 3], 2);
	 * // => [3]
	 *
	 * _.drop([1, 2, 3], 5);
	 * // => []
	 *
	 * _.drop([1, 2, 3], 0);
	 * // => [1, 2, 3]
	 */

	function drop(array, n, guard) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  n = guard || n === undefined ? 1 : toInteger(n);
	  return baseSlice(array, n < 0 ? 0 : n, length);
	}

	/**
	 * Creates a slice of `array` with `n` elements dropped from the end.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to drop.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.dropRight([1, 2, 3]);
	 * // => [1, 2]
	 *
	 * _.dropRight([1, 2, 3], 2);
	 * // => [1]
	 *
	 * _.dropRight([1, 2, 3], 5);
	 * // => []
	 *
	 * _.dropRight([1, 2, 3], 0);
	 * // => [1, 2, 3]
	 */

	function dropRight(array, n, guard) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  n = guard || n === undefined ? 1 : toInteger(n);
	  n = length - n;
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}

	/**
	 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	 * without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the slice of `array`.
	 */

	function baseWhile(array, predicate, isDrop, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

	  return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
	}

	/**
	 * Creates a slice of `array` excluding elements dropped from the end.
	 * Elements are dropped until `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index, array).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * _.dropRightWhile(users, function(o) { return !o.active; });
	 * // => objects for ['barney']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	 * // => objects for ['barney', 'fred']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.dropRightWhile(users, ['active', false]);
	 * // => objects for ['barney']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.dropRightWhile(users, 'active');
	 * // => objects for ['barney', 'fred', 'pebbles']
	 */

	function dropRightWhile(array, predicate) {
	  return array && array.length ? baseWhile(array, baseIteratee(predicate, 3), true, true) : [];
	}

	/**
	 * Creates a slice of `array` excluding elements dropped from the beginning.
	 * Elements are dropped until `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index, array).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.dropWhile(users, function(o) { return !o.active; });
	 * // => objects for ['pebbles']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.dropWhile(users, { 'user': 'barney', 'active': false });
	 * // => objects for ['fred', 'pebbles']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.dropWhile(users, ['active', false]);
	 * // => objects for ['pebbles']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.dropWhile(users, 'active');
	 * // => objects for ['barney', 'fred', 'pebbles']
	 */

	function dropWhile(array, predicate) {
	  return array && array.length ? baseWhile(array, baseIteratee(predicate, 3), true) : [];
	}

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */

	function castFunction(value) {
	  return typeof value == 'function' ? value : identity;
	}

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */

	function forEach(collection, iteratee) {
	  var func = isArray(collection) ? arrayEach : baseEach;
	  return func(collection, castFunction(iteratee));
	}

	/**
	 * A specialized version of `_.forEachRight` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEachRight(array, iteratee) {
	  var length = array == null ? 0 : array.length;

	  while (length--) {
	    if (iteratee(array[length], length, array) === false) {
	      break;
	    }
	  }

	  return array;
	}

	/**
	 * This function is like `baseFor` except that it iterates over properties
	 * in the opposite order.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */

	var baseForRight = createBaseFor(true);

	/**
	 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */

	function baseForOwnRight(object, iteratee) {
	  return object && baseForRight(object, iteratee, keys);
	}

	/**
	 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */

	var baseEachRight = createBaseEach(baseForOwnRight, true);

	/**
	 * This method is like `_.forEach` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @alias eachRight
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEach
	 * @example
	 *
	 * _.forEachRight([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `2` then `1`.
	 */

	function forEachRight(collection, iteratee) {
	  var func = isArray(collection) ? arrayEachRight : baseEachRight;
	  return func(collection, castFunction(iteratee));
	}

	/**
	 * Checks if `string` ends with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=string.length] The position to search up to.
	 * @returns {boolean} Returns `true` if `string` ends with `target`,
	 *  else `false`.
	 * @example
	 *
	 * _.endsWith('abc', 'c');
	 * // => true
	 *
	 * _.endsWith('abc', 'b');
	 * // => false
	 *
	 * _.endsWith('abc', 'b', 2);
	 * // => true
	 */

	function endsWith(string, target, position) {
	  string = toString(string);
	  target = baseToString(target);
	  var length = string.length;
	  position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
	  var end = position;
	  position -= target.length;
	  return position >= 0 && string.slice(position, end) == target;
	}

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the key-value pairs.
	 */

	function baseToPairs(object, props) {
	  return arrayMap(props, function (key) {
	    return [key, object[key]];
	  });
	}

	/**
	 * Converts `set` to its value-value pairs.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the value-value pairs.
	 */
	function setToPairs(set) {
	  var index = -1,
	      result = Array(set.size);
	  set.forEach(function (value) {
	    result[++index] = [value, value];
	  });
	  return result;
	}

	/** `Object#toString` result references. */

	var mapTag$6 = '[object Map]',
	    setTag$6 = '[object Set]';
	/**
	 * Creates a `_.toPairs` or `_.toPairsIn` function.
	 *
	 * @private
	 * @param {Function} keysFunc The function to get the keys of a given object.
	 * @returns {Function} Returns the new pairs function.
	 */

	function createToPairs(keysFunc) {
	  return function (object) {
	    var tag = getTag$1(object);

	    if (tag == mapTag$6) {
	      return mapToArray(object);
	    }

	    if (tag == setTag$6) {
	      return setToPairs(object);
	    }

	    return baseToPairs(object, keysFunc(object));
	  };
	}

	/**
	 * Creates an array of own enumerable string keyed-value pairs for `object`
	 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	 * entries are returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entries
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */

	var toPairs = createToPairs(keys);

	/**
	 * Creates an array of own and inherited enumerable string keyed-value pairs
	 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	 * or set, its entries are returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entriesIn
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairsIn(new Foo);
	 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	 */

	var toPairsIn = createToPairs(keysIn$1);

	/** Used to map characters to HTML entities. */

	var htmlEscapes = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#39;'
	};
	/**
	 * Used by `_.escape` to convert characters to HTML entities.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */

	var escapeHtmlChar = basePropertyOf(htmlEscapes);

	/** Used to match HTML entities and HTML characters. */

	var reUnescapedHtml = /[&<>"']/g,
	    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	/**
	 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	 * corresponding HTML entities.
	 *
	 * **Note:** No other characters are escaped. To escape additional
	 * characters use a third-party library like [_he_](https://mths.be/he).
	 *
	 * Though the ">" character is escaped for symmetry, characters like
	 * ">" and "/" don't need escaping in HTML and have no special meaning
	 * unless they're part of a tag or unquoted attribute value. See
	 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	 * (under "semi-related fun fact") for more details.
	 *
	 * When working with HTML you should always
	 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	 * XSS vectors.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escape('fred, barney, & pebbles');
	 * // => 'fred, barney, &amp; pebbles'
	 */

	function escape(string) {
	  string = toString(string);
	  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
	}

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */

	var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g,
	    reHasRegExpChar = RegExp(reRegExpChar$1.source);
	/**
	 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https://lodash\.com/\)'
	 */

	function escapeRegExp(string) {
	  string = toString(string);
	  return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar$1, '\\$&') : string;
	}

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * The base implementation of `_.every` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */

	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function (value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}

	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * Iteration is stopped once `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * **Note:** This method returns `true` for
	 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	 * elements of empty collections.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.every(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.every(users, 'active');
	 * // => false
	 */

	function every(collection, predicate, guard) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;

	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }

	  return func(collection, baseIteratee(predicate, 3));
	}

	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$1 = 4294967295;
	/**
	 * Converts `value` to an integer suitable for use as the length of an
	 * array-like object.
	 *
	 * **Note:** This method is based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toLength(3.2);
	 * // => 3
	 *
	 * _.toLength(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toLength(Infinity);
	 * // => 4294967295
	 *
	 * _.toLength('3.2');
	 * // => 3
	 */

	function toLength(value) {
	  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH$1) : 0;
	}

	/**
	 * The base implementation of `_.fill` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 */

	function baseFill(array, value, start, end) {
	  var length = array.length;
	  start = toInteger(start);

	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }

	  end = end === undefined || end > length ? length : toInteger(end);

	  if (end < 0) {
	    end += length;
	  }

	  end = start > end ? 0 : toLength(end);

	  while (start < end) {
	    array[start++] = value;
	  }

	  return array;
	}

	/**
	 * Fills elements of `array` with `value` from `start` up to, but not
	 * including, `end`.
	 *
	 * **Note:** This method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.2.0
	 * @category Array
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3];
	 *
	 * _.fill(array, 'a');
	 * console.log(array);
	 * // => ['a', 'a', 'a']
	 *
	 * _.fill(Array(3), 2);
	 * // => [2, 2, 2]
	 *
	 * _.fill([4, 6, 8, 10], '*', 1, 3);
	 * // => [4, '*', '*', 10]
	 */

	function fill(array, value, start, end) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	    start = 0;
	    end = length;
	  }

	  return baseFill(array, value, start, end);
	}

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */

	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function (value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */

	function filter(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee(predicate, 3));
	}

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */

	function createFind(findIndexFunc) {
	  return function (collection, predicate, fromIndex) {
	    var iterable = Object(collection);

	    if (!isArrayLike(collection)) {
	      var iteratee = baseIteratee(predicate, 3);
	      collection = keys(collection);

	      predicate = function predicate(key) {
	        return iteratee(iterable[key], key, iterable);
	      };
	    }

	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$6 = Math.max;
	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */

	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return -1;
	  }

	  var index = fromIndex == null ? 0 : toInteger(fromIndex);

	  if (index < 0) {
	    index = nativeMax$6(length + index, 0);
	  }

	  return baseFindIndex(array, baseIteratee(predicate, 3), index);
	}

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */

	var find = createFind(findIndex);

	/**
	 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	 * without support for iteratee shorthands, which iterates over `collection`
	 * using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFindKey(collection, predicate, eachFunc) {
	  var result;
	  eachFunc(collection, function (value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = key;
	      return false;
	    }
	  });
	  return result;
	}

	/**
	 * This method is like `_.find` except that it returns the key of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {string|undefined} Returns the key of the matched element,
	 *  else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findKey(users, function(o) { return o.age < 40; });
	 * // => 'barney' (iteration order is not guaranteed)
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findKey(users, { 'age': 1, 'active': true });
	 * // => 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findKey(users, ['active', false]);
	 * // => 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findKey(users, 'active');
	 * // => 'barney'
	 */

	function findKey(object, predicate) {
	  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$7 = Math.max,
	    nativeMin$4 = Math.min;
	/**
	 * This method is like `_.findIndex` except that it iterates over elements
	 * of `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=array.length-1] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	 * // => 2
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	 * // => 0
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findLastIndex(users, ['active', false]);
	 * // => 2
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findLastIndex(users, 'active');
	 * // => 0
	 */

	function findLastIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return -1;
	  }

	  var index = length - 1;

	  if (fromIndex !== undefined) {
	    index = toInteger(fromIndex);
	    index = fromIndex < 0 ? nativeMax$7(length + index, 0) : nativeMin$4(index, length - 1);
	  }

	  return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
	}

	/**
	 * This method is like `_.find` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=collection.length-1] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * _.findLast([1, 2, 3, 4], function(n) {
	 *   return n % 2 == 1;
	 * });
	 * // => 3
	 */

	var findLast = createFind(findLastIndex);

	/**
	 * This method is like `_.findKey` except that it iterates over elements of
	 * a collection in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {string|undefined} Returns the key of the matched element,
	 *  else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findLastKey(users, function(o) { return o.age < 40; });
	 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findLastKey(users, { 'age': 36, 'active': true });
	 * // => 'barney'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findLastKey(users, ['active', false]);
	 * // => 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findLastKey(users, 'active');
	 * // => 'pebbles'
	 */

	function findLastKey(object, predicate) {
	  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
	}

	/**
	 * Gets the first element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias first
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the first element of `array`.
	 * @example
	 *
	 * _.head([1, 2, 3]);
	 * // => 1
	 *
	 * _.head([]);
	 * // => undefined
	 */
	function head(array) {
	  return array && array.length ? array[0] : undefined;
	}

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */

	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];
	  baseEach(collection, function (value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */

	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	/**
	 * Creates a flattened array of values by running each element in `collection`
	 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [n, n];
	 * }
	 *
	 * _.flatMap([1, 2], duplicate);
	 * // => [1, 1, 2, 2]
	 */

	function flatMap(collection, iteratee) {
	  return baseFlatten(map(collection, iteratee), 1);
	}

	/** Used as references for various `Number` constants. */

	var INFINITY$3 = 1 / 0;
	/**
	 * This method is like `_.flatMap` except that it recursively flattens the
	 * mapped results.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.7.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [[[n, n]]];
	 * }
	 *
	 * _.flatMapDeep([1, 2], duplicate);
	 * // => [1, 1, 2, 2]
	 */

	function flatMapDeep(collection, iteratee) {
	  return baseFlatten(map(collection, iteratee), INFINITY$3);
	}

	/**
	 * This method is like `_.flatMap` except that it recursively flattens the
	 * mapped results up to `depth` times.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.7.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {number} [depth=1] The maximum recursion depth.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [[[n, n]]];
	 * }
	 *
	 * _.flatMapDepth([1, 2], duplicate, 2);
	 * // => [[1, 1], [2, 2]]
	 */

	function flatMapDepth(collection, iteratee, depth) {
	  depth = depth === undefined ? 1 : toInteger(depth);
	  return baseFlatten(map(collection, iteratee), depth);
	}

	/** Used as references for various `Number` constants. */

	var INFINITY$4 = 1 / 0;
	/**
	 * Recursively flattens `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flattenDeep([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, 3, 4, 5]
	 */

	function flattenDeep(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, INFINITY$4) : [];
	}

	/**
	 * Recursively flatten `array` up to `depth` times.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.4.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @param {number} [depth=1] The maximum recursion depth.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * var array = [1, [2, [3, [4]], 5]];
	 *
	 * _.flattenDepth(array, 1);
	 * // => [1, 2, [3, [4]], 5]
	 *
	 * _.flattenDepth(array, 2);
	 * // => [1, 2, 3, [4], 5]
	 */

	function flattenDepth(array, depth) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  depth = depth === undefined ? 1 : toInteger(depth);
	  return baseFlatten(array, depth);
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_FLIP_FLAG$2 = 512;
	/**
	 * Creates a function that invokes `func` with arguments reversed.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Function
	 * @param {Function} func The function to flip arguments for.
	 * @returns {Function} Returns the new flipped function.
	 * @example
	 *
	 * var flipped = _.flip(function() {
	 *   return _.toArray(arguments);
	 * });
	 *
	 * flipped('a', 'b', 'c', 'd');
	 * // => ['d', 'c', 'b', 'a']
	 */

	function flip(func) {
	  return createWrap(func, WRAP_FLIP_FLAG$2);
	}

	/**
	 * Computes `number` rounded down to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round down.
	 * @param {number} [precision=0] The precision to round down to.
	 * @returns {number} Returns the rounded down number.
	 * @example
	 *
	 * _.floor(4.006);
	 * // => 4
	 *
	 * _.floor(0.046, 2);
	 * // => 0.04
	 *
	 * _.floor(4060, -2);
	 * // => 4000
	 */

	var floor = createRound('floor');

	/** Error message constants. */

	var FUNC_ERROR_TEXT$7 = 'Expected a function';
	/** Used to compose bitmasks for function metadata. */

	var WRAP_CURRY_FLAG$6 = 8,
	    WRAP_PARTIAL_FLAG$5 = 32,
	    WRAP_ARY_FLAG$4 = 128,
	    WRAP_REARG_FLAG$2 = 256;
	/**
	 * Creates a `_.flow` or `_.flowRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new flow function.
	 */

	function createFlow(fromRight) {
	  return flatRest(function (funcs) {
	    var length = funcs.length,
	        index = length,
	        prereq = LodashWrapper.prototype.thru;

	    if (fromRight) {
	      funcs.reverse();
	    }

	    while (index--) {
	      var func = funcs[index];

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT$7);
	      }

	      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	        var wrapper = new LodashWrapper([], true);
	      }
	    }

	    index = wrapper ? index : length;

	    while (++index < length) {
	      func = funcs[index];
	      var funcName = getFuncName(func),
	          data = funcName == 'wrapper' ? getData(func) : undefined;

	      if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG$4 | WRAP_CURRY_FLAG$6 | WRAP_PARTIAL_FLAG$5 | WRAP_REARG_FLAG$2) && !data[4].length && data[9] == 1) {
	        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	      } else {
	        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
	      }
	    }

	    return function () {
	      var args = arguments,
	          value = args[0];

	      if (wrapper && args.length == 1 && isArray(value)) {
	        return wrapper.plant(value).value();
	      }

	      var index = 0,
	          result = length ? funcs[index].apply(this, args) : value;

	      while (++index < length) {
	        result = funcs[index].call(this, result);
	      }

	      return result;
	    };
	  });
	}

	/**
	 * Creates a function that returns the result of invoking the given functions
	 * with the `this` binding of the created function, where each successive
	 * invocation is supplied the return value of the previous.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [funcs] The functions to invoke.
	 * @returns {Function} Returns the new composite function.
	 * @see _.flowRight
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flow([_.add, square]);
	 * addSquare(1, 2);
	 * // => 9
	 */

	var flow = createFlow();

	/**
	 * This method is like `_.flow` except that it creates a function that
	 * invokes the given functions from right to left.
	 *
	 * @static
	 * @since 3.0.0
	 * @memberOf _
	 * @category Util
	 * @param {...(Function|Function[])} [funcs] The functions to invoke.
	 * @returns {Function} Returns the new composite function.
	 * @see _.flow
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flowRight([square, _.add]);
	 * addSquare(1, 2);
	 * // => 9
	 */

	var flowRight = createFlow(true);

	/**
	 * Iterates over own and inherited enumerable string keyed properties of an
	 * object and invokes `iteratee` for each property. The iteratee is invoked
	 * with three arguments: (value, key, object). Iteratee functions may exit
	 * iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forInRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forIn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	 */

	function forIn(object, iteratee) {
	  return object == null ? object : baseFor(object, castFunction(iteratee), keysIn$1);
	}

	/**
	 * This method is like `_.forIn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forInRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	 */

	function forInRight(object, iteratee) {
	  return object == null ? object : baseForRight(object, castFunction(iteratee), keysIn$1);
	}

	/**
	 * Iterates over own enumerable string keyed properties of an object and
	 * invokes `iteratee` for each property. The iteratee is invoked with three
	 * arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwnRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */

	function forOwn(object, iteratee) {
	  return object && baseForOwn(object, castFunction(iteratee));
	}

	/**
	 * This method is like `_.forOwn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwnRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	 */

	function forOwnRight(object, iteratee) {
	  return object && baseForOwnRight(object, castFunction(iteratee));
	}

	/**
	 * The inverse of `_.toPairs`; this method returns an object composed
	 * from key-value `pairs`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} pairs The key-value pairs.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.fromPairs([['a', 1], ['b', 2]]);
	 * // => { 'a': 1, 'b': 2 }
	 */
	function fromPairs(pairs) {
	  var index = -1,
	      length = pairs == null ? 0 : pairs.length,
	      result = {};

	  while (++index < length) {
	    var pair = pairs[index];
	    result[pair[0]] = pair[1];
	  }

	  return result;
	}

	/**
	 * The base implementation of `_.functions` which creates an array of
	 * `object` function property names filtered from `props`.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} props The property names to filter.
	 * @returns {Array} Returns the function names.
	 */

	function baseFunctions(object, props) {
	  return arrayFilter(props, function (key) {
	    return isFunction(object[key]);
	  });
	}

	/**
	 * Creates an array of function property names from own enumerable properties
	 * of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @returns {Array} Returns the function names.
	 * @see _.functionsIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = _.constant('a');
	 *   this.b = _.constant('b');
	 * }
	 *
	 * Foo.prototype.c = _.constant('c');
	 *
	 * _.functions(new Foo);
	 * // => ['a', 'b']
	 */

	function functions(object) {
	  return object == null ? [] : baseFunctions(object, keys(object));
	}

	/**
	 * Creates an array of function property names from own and inherited
	 * enumerable properties of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @returns {Array} Returns the function names.
	 * @see _.functions
	 * @example
	 *
	 * function Foo() {
	 *   this.a = _.constant('a');
	 *   this.b = _.constant('b');
	 * }
	 *
	 * Foo.prototype.c = _.constant('c');
	 *
	 * _.functionsIn(new Foo);
	 * // => ['a', 'b', 'c']
	 */

	function functionsIn(object) {
	  return object == null ? [] : baseFunctions(object, keysIn$1(object));
	}

	/** Used for built-in method references. */

	var objectProto$l = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$i = objectProto$l.hasOwnProperty;
	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The order of grouped values
	 * is determined by the order they occur in `collection`. The corresponding
	 * value of each key is an array of elements responsible for generating the
	 * key. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	 * // => { '4': [4.2], '6': [6.1, 6.3] }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.groupBy(['one', 'two', 'three'], 'length');
	 * // => { '3': ['one', 'two'], '5': ['three'] }
	 */

	var groupBy = createAggregator(function (result, value, key) {
	  if (hasOwnProperty$i.call(result, key)) {
	    result[key].push(value);
	  } else {
	    baseAssignValue(result, key, [value]);
	  }
	});

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */
	function baseGt(value, other) {
	  return value > other;
	}

	/**
	 * Creates a function that performs a relational operation on two values.
	 *
	 * @private
	 * @param {Function} operator The function to perform the operation.
	 * @returns {Function} Returns the new relational operation function.
	 */

	function createRelationalOperation(operator) {
	  return function (value, other) {
	    if (!(typeof value == 'string' && typeof other == 'string')) {
	      value = toNumber(value);
	      other = toNumber(other);
	    }

	    return operator(value, other);
	  };
	}

	/**
	 * Checks if `value` is greater than `other`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.9.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 * @see _.lt
	 * @example
	 *
	 * _.gt(3, 1);
	 * // => true
	 *
	 * _.gt(3, 3);
	 * // => false
	 *
	 * _.gt(1, 3);
	 * // => false
	 */

	var gt = createRelationalOperation(baseGt);

	/**
	 * Checks if `value` is greater than or equal to `other`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.9.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than or equal to
	 *  `other`, else `false`.
	 * @see _.lte
	 * @example
	 *
	 * _.gte(3, 1);
	 * // => true
	 *
	 * _.gte(3, 3);
	 * // => true
	 *
	 * _.gte(1, 3);
	 * // => false
	 */

	var gte = createRelationalOperation(function (value, other) {
	  return value >= other;
	});

	/** Used for built-in method references. */
	var objectProto$m = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$j = objectProto$m.hasOwnProperty;
	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */

	function baseHas(object, key) {
	  return object != null && hasOwnProperty$j.call(object, key);
	}

	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */

	function has(object, path) {
	  return object != null && hasPath(object, path, baseHas);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$8 = Math.max,
	    nativeMin$5 = Math.min;
	/**
	 * The base implementation of `_.inRange` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {number} number The number to check.
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	 */

	function baseInRange(number, start, end) {
	  return number >= nativeMin$5(start, end) && number < nativeMax$8(start, end);
	}

	/**
	 * Checks if `n` is between `start` and up to, but not including, `end`. If
	 * `end` is not specified, it's set to `start` with `start` then set to `0`.
	 * If `start` is greater than `end` the params are swapped to support
	 * negative ranges.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.3.0
	 * @category Number
	 * @param {number} number The number to check.
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	 * @see _.range, _.rangeRight
	 * @example
	 *
	 * _.inRange(3, 2, 4);
	 * // => true
	 *
	 * _.inRange(4, 8);
	 * // => true
	 *
	 * _.inRange(4, 2);
	 * // => false
	 *
	 * _.inRange(2, 2);
	 * // => false
	 *
	 * _.inRange(1.2, 2);
	 * // => true
	 *
	 * _.inRange(5.2, 4);
	 * // => false
	 *
	 * _.inRange(-3, -2, -6);
	 * // => true
	 */

	function inRange(number, start, end) {
	  start = toFinite(start);

	  if (end === undefined) {
	    end = start;
	    start = 0;
	  } else {
	    end = toFinite(end);
	  }

	  number = toNumber(number);
	  return baseInRange(number, start, end);
	}

	/** `Object#toString` result references. */

	var stringTag$4 = '[object String]';
	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */

	function isString(value) {
	  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag$4;
	}

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */

	function baseValues(object, props) {
	  return arrayMap(props, function (key) {
	    return object[key];
	  });
	}

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */

	function values(object) {
	  return object == null ? [] : baseValues(object, keys(object));
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$9 = Math.max;
	/**
	 * Checks if `value` is in `collection`. If `collection` is a string, it's
	 * checked for a substring of `value`, otherwise
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * is used for equality comparisons. If `fromIndex` is negative, it's used as
	 * the offset from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	 * @returns {boolean} Returns `true` if `value` is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'a': 1, 'b': 2 }, 1);
	 * // => true
	 *
	 * _.includes('abcd', 'bc');
	 * // => true
	 */

	function includes(collection, value, fromIndex, guard) {
	  collection = isArrayLike(collection) ? collection : values(collection);
	  fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
	  var length = collection.length;

	  if (fromIndex < 0) {
	    fromIndex = nativeMax$9(length + fromIndex, 0);
	  }

	  return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$a = Math.max;
	/**
	 * Gets the index at which the first occurrence of `value` is found in `array`
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the
	 * offset from the end of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.indexOf([1, 2, 1, 2], 2);
	 * // => 1
	 *
	 * // Search from the `fromIndex`.
	 * _.indexOf([1, 2, 1, 2], 2, 2);
	 * // => 3
	 */

	function indexOf(array, value, fromIndex) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return -1;
	  }

	  var index = fromIndex == null ? 0 : toInteger(fromIndex);

	  if (index < 0) {
	    index = nativeMax$a(length + index, 0);
	  }

	  return baseIndexOf(array, value, index);
	}

	/**
	 * Gets all but the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.initial([1, 2, 3]);
	 * // => [1, 2]
	 */

	function initial(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseSlice(array, 0, -1) : [];
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$6 = Math.min;
	/**
	 * The base implementation of methods like `_.intersection`, without support
	 * for iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arrays The arrays to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of shared values.
	 */

	function baseIntersection(arrays, iteratee, comparator) {
	  var includes = comparator ? arrayIncludesWith : arrayIncludes,
	      length = arrays[0].length,
	      othLength = arrays.length,
	      othIndex = othLength,
	      caches = Array(othLength),
	      maxLength = Infinity,
	      result = [];

	  while (othIndex--) {
	    var array = arrays[othIndex];

	    if (othIndex && iteratee) {
	      array = arrayMap(array, baseUnary(iteratee));
	    }

	    maxLength = nativeMin$6(array.length, maxLength);
	    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
	  }

	  array = arrays[0];
	  var index = -1,
	      seen = caches[0];

	  outer: while (++index < length && result.length < maxLength) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;
	    value = comparator || value !== 0 ? value : 0;

	    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
	      othIndex = othLength;

	      while (--othIndex) {
	        var cache = caches[othIndex];

	        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
	          continue outer;
	        }
	      }

	      if (seen) {
	        seen.push(computed);
	      }

	      result.push(value);
	    }
	  }

	  return result;
	}

	/**
	 * Casts `value` to an empty array if it's not an array like object.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array|Object} Returns the cast array-like object.
	 */

	function castArrayLikeObject(value) {
	  return isArrayLikeObject(value) ? value : [];
	}

	/**
	 * Creates an array of unique values that are included in all given arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. The order and references of result values are
	 * determined by the first array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of intersecting values.
	 * @example
	 *
	 * _.intersection([2, 1], [2, 3]);
	 * // => [2]
	 */

	var intersection = baseRest(function (arrays) {
	  var mapped = arrayMap(arrays, castArrayLikeObject);
	  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
	});

	/**
	 * This method is like `_.intersection` except that it accepts `iteratee`
	 * which is invoked for each element of each `arrays` to generate the criterion
	 * by which they're compared. The order and references of result values are
	 * determined by the first array. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new array of intersecting values.
	 * @example
	 *
	 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	 * // => [2.1]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }]
	 */

	var intersectionBy = baseRest(function (arrays) {
	  var iteratee = last(arrays),
	      mapped = arrayMap(arrays, castArrayLikeObject);

	  if (iteratee === last(mapped)) {
	    iteratee = undefined;
	  } else {
	    mapped.pop();
	  }

	  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, baseIteratee(iteratee, 2)) : [];
	});

	/**
	 * This method is like `_.intersection` except that it accepts `comparator`
	 * which is invoked to compare elements of `arrays`. The order and references
	 * of result values are determined by the first array. The comparator is
	 * invoked with two arguments: (arrVal, othVal).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of intersecting values.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	 *
	 * _.intersectionWith(objects, others, _.isEqual);
	 * // => [{ 'x': 1, 'y': 2 }]
	 */

	var intersectionWith = baseRest(function (arrays) {
	  var comparator = last(arrays),
	      mapped = arrayMap(arrays, castArrayLikeObject);
	  comparator = typeof comparator == 'function' ? comparator : undefined;

	  if (comparator) {
	    mapped.pop();
	  }

	  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
	});

	/**
	 * The base implementation of `_.invert` and `_.invertBy` which inverts
	 * `object` with values transformed by `iteratee` and set by `setter`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform values.
	 * @param {Object} accumulator The initial inverted object.
	 * @returns {Function} Returns `accumulator`.
	 */

	function baseInverter(object, setter, iteratee, accumulator) {
	  baseForOwn(object, function (value, key, object) {
	    setter(accumulator, iteratee(value), key, object);
	  });
	  return accumulator;
	}

	/**
	 * Creates a function like `_.invertBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} toIteratee The function to resolve iteratees.
	 * @returns {Function} Returns the new inverter function.
	 */

	function createInverter(setter, toIteratee) {
	  return function (object, iteratee) {
	    return baseInverter(object, setter, toIteratee(iteratee), {});
	  };
	}

	/** Used for built-in method references. */

	var objectProto$n = Object.prototype;
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString$2 = objectProto$n.toString;
	/**
	 * Creates an object composed of the inverted keys and values of `object`.
	 * If `object` contains duplicate values, subsequent values overwrite
	 * property assignments of previous values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.7.0
	 * @category Object
	 * @param {Object} object The object to invert.
	 * @returns {Object} Returns the new inverted object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2, 'c': 1 };
	 *
	 * _.invert(object);
	 * // => { '1': 'c', '2': 'b' }
	 */

	var invert = createInverter(function (result, value, key) {
	  if (value != null && typeof value.toString != 'function') {
	    value = nativeObjectToString$2.call(value);
	  }

	  result[value] = key;
	}, constant(identity));

	/** Used for built-in method references. */

	var objectProto$o = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$k = objectProto$o.hasOwnProperty;
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString$3 = objectProto$o.toString;
	/**
	 * This method is like `_.invert` except that the inverted object is generated
	 * from the results of running each element of `object` thru `iteratee`. The
	 * corresponding inverted value of each inverted key is an array of keys
	 * responsible for generating the inverted value. The iteratee is invoked
	 * with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.1.0
	 * @category Object
	 * @param {Object} object The object to invert.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Object} Returns the new inverted object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2, 'c': 1 };
	 *
	 * _.invertBy(object);
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 *
	 * _.invertBy(object, function(value) {
	 *   return 'group' + value;
	 * });
	 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	 */

	var invertBy = createInverter(function (result, value, key) {
	  if (value != null && typeof value.toString != 'function') {
	    value = nativeObjectToString$3.call(value);
	  }

	  if (hasOwnProperty$k.call(result, value)) {
	    result[value].push(key);
	  } else {
	    result[value] = [key];
	  }
	}, baseIteratee);

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */

	function parent(object, path) {
	  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	}

	/**
	 * The base implementation of `_.invoke` without support for individual
	 * method arguments.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {Array} args The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 */

	function baseInvoke(object, path, args) {
	  path = castPath(path, object);
	  object = parent(object, path);
	  var func = object == null ? object : object[toKey(last(path))];
	  return func == null ? undefined : apply(func, object, args);
	}

	/**
	 * Invokes the method at `path` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	 *
	 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	 * // => [2, 3]
	 */

	var invoke = baseRest(baseInvoke);

	/**
	 * Invokes the method at `path` of each element in `collection`, returning
	 * an array of the results of each invoked method. Any additional arguments
	 * are provided to each invoked method. If `path` is a function, it's invoked
	 * for, and `this` bound to, each element in `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Array|Function|string} path The path of the method to invoke or
	 *  the function invoked per iteration.
	 * @param {...*} [args] The arguments to invoke each method with.
	 * @returns {Array} Returns the array of results.
	 * @example
	 *
	 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	 * // => [[1, 5, 7], [1, 2, 3]]
	 *
	 * _.invokeMap([123, 456], String.prototype.split, '');
	 * // => [['1', '2', '3'], ['4', '5', '6']]
	 */

	var invokeMap = baseRest(function (collection, path, args) {
	  var index = -1,
	      isFunc = typeof path == 'function',
	      result = isArrayLike(collection) ? Array(collection.length) : [];
	  baseEach(collection, function (value) {
	    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	  });
	  return result;
	});

	var arrayBufferTag$4 = '[object ArrayBuffer]';
	/**
	 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	 */

	function baseIsArrayBuffer(value) {
	  return isObjectLike(value) && baseGetTag(value) == arrayBufferTag$4;
	}

	/* Node.js helper references. */

	var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer;
	/**
	 * Checks if `value` is classified as an `ArrayBuffer` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	 * @example
	 *
	 * _.isArrayBuffer(new ArrayBuffer(2));
	 * // => true
	 *
	 * _.isArrayBuffer(new Array(2));
	 * // => false
	 */

	var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	/** `Object#toString` result references. */

	var boolTag$4 = '[object Boolean]';
	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */

	function isBoolean(value) {
	  return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag$4;
	}

	/** `Object#toString` result references. */

	var dateTag$4 = '[object Date]';
	/**
	 * The base implementation of `_.isDate` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 */

	function baseIsDate(value) {
	  return isObjectLike(value) && baseGetTag(value) == dateTag$4;
	}

	/* Node.js helper references. */

	var nodeIsDate = nodeUtil && nodeUtil.isDate;
	/**
	 * Checks if `value` is classified as a `Date` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 * @example
	 *
	 * _.isDate(new Date);
	 * // => true
	 *
	 * _.isDate('Mon April 23 2012');
	 * // => false
	 */

	var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	/**
	 * Checks if `value` is likely a DOM element.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	 * @example
	 *
	 * _.isElement(document.body);
	 * // => true
	 *
	 * _.isElement('<body>');
	 * // => false
	 */

	function isElement(value) {
	  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	}

	/** `Object#toString` result references. */

	var mapTag$7 = '[object Map]',
	    setTag$7 = '[object Set]';
	/** Used for built-in method references. */

	var objectProto$p = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$l = objectProto$p.hasOwnProperty;
	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */

	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }

	  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }

	  var tag = getTag$1(value);

	  if (tag == mapTag$7 || tag == setTag$7) {
	    return !value.size;
	  }

	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }

	  for (var key in value) {
	    if (hasOwnProperty$l.call(value, key)) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */

	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}

	/**
	 * This method is like `_.isEqual` except that it accepts `customizer` which
	 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	 * are handled by the method instead. The `customizer` is invoked with up to
	 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * function isGreeting(value) {
	 *   return /^h(?:i|ello)$/.test(value);
	 * }
	 *
	 * function customizer(objValue, othValue) {
	 *   if (isGreeting(objValue) && isGreeting(othValue)) {
	 *     return true;
	 *   }
	 * }
	 *
	 * var array = ['hello', 'goodbye'];
	 * var other = ['hi', 'goodbye'];
	 *
	 * _.isEqualWith(array, other, customizer);
	 * // => true
	 */

	function isEqualWith(value, other, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  var result = customizer ? customizer(value, other) : undefined;
	  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeIsFinite = root.isFinite;
	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on
	 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	 * @example
	 *
	 * _.isFinite(3);
	 * // => true
	 *
	 * _.isFinite(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 *
	 * _.isFinite('3');
	 * // => false
	 */

	function isFinite$1(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}

	/**
	 * Checks if `value` is an integer.
	 *
	 * **Note:** This method is based on
	 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	 * @example
	 *
	 * _.isInteger(3);
	 * // => true
	 *
	 * _.isInteger(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isInteger(Infinity);
	 * // => false
	 *
	 * _.isInteger('3');
	 * // => false
	 */

	function isInteger(value) {
	  return typeof value == 'number' && value == toInteger(value);
	}

	/**
	 * Performs a partial deep comparison between `object` and `source` to
	 * determine if `object` contains equivalent property values.
	 *
	 * **Note:** This method is equivalent to `_.matches` when `source` is
	 * partially applied.
	 *
	 * Partial comparisons will match empty array and empty object `source`
	 * values against any array or object value, respectively. See `_.isEqual`
	 * for a list of supported value comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 *
	 * _.isMatch(object, { 'b': 2 });
	 * // => true
	 *
	 * _.isMatch(object, { 'b': 1 });
	 * // => false
	 */

	function isMatch(object, source) {
	  return object === source || baseIsMatch(object, source, getMatchData(source));
	}

	/**
	 * This method is like `_.isMatch` except that it accepts `customizer` which
	 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	 * are handled by the method instead. The `customizer` is invoked with five
	 * arguments: (objValue, srcValue, index|key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 * @example
	 *
	 * function isGreeting(value) {
	 *   return /^h(?:i|ello)$/.test(value);
	 * }
	 *
	 * function customizer(objValue, srcValue) {
	 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	 *     return true;
	 *   }
	 * }
	 *
	 * var object = { 'greeting': 'hello' };
	 * var source = { 'greeting': 'hi' };
	 *
	 * _.isMatchWith(object, source, customizer);
	 * // => true
	 */

	function isMatchWith(object, source, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return baseIsMatch(object, source, getMatchData(source), customizer);
	}

	/** `Object#toString` result references. */

	var numberTag$4 = '[object Number]';
	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */

	function isNumber(value) {
	  return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag$4;
	}

	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is based on
	 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	 * `undefined` and other non-number values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */

	function isNaN$1(value) {
	  // An `NaN` primitive is the only value that is not equal to itself.
	  // Perform the `toStringTag` check first to avoid errors with some
	  // ActiveX objects in IE.
	  return isNumber(value) && value != +value;
	}

	/**
	 * Checks if `func` is capable of being masked.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	 */

	var isMaskable = coreJsData ? isFunction : stubFalse;

	/** Error message constants. */

	var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';
	/**
	 * Checks if `value` is a pristine native function.
	 *
	 * **Note:** This method can't reliably detect native functions in the presence
	 * of the core-js package because core-js circumvents this kind of detection.
	 * Despite multiple requests, the core-js maintainer has made it clear: any
	 * attempt to fix the detection will be obstructed. As a result, we're left
	 * with little choice but to throw an error. Unfortunately, this also affects
	 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	 * which rely on core-js.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */

	function isNative(value) {
	  if (isMaskable(value)) {
	    throw new Error(CORE_ERROR_TEXT);
	  }

	  return baseIsNative(value);
	}

	/**
	 * Checks if `value` is `null` or `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	 * @example
	 *
	 * _.isNil(null);
	 * // => true
	 *
	 * _.isNil(void 0);
	 * // => true
	 *
	 * _.isNil(NaN);
	 * // => false
	 */
	function isNil(value) {
	  return value == null;
	}

	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	function isNull(value) {
	  return value === null;
	}

	/** `Object#toString` result references. */

	var regexpTag$4 = '[object RegExp]';
	/**
	 * The base implementation of `_.isRegExp` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 */

	function baseIsRegExp(value) {
	  return isObjectLike(value) && baseGetTag(value) == regexpTag$4;
	}

	/* Node.js helper references. */

	var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */

	var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$2 = 9007199254740991;
	/**
	 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	 * double precision number which isn't the result of a rounded unsafe integer.
	 *
	 * **Note:** This method is based on
	 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	 * @example
	 *
	 * _.isSafeInteger(3);
	 * // => true
	 *
	 * _.isSafeInteger(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isSafeInteger(Infinity);
	 * // => false
	 *
	 * _.isSafeInteger('3');
	 * // => false
	 */

	function isSafeInteger(value) {
	  return isInteger(value) && value >= -MAX_SAFE_INTEGER$2 && value <= MAX_SAFE_INTEGER$2;
	}

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined(value) {
	  return value === undefined;
	}

	/** `Object#toString` result references. */

	var weakMapTag$3 = '[object WeakMap]';
	/**
	 * Checks if `value` is classified as a `WeakMap` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	 * @example
	 *
	 * _.isWeakMap(new WeakMap);
	 * // => true
	 *
	 * _.isWeakMap(new Map);
	 * // => false
	 */

	function isWeakMap(value) {
	  return isObjectLike(value) && getTag$1(value) == weakMapTag$3;
	}

	/** `Object#toString` result references. */

	var weakSetTag = '[object WeakSet]';
	/**
	 * Checks if `value` is classified as a `WeakSet` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	 * @example
	 *
	 * _.isWeakSet(new WeakSet);
	 * // => true
	 *
	 * _.isWeakSet(new Set);
	 * // => false
	 */

	function isWeakSet(value) {
	  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$4 = 1;
	/**
	 * Creates a function that invokes `func` with the arguments of the created
	 * function. If `func` is a property name, the created function returns the
	 * property value for a given element. If `func` is an array or object, the
	 * created function returns `true` for elements that contain the equivalent
	 * source properties, otherwise it returns `false`.
	 *
	 * @static
	 * @since 4.0.0
	 * @memberOf _
	 * @category Util
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @returns {Function} Returns the callback.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, _.iteratee(['user', 'fred']));
	 * // => [{ 'user': 'fred', 'age': 40 }]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, _.iteratee('user'));
	 * // => ['barney', 'fred']
	 *
	 * // Create custom iteratee shorthands.
	 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	 *     return func.test(string);
	 *   };
	 * });
	 *
	 * _.filter(['abc', 'def'], /ef/);
	 * // => ['def']
	 */

	function iteratee(func) {
	  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG$4));
	}

	/** Used for built-in method references. */
	var arrayProto$1 = Array.prototype;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeJoin = arrayProto$1.join;
	/**
	 * Converts all elements in `array` into a string separated by `separator`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to convert.
	 * @param {string} [separator=','] The element separator.
	 * @returns {string} Returns the joined string.
	 * @example
	 *
	 * _.join(['a', 'b', 'c'], '~');
	 * // => 'a~b~c'
	 */

	function join(array, separator) {
	  return array == null ? '' : nativeJoin.call(array, separator);
	}

	/**
	 * Converts `string` to
	 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the kebab cased string.
	 * @example
	 *
	 * _.kebabCase('Foo Bar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('fooBar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('__FOO_BAR__');
	 * // => 'foo-bar'
	 */

	var kebabCase = createCompounder(function (result, word, index) {
	  return result + (index ? '-' : '') + word.toLowerCase();
	});

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The corresponding value of
	 * each key is the last element responsible for generating the key. The
	 * iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * var array = [
	 *   { 'dir': 'left', 'code': 97 },
	 *   { 'dir': 'right', 'code': 100 }
	 * ];
	 *
	 * _.keyBy(array, function(o) {
	 *   return String.fromCharCode(o.code);
	 * });
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.keyBy(array, 'dir');
	 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	 */

	var keyBy = createAggregator(function (result, value, key) {
	  baseAssignValue(result, key, value);
	});

	/**
	 * A specialized version of `_.lastIndexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictLastIndexOf(array, value, fromIndex) {
	  var index = fromIndex + 1;

	  while (index--) {
	    if (array[index] === value) {
	      return index;
	    }
	  }

	  return index;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$b = Math.max,
	    nativeMin$7 = Math.min;
	/**
	 * This method is like `_.indexOf` except that it iterates over elements of
	 * `array` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=array.length-1] The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.lastIndexOf([1, 2, 1, 2], 2);
	 * // => 3
	 *
	 * // Search from the `fromIndex`.
	 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	 * // => 1
	 */

	function lastIndexOf(array, value, fromIndex) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return -1;
	  }

	  var index = length;

	  if (fromIndex !== undefined) {
	    index = toInteger(fromIndex);
	    index = index < 0 ? nativeMax$b(length + index, 0) : nativeMin$7(index, length - 1);
	  }

	  return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
	}

	/**
	 * Converts `string`, as space separated words, to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the lower cased string.
	 * @example
	 *
	 * _.lowerCase('--Foo-Bar--');
	 * // => 'foo bar'
	 *
	 * _.lowerCase('fooBar');
	 * // => 'foo bar'
	 *
	 * _.lowerCase('__FOO_BAR__');
	 * // => 'foo bar'
	 */

	var lowerCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + word.toLowerCase();
	});

	/**
	 * Converts the first character of `string` to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.lowerFirst('Fred');
	 * // => 'fred'
	 *
	 * _.lowerFirst('FRED');
	 * // => 'fRED'
	 */

	var lowerFirst = createCaseFirst('toLowerCase');

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	/**
	 * Checks if `value` is less than `other`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.9.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 * @see _.gt
	 * @example
	 *
	 * _.lt(1, 3);
	 * // => true
	 *
	 * _.lt(3, 3);
	 * // => false
	 *
	 * _.lt(3, 1);
	 * // => false
	 */

	var lt = createRelationalOperation(baseLt);

	/**
	 * Checks if `value` is less than or equal to `other`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.9.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than or equal to
	 *  `other`, else `false`.
	 * @see _.gte
	 * @example
	 *
	 * _.lte(1, 3);
	 * // => true
	 *
	 * _.lte(3, 3);
	 * // => true
	 *
	 * _.lte(3, 1);
	 * // => false
	 */

	var lte = createRelationalOperation(function (value, other) {
	  return value <= other;
	});

	/**
	 * The opposite of `_.mapValues`; this method creates an object with the
	 * same values as `object` and keys generated by running each own enumerable
	 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	 * with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapValues
	 * @example
	 *
	 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   return key + value;
	 * });
	 * // => { 'a1': 1, 'b2': 2 }
	 */

	function mapKeys(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);
	  baseForOwn(object, function (value, key, object) {
	    baseAssignValue(result, iteratee(value, key, object), value);
	  });
	  return result;
	}

	/**
	 * Creates an object with the same keys as `object` and values generated
	 * by running each own enumerable string keyed property of `object` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapKeys
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */

	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);
	  baseForOwn(object, function (value, key, object) {
	    baseAssignValue(result, key, iteratee(value, key, object));
	  });
	  return result;
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$5 = 1;
	/**
	 * Creates a function that performs a partial deep comparison between a given
	 * object and `source`, returning `true` if the given object has equivalent
	 * property values, else `false`.
	 *
	 * **Note:** The created function is equivalent to `_.isMatch` with `source`
	 * partially applied.
	 *
	 * Partial comparisons will match empty array and empty object `source`
	 * values against any array or object value, respectively. See `_.isEqual`
	 * for a list of supported value comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': 1, 'b': 2, 'c': 3 },
	 *   { 'a': 4, 'b': 5, 'c': 6 }
	 * ];
	 *
	 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	 */

	function matches(source) {
	  return baseMatches(baseClone(source, CLONE_DEEP_FLAG$5));
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$6 = 1;
	/**
	 * Creates a function that performs a partial deep comparison between the
	 * value at `path` of a given object to `srcValue`, returning `true` if the
	 * object value is equivalent, else `false`.
	 *
	 * **Note:** Partial comparisons will match empty array and empty object
	 * `srcValue` values against any array or object value, respectively. See
	 * `_.isEqual` for a list of supported value comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.2.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': 1, 'b': 2, 'c': 3 },
	 *   { 'a': 4, 'b': 5, 'c': 6 }
	 * ];
	 *
	 * _.find(objects, _.matchesProperty('a', 4));
	 * // => { 'a': 4, 'b': 5, 'c': 6 }
	 */

	function matchesProperty(path, srcValue) {
	  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG$6));
	}

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */

	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
	      var computed = current,
	          result = value;
	    }
	  }

	  return result;
	}

	/**
	 * Computes the maximum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * _.max([4, 2, 8, 6]);
	 * // => 8
	 *
	 * _.max([]);
	 * // => undefined
	 */

	function max(array) {
	  return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
	}

	/**
	 * This method is like `_.max` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.maxBy(objects, function(o) { return o.n; });
	 * // => { 'n': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.maxBy(objects, 'n');
	 * // => { 'n': 2 }
	 */

	function maxBy(array, iteratee) {
	  return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;
	}

	/**
	 * The base implementation of `_.sum` and `_.sumBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function baseSum(array, iteratee) {
	  var result,
	      index = -1,
	      length = array.length;

	  while (++index < length) {
	    var current = iteratee(array[index]);

	    if (current !== undefined) {
	      result = result === undefined ? current : result + current;
	    }
	  }

	  return result;
	}

	/** Used as references for various `Number` constants. */

	var NAN$2 = 0 / 0;
	/**
	 * The base implementation of `_.mean` and `_.meanBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the mean.
	 */

	function baseMean(array, iteratee) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseSum(array, iteratee) / length : NAN$2;
	}

	/**
	 * Computes the mean of the values in `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {number} Returns the mean.
	 * @example
	 *
	 * _.mean([4, 2, 8, 6]);
	 * // => 5
	 */

	function mean(array) {
	  return baseMean(array, identity);
	}

	/**
	 * This method is like `_.mean` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the value to be averaged.
	 * The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.7.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {number} Returns the mean.
	 * @example
	 *
	 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	 *
	 * _.meanBy(objects, function(o) { return o.n; });
	 * // => 5
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.meanBy(objects, 'n');
	 * // => 5
	 */

	function meanBy(array, iteratee) {
	  return baseMean(array, baseIteratee(iteratee, 2));
	}

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */

	var merge = createAssigner(function (object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	/**
	 * Creates a function that invokes the method at `path` of a given object.
	 * Any additional arguments are provided to the invoked method.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Util
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {Function} Returns the new invoker function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': _.constant(2) } },
	 *   { 'a': { 'b': _.constant(1) } }
	 * ];
	 *
	 * _.map(objects, _.method('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(objects, _.method(['a', 'b']));
	 * // => [2, 1]
	 */

	var method = baseRest(function (path, args) {
	  return function (object) {
	    return baseInvoke(object, path, args);
	  };
	});

	/**
	 * The opposite of `_.method`; this method creates a function that invokes
	 * the method at a given path of `object`. Any additional arguments are
	 * provided to the invoked method.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Util
	 * @param {Object} object The object to query.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {Function} Returns the new invoker function.
	 * @example
	 *
	 * var array = _.times(3, _.constant),
	 *     object = { 'a': array, 'b': array, 'c': array };
	 *
	 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	 * // => [2, 0]
	 *
	 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	 * // => [2, 0]
	 */

	var methodOf = baseRest(function (object, args) {
	  return function (path) {
	    return baseInvoke(object, path, args);
	  };
	});

	/**
	 * Computes the minimum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => undefined
	 */

	function min(array) {
	  return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
	}

	/**
	 * This method is like `_.min` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.minBy(objects, function(o) { return o.n; });
	 * // => { 'n': 1 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.minBy(objects, 'n');
	 * // => { 'n': 1 }
	 */

	function minBy(array, iteratee) {
	  return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : undefined;
	}

	/**
	 * Adds all own enumerable string keyed function properties of a source
	 * object to the destination object. If `object` is a function, then methods
	 * are added to its prototype as well.
	 *
	 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	 * avoid conflicts caused by modifying the original.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {Function|Object} [object=lodash] The destination object.
	 * @param {Object} source The object of functions to add.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	 * @returns {Function|Object} Returns `object`.
	 * @example
	 *
	 * function vowels(string) {
	 *   return _.filter(string, function(v) {
	 *     return /[aeiou]/i.test(v);
	 *   });
	 * }
	 *
	 * _.mixin({ 'vowels': vowels });
	 * _.vowels('fred');
	 * // => ['e']
	 *
	 * _('fred').vowels().value();
	 * // => ['e']
	 *
	 * _.mixin({ 'vowels': vowels }, { 'chain': false });
	 * _('fred').vowels();
	 * // => ['e']
	 */

	function mixin(object, source, options) {
	  var props = keys(source),
	      methodNames = baseFunctions(source, props);
	  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	      isFunc = isFunction(object);
	  arrayEach(methodNames, function (methodName) {
	    var func = source[methodName];
	    object[methodName] = func;

	    if (isFunc) {
	      object.prototype[methodName] = function () {
	        var chainAll = this.__chain__;

	        if (chain || chainAll) {
	          var result = object(this.__wrapped__),
	              actions = result.__actions__ = copyArray(this.__actions__);
	          actions.push({
	            'func': func,
	            'args': arguments,
	            'thisArg': object
	          });
	          result.__chain__ = chainAll;
	          return result;
	        }

	        return func.apply(object, arrayPush([this.value()], arguments));
	      };
	    }
	  });
	  return object;
	}

	/**
	 * Multiply two numbers.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.7.0
	 * @category Math
	 * @param {number} multiplier The first number in a multiplication.
	 * @param {number} multiplicand The second number in a multiplication.
	 * @returns {number} Returns the product.
	 * @example
	 *
	 * _.multiply(6, 4);
	 * // => 24
	 */

	var multiply = createMathOperation(function (multiplier, multiplicand) {
	  return multiplier * multiplicand;
	}, 1);

	/** Error message constants. */
	var FUNC_ERROR_TEXT$8 = 'Expected a function';
	/**
	 * Creates a function that negates the result of the predicate `func`. The
	 * `func` predicate is invoked with the `this` binding and arguments of the
	 * created function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} predicate The predicate to negate.
	 * @returns {Function} Returns the new negated function.
	 * @example
	 *
	 * function isEven(n) {
	 *   return n % 2 == 0;
	 * }
	 *
	 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	 * // => [1, 3, 5]
	 */

	function negate(predicate) {
	  if (typeof predicate != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$8);
	  }

	  return function () {
	    var args = arguments;

	    switch (args.length) {
	      case 0:
	        return !predicate.call(this);

	      case 1:
	        return !predicate.call(this, args[0]);

	      case 2:
	        return !predicate.call(this, args[0], args[1]);

	      case 3:
	        return !predicate.call(this, args[0], args[1], args[2]);
	    }

	    return !predicate.apply(this, args);
	  };
	}

	/**
	 * Converts `iterator` to an array.
	 *
	 * @private
	 * @param {Object} iterator The iterator to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function iteratorToArray(iterator) {
	  var data,
	      result = [];

	  while (!(data = iterator.next()).done) {
	    result.push(data.value);
	  }

	  return result;
	}

	/** `Object#toString` result references. */

	var mapTag$8 = '[object Map]',
	    setTag$8 = '[object Set]';
	/** Built-in value references. */

	var symIterator = _Symbol ? _Symbol.iterator : undefined;
	/**
	 * Converts `value` to an array.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the converted array.
	 * @example
	 *
	 * _.toArray({ 'a': 1, 'b': 2 });
	 * // => [1, 2]
	 *
	 * _.toArray('abc');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toArray(1);
	 * // => []
	 *
	 * _.toArray(null);
	 * // => []
	 */

	function toArray(value) {
	  if (!value) {
	    return [];
	  }

	  if (isArrayLike(value)) {
	    return isString(value) ? stringToArray(value) : copyArray(value);
	  }

	  if (symIterator && value[symIterator]) {
	    return iteratorToArray(value[symIterator]());
	  }

	  var tag = getTag$1(value),
	      func = tag == mapTag$8 ? mapToArray : tag == setTag$8 ? setToArray : values;
	  return func(value);
	}

	/**
	 * Gets the next value on a wrapped object following the
	 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	 *
	 * @name next
	 * @memberOf _
	 * @since 4.0.0
	 * @category Seq
	 * @returns {Object} Returns the next iterator value.
	 * @example
	 *
	 * var wrapped = _([1, 2]);
	 *
	 * wrapped.next();
	 * // => { 'done': false, 'value': 1 }
	 *
	 * wrapped.next();
	 * // => { 'done': false, 'value': 2 }
	 *
	 * wrapped.next();
	 * // => { 'done': true, 'value': undefined }
	 */

	function wrapperNext() {
	  if (this.__values__ === undefined) {
	    this.__values__ = toArray(this.value());
	  }

	  var done = this.__index__ >= this.__values__.length,
	      value = done ? undefined : this.__values__[this.__index__++];
	  return {
	    'done': done,
	    'value': value
	  };
	}

	/**
	 * The base implementation of `_.nth` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {number} n The index of the element to return.
	 * @returns {*} Returns the nth element of `array`.
	 */

	function baseNth(array, n) {
	  var length = array.length;

	  if (!length) {
	    return;
	  }

	  n += n < 0 ? length : 0;
	  return isIndex(n, length) ? array[n] : undefined;
	}

	/**
	 * Gets the element at index `n` of `array`. If `n` is negative, the nth
	 * element from the end is returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.11.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=0] The index of the element to return.
	 * @returns {*} Returns the nth element of `array`.
	 * @example
	 *
	 * var array = ['a', 'b', 'c', 'd'];
	 *
	 * _.nth(array, 1);
	 * // => 'b'
	 *
	 * _.nth(array, -2);
	 * // => 'c';
	 */

	function nth(array, n) {
	  return array && array.length ? baseNth(array, toInteger(n)) : undefined;
	}

	/**
	 * Creates a function that gets the argument at index `n`. If `n` is negative,
	 * the nth argument from the end is returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {number} [n=0] The index of the argument to return.
	 * @returns {Function} Returns the new pass-thru function.
	 * @example
	 *
	 * var func = _.nthArg(1);
	 * func('a', 'b', 'c', 'd');
	 * // => 'b'
	 *
	 * var func = _.nthArg(-2);
	 * func('a', 'b', 'c', 'd');
	 * // => 'c'
	 */

	function nthArg(n) {
	  n = toInteger(n);
	  return baseRest(function (args) {
	    return baseNth(args, n);
	  });
	}

	/**
	 * The base implementation of `_.unset`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The property path to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 */

	function baseUnset(object, path) {
	  path = castPath(path, object);
	  object = parent(object, path);
	  return object == null || delete object[toKey(last(path))];
	}

	/**
	 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	 * objects.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {string} key The key of the property to inspect.
	 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	 */

	function customOmitClone(value) {
	  return isPlainObject(value) ? undefined : value;
	}

	/** Used to compose bitmasks for cloning. */

	var CLONE_DEEP_FLAG$7 = 1,
	    CLONE_FLAT_FLAG$1 = 2,
	    CLONE_SYMBOLS_FLAG$5 = 4;
	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable property paths of `object` that are not omitted.
	 *
	 * **Note:** This method is considerably slower than `_.pick`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to omit.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omit(object, ['a', 'c']);
	 * // => { 'b': '2' }
	 */

	var omit = flatRest(function (object, paths) {
	  var result = {};

	  if (object == null) {
	    return result;
	  }

	  var isDeep = false;
	  paths = arrayMap(paths, function (path) {
	    path = castPath(path, object);
	    isDeep || (isDeep = path.length > 1);
	    return path;
	  });
	  copyObject(object, getAllKeysIn(object), result);

	  if (isDeep) {
	    result = baseClone(result, CLONE_DEEP_FLAG$7 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$5, customOmitClone);
	  }

	  var length = paths.length;

	  while (length--) {
	    baseUnset(result, paths[length]);
	  }

	  return result;
	});

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */

	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }

	  path = castPath(path, object);
	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;

	      if (newValue === undefined) {
	        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
	      }
	    }

	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }

	  return object;
	}

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */

	function basePickBy(object, paths, predicate) {
	  var index = -1,
	      length = paths.length,
	      result = {};

	  while (++index < length) {
	    var path = paths[index],
	        value = baseGet(object, path);

	    if (predicate(value, path)) {
	      baseSet(result, castPath(path, object), value);
	    }
	  }

	  return result;
	}

	/**
	 * Creates an object composed of the `object` properties `predicate` returns
	 * truthy for. The predicate is invoked with two arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pickBy(object, _.isNumber);
	 * // => { 'a': 1, 'c': 3 }
	 */

	function pickBy(object, predicate) {
	  if (object == null) {
	    return {};
	  }

	  var props = arrayMap(getAllKeysIn(object), function (prop) {
	    return [prop];
	  });
	  predicate = baseIteratee(predicate);
	  return basePickBy(object, props, function (value, path) {
	    return predicate(value, path[0]);
	  });
	}

	/**
	 * The opposite of `_.pickBy`; this method creates an object composed of
	 * the own and inherited enumerable string keyed properties of `object` that
	 * `predicate` doesn't return truthy for. The predicate is invoked with two
	 * arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omitBy(object, _.isNumber);
	 * // => { 'b': '2' }
	 */

	function omitBy(object, predicate) {
	  return pickBy(object, negate(baseIteratee(predicate)));
	}

	/**
	 * Creates a function that is restricted to invoking `func` once. Repeat calls
	 * to the function return the value of the first invocation. The `func` is
	 * invoked with the `this` binding and arguments of the created function.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * var initialize = _.once(createApplication);
	 * initialize();
	 * initialize();
	 * // => `createApplication` is invoked once
	 */

	function once(func) {
	  return before(2, func);
	}

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;
	  array.sort(comparer);

	  while (length--) {
	    array[length] = array[length].value;
	  }

	  return array;
	}

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */

	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);
	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
	      return 1;
	    }

	    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
	      return -1;
	    }
	  }

	  return 0;
	}

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */

	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);

	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }

	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.


	  return object.index - other.index;
	}

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */

	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));
	  var result = baseMap(collection, function (value, key, collection) {
	    var criteria = arrayMap(iteratees, function (iteratee) {
	      return iteratee(value);
	    });
	    return {
	      'criteria': criteria,
	      'index': ++index,
	      'value': value
	    };
	  });
	  return baseSortBy(result, function (object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	/**
	 * This method is like `_.sortBy` except that it allows specifying the sort
	 * orders of the iteratees to sort by. If `orders` is unspecified, all values
	 * are sorted in ascending order. Otherwise, specify an order of "desc" for
	 * descending or "asc" for ascending sort order of corresponding values.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @param {string[]} [orders] The sort orders of `iteratees`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 34 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 36 }
	 * ];
	 *
	 * // Sort by `user` in ascending order and by `age` in descending order.
	 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 */

	function orderBy(collection, iteratees, orders, guard) {
	  if (collection == null) {
	    return [];
	  }

	  if (!isArray(iteratees)) {
	    iteratees = iteratees == null ? [] : [iteratees];
	  }

	  orders = guard ? undefined : orders;

	  if (!isArray(orders)) {
	    orders = orders == null ? [] : [orders];
	  }

	  return baseOrderBy(collection, iteratees, orders);
	}

	/**
	 * Creates a function like `_.over`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over iteratees.
	 * @returns {Function} Returns the new over function.
	 */

	function createOver(arrayFunc) {
	  return flatRest(function (iteratees) {
	    iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
	    return baseRest(function (args) {
	      var thisArg = this;
	      return arrayFunc(iteratees, function (iteratee) {
	        return apply(iteratee, thisArg, args);
	      });
	    });
	  });
	}

	/**
	 * Creates a function that invokes `iteratees` with the arguments it receives
	 * and returns their results.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to invoke.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var func = _.over([Math.max, Math.min]);
	 *
	 * func(1, 2, 3, 4);
	 * // => [4, 1]
	 */

	var over = createOver(arrayMap);

	/**
	 * A `baseRest` alias which can be replaced with `identity` by module
	 * replacement plugins.
	 *
	 * @private
	 * @type {Function}
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */

	var castRest = baseRest;

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$8 = Math.min;
	/**
	 * Creates a function that invokes `func` with its arguments transformed.
	 *
	 * @static
	 * @since 4.0.0
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to wrap.
	 * @param {...(Function|Function[])} [transforms=[_.identity]]
	 *  The argument transforms.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * function doubled(n) {
	 *   return n * 2;
	 * }
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var func = _.overArgs(function(x, y) {
	 *   return [x, y];
	 * }, [square, doubled]);
	 *
	 * func(9, 3);
	 * // => [81, 6]
	 *
	 * func(10, 5);
	 * // => [100, 10]
	 */

	var overArgs = castRest(function (func, transforms) {
	  transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(baseIteratee)) : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));
	  var funcsLength = transforms.length;
	  return baseRest(function (args) {
	    var index = -1,
	        length = nativeMin$8(args.length, funcsLength);

	    while (++index < length) {
	      args[index] = transforms[index].call(this, args[index]);
	    }

	    return apply(func, this, args);
	  });
	});

	/**
	 * Creates a function that checks if **all** of the `predicates` return
	 * truthy when invoked with the arguments it receives.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [predicates=[_.identity]]
	 *  The predicates to check.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var func = _.overEvery([Boolean, isFinite]);
	 *
	 * func('1');
	 * // => true
	 *
	 * func(null);
	 * // => false
	 *
	 * func(NaN);
	 * // => false
	 */

	var overEvery = createOver(arrayEvery);

	/**
	 * Creates a function that checks if **any** of the `predicates` return
	 * truthy when invoked with the arguments it receives.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [predicates=[_.identity]]
	 *  The predicates to check.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var func = _.overSome([Boolean, isFinite]);
	 *
	 * func('1');
	 * // => true
	 *
	 * func(null);
	 * // => true
	 *
	 * func(NaN);
	 * // => false
	 */

	var overSome = createOver(arraySome);

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$3 = 9007199254740991;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeFloor = Math.floor;
	/**
	 * The base implementation of `_.repeat` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {string} string The string to repeat.
	 * @param {number} n The number of times to repeat the string.
	 * @returns {string} Returns the repeated string.
	 */

	function baseRepeat(string, n) {
	  var result = '';

	  if (!string || n < 1 || n > MAX_SAFE_INTEGER$3) {
	    return result;
	  } // Leverage the exponentiation by squaring algorithm for a faster repeat.
	  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


	  do {
	    if (n % 2) {
	      result += string;
	    }

	    n = nativeFloor(n / 2);

	    if (n) {
	      string += string;
	    }
	  } while (n);

	  return result;
	}

	/**
	 * Gets the size of an ASCII `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */

	var asciiSize = baseProperty('length');

	/** Used to compose unicode character classes. */
	var rsAstralRange$3 = "\\ud800-\\udfff",
	    rsComboMarksRange$4 = "\\u0300-\\u036f",
	    reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
	    rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
	    rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
	    rsVarRange$3 = "\\ufe0e\\ufe0f";
	/** Used to compose unicode capture groups. */

	var rsAstral$1 = '[' + rsAstralRange$3 + ']',
	    rsCombo$3 = '[' + rsComboRange$4 + ']',
	    rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
	    rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
	    rsNonAstral$2 = '[^' + rsAstralRange$3 + ']',
	    rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
	    rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
	    rsZWJ$3 = "\\u200d";
	/** Used to compose unicode regexes. */

	var reOptMod$2 = rsModifier$2 + '?',
	    rsOptVar$2 = '[' + rsVarRange$3 + ']?',
	    rsOptJoin$2 = '(?:' + rsZWJ$3 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
	    rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
	    rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';
	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

	var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');
	/**
	 * Gets the size of a Unicode `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */

	function unicodeSize(string) {
	  var result = reUnicode$1.lastIndex = 0;

	  while (reUnicode$1.test(string)) {
	    ++result;
	  }

	  return result;
	}

	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */

	function stringSize(string) {
	  return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeCeil$1 = Math.ceil;
	/**
	 * Creates the padding for `string` based on `length`. The `chars` string
	 * is truncated if the number of characters exceeds `length`.
	 *
	 * @private
	 * @param {number} length The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padding for `string`.
	 */

	function createPadding(length, chars) {
	  chars = chars === undefined ? ' ' : baseToString(chars);
	  var charsLength = chars.length;

	  if (charsLength < 2) {
	    return charsLength ? baseRepeat(chars, length) : chars;
	  }

	  var result = baseRepeat(chars, nativeCeil$1(length / stringSize(chars)));
	  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeCeil$2 = Math.ceil,
	    nativeFloor$1 = Math.floor;
	/**
	 * Pads `string` on the left and right sides if it's shorter than `length`.
	 * Padding characters are truncated if they can't be evenly divided by `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.pad('abc', 8);
	 * // => '  abc   '
	 *
	 * _.pad('abc', 8, '_-');
	 * // => '_-abc_-_'
	 *
	 * _.pad('abc', 3);
	 * // => 'abc'
	 */

	function pad(string, length, chars) {
	  string = toString(string);
	  length = toInteger(length);
	  var strLength = length ? stringSize(string) : 0;

	  if (!length || strLength >= length) {
	    return string;
	  }

	  var mid = (length - strLength) / 2;
	  return createPadding(nativeFloor$1(mid), chars) + string + createPadding(nativeCeil$2(mid), chars);
	}

	/**
	 * Pads `string` on the right side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padEnd('abc', 6);
	 * // => 'abc   '
	 *
	 * _.padEnd('abc', 6, '_-');
	 * // => 'abc_-_'
	 *
	 * _.padEnd('abc', 3);
	 * // => 'abc'
	 */

	function padEnd(string, length, chars) {
	  string = toString(string);
	  length = toInteger(length);
	  var strLength = length ? stringSize(string) : 0;
	  return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
	}

	/**
	 * Pads `string` on the left side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padStart('abc', 6);
	 * // => '   abc'
	 *
	 * _.padStart('abc', 6, '_-');
	 * // => '_-_abc'
	 *
	 * _.padStart('abc', 3);
	 * // => 'abc'
	 */

	function padStart(string, length, chars) {
	  string = toString(string);
	  length = toInteger(length);
	  var strLength = length ? stringSize(string) : 0;
	  return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
	}

	/** Used to match leading and trailing whitespace. */

	var reTrimStart = /^\s+/;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeParseInt = root.parseInt;
	/**
	 * Converts `string` to an integer of the specified radix. If `radix` is
	 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	 * hexadecimal, in which case a `radix` of `16` is used.
	 *
	 * **Note:** This method aligns with the
	 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category String
	 * @param {string} string The string to convert.
	 * @param {number} [radix=10] The radix to interpret `value` by.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.parseInt('08');
	 * // => 8
	 *
	 * _.map(['6', '08', '10'], _.parseInt);
	 * // => [6, 8, 10]
	 */

	function parseInt$1(string, radix, guard) {
	  if (guard || radix == null) {
	    radix = 0;
	  } else if (radix) {
	    radix = +radix;
	  }

	  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	}

	/** Used to compose bitmasks for function metadata. */

	var WRAP_PARTIAL_FLAG$6 = 32;
	/**
	 * Creates a function that invokes `func` with `partials` prepended to the
	 * arguments it receives. This method is like `_.bind` except it does **not**
	 * alter the `this` binding.
	 *
	 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of partially
	 * applied functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.2.0
	 * @category Function
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new partially applied function.
	 * @example
	 *
	 * function greet(greeting, name) {
	 *   return greeting + ' ' + name;
	 * }
	 *
	 * var sayHelloTo = _.partial(greet, 'hello');
	 * sayHelloTo('fred');
	 * // => 'hello fred'
	 *
	 * // Partially applied with placeholders.
	 * var greetFred = _.partial(greet, _, 'fred');
	 * greetFred('hi');
	 * // => 'hi fred'
	 */

	var partial = baseRest(function (func, partials) {
	  var holders = replaceHolders(partials, getHolder(partial));
	  return createWrap(func, WRAP_PARTIAL_FLAG$6, undefined, partials, holders);
	}); // Assign default placeholders.

	partial.placeholder = {};

	/** Used to compose bitmasks for function metadata. */

	var WRAP_PARTIAL_RIGHT_FLAG$3 = 64;
	/**
	 * This method is like `_.partial` except that partially applied arguments
	 * are appended to the arguments it receives.
	 *
	 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of partially
	 * applied functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Function
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new partially applied function.
	 * @example
	 *
	 * function greet(greeting, name) {
	 *   return greeting + ' ' + name;
	 * }
	 *
	 * var greetFred = _.partialRight(greet, 'fred');
	 * greetFred('hi');
	 * // => 'hi fred'
	 *
	 * // Partially applied with placeholders.
	 * var sayHelloTo = _.partialRight(greet, 'hello', _);
	 * sayHelloTo('fred');
	 * // => 'hello fred'
	 */

	var partialRight = baseRest(function (func, partials) {
	  var holders = replaceHolders(partials, getHolder(partialRight));
	  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG$3, undefined, partials, holders);
	}); // Assign default placeholders.

	partialRight.placeholder = {};

	/**
	 * Creates an array of elements split into two groups, the first of which
	 * contains elements `predicate` returns truthy for, the second of which
	 * contains elements `predicate` returns falsey for. The predicate is
	 * invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the array of grouped elements.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': false },
	 *   { 'user': 'fred',    'age': 40, 'active': true },
	 *   { 'user': 'pebbles', 'age': 1,  'active': false }
	 * ];
	 *
	 * _.partition(users, function(o) { return o.active; });
	 * // => objects for [['fred'], ['barney', 'pebbles']]
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.partition(users, { 'age': 1, 'active': false });
	 * // => objects for [['pebbles'], ['barney', 'fred']]
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.partition(users, ['active', false]);
	 * // => objects for [['barney', 'pebbles'], ['fred']]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.partition(users, 'active');
	 * // => objects for [['fred'], ['barney', 'pebbles']]
	 */

	var partition = createAggregator(function (result, value, key) {
	  result[key ? 0 : 1].push(value);
	}, function () {
	  return [[], []];
	});

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */

	function basePick(object, paths) {
	  return basePickBy(object, paths, function (value, path) {
	    return hasIn(object, path);
	  });
	}

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */

	var pick = flatRest(function (object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});

	/**
	 * Creates a clone of the chain sequence planting `value` as the wrapped value.
	 *
	 * @name plant
	 * @memberOf _
	 * @since 3.2.0
	 * @category Seq
	 * @param {*} value The value to plant.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2]).map(square);
	 * var other = wrapped.plant([3, 4]);
	 *
	 * other.value();
	 * // => [9, 16]
	 *
	 * wrapped.value();
	 * // => [1, 4]
	 */

	function wrapperPlant(value) {
	  var result,
	      parent = this;

	  while (parent instanceof baseLodash) {
	    var clone = wrapperClone(parent);
	    clone.__index__ = 0;
	    clone.__values__ = undefined;

	    if (result) {
	      previous.__wrapped__ = clone;
	    } else {
	      result = clone;
	    }

	    var previous = clone;
	    parent = parent.__wrapped__;
	  }

	  previous.__wrapped__ = value;
	  return result;
	}

	/**
	 * The opposite of `_.property`; this method creates a function that returns
	 * the value at a given path of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var array = [0, 1, 2],
	 *     object = { 'a': array, 'b': array, 'c': array };
	 *
	 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	 * // => [2, 0]
	 *
	 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	 * // => [2, 0]
	 */

	function propertyOf(object) {
	  return function (path) {
	    return object == null ? undefined : baseGet(object, path);
	  };
	}

	/**
	 * This function is like `baseIndexOf` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOfWith(array, value, fromIndex, comparator) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (comparator(array[index], value)) {
	      return index;
	    }
	  }

	  return -1;
	}

	/** Used for built-in method references. */

	var arrayProto$2 = Array.prototype;
	/** Built-in value references. */

	var splice$1 = arrayProto$2.splice;
	/**
	 * The base implementation of `_.pullAllBy` without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to remove.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns `array`.
	 */

	function basePullAll(array, values, iteratee, comparator) {
	  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	      index = -1,
	      length = values.length,
	      seen = array;

	  if (array === values) {
	    values = copyArray(values);
	  }

	  if (iteratee) {
	    seen = arrayMap(array, baseUnary(iteratee));
	  }

	  while (++index < length) {
	    var fromIndex = 0,
	        value = values[index],
	        computed = iteratee ? iteratee(value) : value;

	    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	      if (seen !== array) {
	        splice$1.call(seen, fromIndex, 1);
	      }

	      splice$1.call(array, fromIndex, 1);
	    }
	  }

	  return array;
	}

	/**
	 * This method is like `_.pull` except that it accepts an array of values to remove.
	 *
	 * **Note:** Unlike `_.difference`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	 *
	 * _.pullAll(array, ['a', 'c']);
	 * console.log(array);
	 * // => ['b', 'b']
	 */

	function pullAll(array, values) {
	  return array && array.length && values && values.length ? basePullAll(array, values) : array;
	}

	/**
	 * Removes all given values from `array` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	 * to remove elements from an array by predicate.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...*} [values] The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	 *
	 * _.pull(array, 'a', 'c');
	 * console.log(array);
	 * // => ['b', 'b']
	 */

	var pull = baseRest(pullAll);

	/**
	 * This method is like `_.pullAll` except that it accepts `iteratee` which is
	 * invoked for each element of `array` and `values` to generate the criterion
	 * by which they're compared. The iteratee is invoked with one argument: (value).
	 *
	 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to remove.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	 *
	 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	 * console.log(array);
	 * // => [{ 'x': 2 }]
	 */

	function pullAllBy(array, values, iteratee) {
	  return array && array.length && values && values.length ? basePullAll(array, values, baseIteratee(iteratee, 2)) : array;
	}

	/**
	 * This method is like `_.pullAll` except that it accepts `comparator` which
	 * is invoked to compare elements of `array` to `values`. The comparator is
	 * invoked with two arguments: (arrVal, othVal).
	 *
	 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to remove.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	 *
	 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	 * console.log(array);
	 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	 */

	function pullAllWith(array, values, comparator) {
	  return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
	}

	/** Used for built-in method references. */

	var arrayProto$3 = Array.prototype;
	/** Built-in value references. */

	var splice$2 = arrayProto$3.splice;
	/**
	 * The base implementation of `_.pullAt` without support for individual
	 * indexes or capturing the removed elements.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {number[]} indexes The indexes of elements to remove.
	 * @returns {Array} Returns `array`.
	 */

	function basePullAt(array, indexes) {
	  var length = array ? indexes.length : 0,
	      lastIndex = length - 1;

	  while (length--) {
	    var index = indexes[length];

	    if (length == lastIndex || index !== previous) {
	      var previous = index;

	      if (isIndex(index)) {
	        splice$2.call(array, index, 1);
	      } else {
	        baseUnset(array, index);
	      }
	    }
	  }

	  return array;
	}

	/**
	 * Removes elements from `array` corresponding to `indexes` and returns an
	 * array of removed elements.
	 *
	 * **Note:** Unlike `_.at`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	 * @returns {Array} Returns the new array of removed elements.
	 * @example
	 *
	 * var array = ['a', 'b', 'c', 'd'];
	 * var pulled = _.pullAt(array, [1, 3]);
	 *
	 * console.log(array);
	 * // => ['a', 'c']
	 *
	 * console.log(pulled);
	 * // => ['b', 'd']
	 */

	var pullAt = flatRest(function (array, indexes) {
	  var length = array == null ? 0 : array.length,
	      result = baseAt(array, indexes);
	  basePullAt(array, arrayMap(indexes, function (index) {
	    return isIndex(index, length) ? +index : index;
	  }).sort(compareAscending));
	  return result;
	});

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeFloor$2 = Math.floor,
	    nativeRandom = Math.random;
	/**
	 * The base implementation of `_.random` without support for returning
	 * floating-point numbers.
	 *
	 * @private
	 * @param {number} lower The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the random number.
	 */

	function baseRandom(lower, upper) {
	  return lower + nativeFloor$2(nativeRandom() * (upper - lower + 1));
	}

	/** Built-in method references without a dependency on `root`. */

	var freeParseFloat = parseFloat;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$9 = Math.min,
	    nativeRandom$1 = Math.random;
	/**
	 * Produces a random number between the inclusive `lower` and `upper` bounds.
	 * If only one argument is provided a number between `0` and the given number
	 * is returned. If `floating` is `true`, or either `lower` or `upper` are
	 * floats, a floating-point number is returned instead of an integer.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.7.0
	 * @category Number
	 * @param {number} [lower=0] The lower bound.
	 * @param {number} [upper=1] The upper bound.
	 * @param {boolean} [floating] Specify returning a floating-point number.
	 * @returns {number} Returns the random number.
	 * @example
	 *
	 * _.random(0, 5);
	 * // => an integer between 0 and 5
	 *
	 * _.random(5);
	 * // => also an integer between 0 and 5
	 *
	 * _.random(5, true);
	 * // => a floating-point number between 0 and 5
	 *
	 * _.random(1.2, 5.2);
	 * // => a floating-point number between 1.2 and 5.2
	 */

	function random(lower, upper, floating) {
	  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	    upper = floating = undefined;
	  }

	  if (floating === undefined) {
	    if (typeof upper == 'boolean') {
	      floating = upper;
	      upper = undefined;
	    } else if (typeof lower == 'boolean') {
	      floating = lower;
	      lower = undefined;
	    }
	  }

	  if (lower === undefined && upper === undefined) {
	    lower = 0;
	    upper = 1;
	  } else {
	    lower = toFinite(lower);

	    if (upper === undefined) {
	      upper = lower;
	      lower = 0;
	    } else {
	      upper = toFinite(upper);
	    }
	  }

	  if (lower > upper) {
	    var temp = lower;
	    lower = upper;
	    upper = temp;
	  }

	  if (floating || lower % 1 || upper % 1) {
	    var rand = nativeRandom$1();
	    return nativeMin$9(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
	  }

	  return baseRandom(lower, upper);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil$3 = Math.ceil,
	    nativeMax$c = Math.max;
	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */

	function baseRange(start, end, step, fromRight) {
	  var index = -1,
	      length = nativeMax$c(nativeCeil$3((end - start) / (step || 1)), 0),
	      result = Array(length);

	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }

	  return result;
	}

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */

	function createRange(fromRight) {
	  return function (start, end, step) {
	    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    } // Ensure the sign of `-0` is preserved.


	    start = toFinite(start);

	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite(end);
	    }

	    step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
	    return baseRange(start, end, step, fromRight);
	  };
	}

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */

	var range = createRange();

	/**
	 * This method is like `_.range` except that it populates values in
	 * descending order.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.range
	 * @example
	 *
	 * _.rangeRight(4);
	 * // => [3, 2, 1, 0]
	 *
	 * _.rangeRight(-4);
	 * // => [-3, -2, -1, 0]
	 *
	 * _.rangeRight(1, 5);
	 * // => [4, 3, 2, 1]
	 *
	 * _.rangeRight(0, 20, 5);
	 * // => [15, 10, 5, 0]
	 *
	 * _.rangeRight(0, -4, -1);
	 * // => [-3, -2, -1, 0]
	 *
	 * _.rangeRight(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.rangeRight(0);
	 * // => []
	 */

	var rangeRight = createRange(true);

	/** Used to compose bitmasks for function metadata. */

	var WRAP_REARG_FLAG$3 = 256;
	/**
	 * Creates a function that invokes `func` with arguments arranged according
	 * to the specified `indexes` where the argument value at the first index is
	 * provided as the first argument, the argument value at the second index is
	 * provided as the second argument, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to rearrange arguments for.
	 * @param {...(number|number[])} indexes The arranged argument indexes.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var rearged = _.rearg(function(a, b, c) {
	 *   return [a, b, c];
	 * }, [2, 0, 1]);
	 *
	 * rearged('b', 'c', 'a')
	 * // => ['a', 'b', 'c']
	 */

	var rearg = flatRest(function (func, indexes) {
	  return createWrap(func, WRAP_REARG_FLAG$3, undefined, undefined, undefined, indexes);
	});

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function (value, index, collection) {
	    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */

	function reduce(collection, iteratee, accumulator) {
	  var func = isArray(collection) ? arrayReduce : baseReduce,
	      initAccum = arguments.length < 3;
	  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	/**
	 * A specialized version of `_.reduceRight` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the last element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	  var length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[--length];
	  }

	  while (length--) {
	    accumulator = iteratee(accumulator, array[length], length, array);
	  }

	  return accumulator;
	}

	/**
	 * This method is like `_.reduce` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduce
	 * @example
	 *
	 * var array = [[0, 1], [2, 3], [4, 5]];
	 *
	 * _.reduceRight(array, function(flattened, other) {
	 *   return flattened.concat(other);
	 * }, []);
	 * // => [4, 5, 2, 3, 0, 1]
	 */

	function reduceRight(collection, iteratee, accumulator) {
	  var func = isArray(collection) ? arrayReduceRight : baseReduce,
	      initAccum = arguments.length < 3;
	  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	}

	/**
	 * The opposite of `_.filter`; this method returns the elements of `collection`
	 * that `predicate` does **not** return truthy for.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.filter
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': true }
	 * ];
	 *
	 * _.reject(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.reject(users, { 'age': 40, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.reject(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.reject(users, 'active');
	 * // => objects for ['barney']
	 */

	function reject(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, negate(baseIteratee(predicate, 3)));
	}

	/**
	 * Removes all elements from `array` that `predicate` returns truthy for
	 * and returns an array of the removed elements. The predicate is invoked
	 * with three arguments: (value, index, array).
	 *
	 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	 * to pull elements from an array by value.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new array of removed elements.
	 * @example
	 *
	 * var array = [1, 2, 3, 4];
	 * var evens = _.remove(array, function(n) {
	 *   return n % 2 == 0;
	 * });
	 *
	 * console.log(array);
	 * // => [1, 3]
	 *
	 * console.log(evens);
	 * // => [2, 4]
	 */

	function remove(array, predicate) {
	  var result = [];

	  if (!(array && array.length)) {
	    return result;
	  }

	  var index = -1,
	      indexes = [],
	      length = array.length;
	  predicate = baseIteratee(predicate, 3);

	  while (++index < length) {
	    var value = array[index];

	    if (predicate(value, index, array)) {
	      result.push(value);
	      indexes.push(index);
	    }
	  }

	  basePullAt(array, indexes);
	  return result;
	}

	/**
	 * Repeats the given string `n` times.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to repeat.
	 * @param {number} [n=1] The number of times to repeat the string.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {string} Returns the repeated string.
	 * @example
	 *
	 * _.repeat('*', 3);
	 * // => '***'
	 *
	 * _.repeat('abc', 2);
	 * // => 'abcabc'
	 *
	 * _.repeat('abc', 0);
	 * // => ''
	 */

	function repeat(string, n, guard) {
	  if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
	    n = 1;
	  } else {
	    n = toInteger(n);
	  }

	  return baseRepeat(toString(string), n);
	}

	/**
	 * Replaces matches for `pattern` in `string` with `replacement`.
	 *
	 * **Note:** This method is based on
	 * [`String#replace`](https://mdn.io/String/replace).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to modify.
	 * @param {RegExp|string} pattern The pattern to replace.
	 * @param {Function|string} replacement The match replacement.
	 * @returns {string} Returns the modified string.
	 * @example
	 *
	 * _.replace('Hi Fred', 'Fred', 'Barney');
	 * // => 'Hi Barney'
	 */

	function replace() {
	  var args = arguments,
	      string = toString(args[0]);
	  return args.length < 3 ? string : string.replace(args[1], args[2]);
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT$9 = 'Expected a function';
	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as
	 * an array.
	 *
	 * **Note:** This method is based on the
	 * [rest parameter](https://mdn.io/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.rest(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */

	function rest(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$9);
	  }

	  start = start === undefined ? start : toInteger(start);
	  return baseRest(func, start);
	}

	/**
	 * This method is like `_.get` except that if the resolved value is a
	 * function it's invoked with the `this` binding of its parent object and
	 * its result is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to resolve.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	 *
	 * _.result(object, 'a[0].b.c1');
	 * // => 3
	 *
	 * _.result(object, 'a[0].b.c2');
	 * // => 4
	 *
	 * _.result(object, 'a[0].b.c3', 'default');
	 * // => 'default'
	 *
	 * _.result(object, 'a[0].b.c3', _.constant('default'));
	 * // => 'default'
	 */

	function result(object, path, defaultValue) {
	  path = castPath(path, object);
	  var index = -1,
	      length = path.length; // Ensure the loop is entered when path is empty.

	  if (!length) {
	    length = 1;
	    object = undefined;
	  }

	  while (++index < length) {
	    var value = object == null ? undefined : object[toKey(path[index])];

	    if (value === undefined) {
	      index = length;
	      value = defaultValue;
	    }

	    object = isFunction(value) ? value.call(object) : value;
	  }

	  return object;
	}

	/** Used for built-in method references. */
	var arrayProto$4 = Array.prototype;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeReverse = arrayProto$4.reverse;
	/**
	 * Reverses `array` so that the first element becomes the last, the second
	 * element becomes the second to last, and so on.
	 *
	 * **Note:** This method mutates `array` and is based on
	 * [`Array#reverse`](https://mdn.io/Array/reverse).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3];
	 *
	 * _.reverse(array);
	 * // => [3, 2, 1]
	 *
	 * console.log(array);
	 * // => [3, 2, 1]
	 */

	function reverse(array) {
	  return array == null ? array : nativeReverse.call(array);
	}

	/**
	 * Computes `number` rounded to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round.
	 * @param {number} [precision=0] The precision to round to.
	 * @returns {number} Returns the rounded number.
	 * @example
	 *
	 * _.round(4.006);
	 * // => 4
	 *
	 * _.round(4.006, 2);
	 * // => 4.01
	 *
	 * _.round(4060, -2);
	 * // => 4100
	 */

	var round = createRound('round');

	/**
	 * A specialized version of `_.sample` for arrays.
	 *
	 * @private
	 * @param {Array} array The array to sample.
	 * @returns {*} Returns the random element.
	 */

	function arraySample(array) {
	  var length = array.length;
	  return length ? array[baseRandom(0, length - 1)] : undefined;
	}

	/**
	 * The base implementation of `_.sample`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to sample.
	 * @returns {*} Returns the random element.
	 */

	function baseSample(collection) {
	  return arraySample(values(collection));
	}

	/**
	 * Gets a random element from `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to sample.
	 * @returns {*} Returns the random element.
	 * @example
	 *
	 * _.sample([1, 2, 3, 4]);
	 * // => 2
	 */

	function sample(collection) {
	  var func = isArray(collection) ? arraySample : baseSample;
	  return func(collection);
	}

	/**
	 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	 *
	 * @private
	 * @param {Array} array The array to shuffle.
	 * @param {number} [size=array.length] The size of `array`.
	 * @returns {Array} Returns `array`.
	 */

	function shuffleSelf(array, size) {
	  var index = -1,
	      length = array.length,
	      lastIndex = length - 1;
	  size = size === undefined ? length : size;

	  while (++index < size) {
	    var rand = baseRandom(index, lastIndex),
	        value = array[rand];
	    array[rand] = array[index];
	    array[index] = value;
	  }

	  array.length = size;
	  return array;
	}

	/**
	 * A specialized version of `_.sampleSize` for arrays.
	 *
	 * @private
	 * @param {Array} array The array to sample.
	 * @param {number} n The number of elements to sample.
	 * @returns {Array} Returns the random elements.
	 */

	function arraySampleSize(array, n) {
	  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	}

	/**
	 * The base implementation of `_.sampleSize` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to sample.
	 * @param {number} n The number of elements to sample.
	 * @returns {Array} Returns the random elements.
	 */

	function baseSampleSize(collection, n) {
	  var array = values(collection);
	  return shuffleSelf(array, baseClamp(n, 0, array.length));
	}

	/**
	 * Gets `n` random elements at unique keys from `collection` up to the
	 * size of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to sample.
	 * @param {number} [n=1] The number of elements to sample.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the random elements.
	 * @example
	 *
	 * _.sampleSize([1, 2, 3], 2);
	 * // => [3, 1]
	 *
	 * _.sampleSize([1, 2, 3], 4);
	 * // => [2, 3, 1]
	 */

	function sampleSize(collection, n, guard) {
	  if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
	    n = 1;
	  } else {
	    n = toInteger(n);
	  }

	  var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	  return func(collection, n);
	}

	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `_.setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, ['x', '0', 'y', 'z'], 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */

	function set(object, path, value) {
	  return object == null ? object : baseSet(object, path, value);
	}

	/**
	 * This method is like `_.set` except that it accepts `customizer` which is
	 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	 * path creation is handled by the method instead. The `customizer` is invoked
	 * with three arguments: (nsValue, key, nsObject).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {};
	 *
	 * _.setWith(object, '[0][1]', 'a', Object);
	 * // => { '0': { '1': 'a' } }
	 */

	function setWith(object, path, value, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return object == null ? object : baseSet(object, path, value, customizer);
	}

	/**
	 * A specialized version of `_.shuffle` for arrays.
	 *
	 * @private
	 * @param {Array} array The array to shuffle.
	 * @returns {Array} Returns the new shuffled array.
	 */

	function arrayShuffle(array) {
	  return shuffleSelf(copyArray(array));
	}

	/**
	 * The base implementation of `_.shuffle`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to shuffle.
	 * @returns {Array} Returns the new shuffled array.
	 */

	function baseShuffle(collection) {
	  return shuffleSelf(values(collection));
	}

	/**
	 * Creates an array of shuffled values, using a version of the
	 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to shuffle.
	 * @returns {Array} Returns the new shuffled array.
	 * @example
	 *
	 * _.shuffle([1, 2, 3, 4]);
	 * // => [4, 1, 3, 2]
	 */

	function shuffle(collection) {
	  var func = isArray(collection) ? arrayShuffle : baseShuffle;
	  return func(collection);
	}

	/** `Object#toString` result references. */

	var mapTag$9 = '[object Map]',
	    setTag$9 = '[object Set]';
	/**
	 * Gets the size of `collection` by returning its length for array-like
	 * values or the number of own enumerable string keyed properties for objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @returns {number} Returns the collection size.
	 * @example
	 *
	 * _.size([1, 2, 3]);
	 * // => 3
	 *
	 * _.size({ 'a': 1, 'b': 2 });
	 * // => 2
	 *
	 * _.size('pebbles');
	 * // => 7
	 */

	function size(collection) {
	  if (collection == null) {
	    return 0;
	  }

	  if (isArrayLike(collection)) {
	    return isString(collection) ? stringSize(collection) : collection.length;
	  }

	  var tag = getTag$1(collection);

	  if (tag == mapTag$9 || tag == setTag$9) {
	    return collection.size;
	  }

	  return baseKeys(collection).length;
	}

	/**
	 * Creates a slice of `array` from `start` up to, but not including, `end`.
	 *
	 * **Note:** This method is used instead of
	 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	 * returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */

	function slice(array, start, end) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	    start = 0;
	    end = length;
	  } else {
	    start = start == null ? 0 : toInteger(start);
	    end = end === undefined ? length : toInteger(end);
	  }

	  return baseSlice(array, start, end);
	}

	/**
	 * Converts `string` to
	 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the snake cased string.
	 * @example
	 *
	 * _.snakeCase('Foo Bar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('fooBar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('--FOO-BAR--');
	 * // => 'foo_bar'
	 */

	var snakeCase = createCompounder(function (result, word, index) {
	  return result + (index ? '_' : '') + word.toLowerCase();
	});

	/**
	 * The base implementation of `_.some` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */

	function baseSome(collection, predicate) {
	  var result;
	  baseEach(collection, function (value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}

	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * Iteration is stopped once `predicate` returns truthy. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.some(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.some(users, 'active');
	 * // => true
	 */

	function some(collection, predicate, guard) {
	  var func = isArray(collection) ? arraySome : baseSome;

	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }

	  return func(collection, baseIteratee(predicate, 3));
	}

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */

	var sortBy = baseRest(function (collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }

	  var length = iteratees.length;

	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }

	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$2 = 4294967295,
	    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH$2 - 1;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeFloor$3 = Math.floor,
	    nativeMin$a = Math.min;
	/**
	 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	 * which invokes `iteratee` for `value` and each element of `array` to compute
	 * their sort ranking. The iteratee is invoked with one argument; (value).
	 *
	 * @private
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function} iteratee The iteratee invoked per element.
	 * @param {boolean} [retHighest] Specify returning the highest qualified index.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 */

	function baseSortedIndexBy(array, value, iteratee, retHighest) {
	  value = iteratee(value);
	  var low = 0,
	      high = array == null ? 0 : array.length,
	      valIsNaN = value !== value,
	      valIsNull = value === null,
	      valIsSymbol = isSymbol(value),
	      valIsUndefined = value === undefined;

	  while (low < high) {
	    var mid = nativeFloor$3((low + high) / 2),
	        computed = iteratee(array[mid]),
	        othIsDefined = computed !== undefined,
	        othIsNull = computed === null,
	        othIsReflexive = computed === computed,
	        othIsSymbol = isSymbol(computed);

	    if (valIsNaN) {
	      var setLow = retHighest || othIsReflexive;
	    } else if (valIsUndefined) {
	      setLow = othIsReflexive && (retHighest || othIsDefined);
	    } else if (valIsNull) {
	      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	    } else if (valIsSymbol) {
	      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	    } else if (othIsNull || othIsSymbol) {
	      setLow = false;
	    } else {
	      setLow = retHighest ? computed <= value : computed < value;
	    }

	    if (setLow) {
	      low = mid + 1;
	    } else {
	      high = mid;
	    }
	  }

	  return nativeMin$a(high, MAX_ARRAY_INDEX);
	}

	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$3 = 4294967295,
	    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH$3 >>> 1;
	/**
	 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	 * performs a binary search of `array` to determine the index at which `value`
	 * should be inserted into `array` in order to maintain its sort order.
	 *
	 * @private
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {boolean} [retHighest] Specify returning the highest qualified index.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 */

	function baseSortedIndex(array, value, retHighest) {
	  var low = 0,
	      high = array == null ? low : array.length;

	  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	    while (low < high) {
	      var mid = low + high >>> 1,
	          computed = array[mid];

	      if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
	        low = mid + 1;
	      } else {
	        high = mid;
	      }
	    }

	    return high;
	  }

	  return baseSortedIndexBy(array, value, identity, retHighest);
	}

	/**
	 * Uses a binary search to determine the lowest index at which `value`
	 * should be inserted into `array` in order to maintain its sort order.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * _.sortedIndex([30, 50], 40);
	 * // => 1
	 */

	function sortedIndex(array, value) {
	  return baseSortedIndex(array, value);
	}

	/**
	 * This method is like `_.sortedIndex` except that it accepts `iteratee`
	 * which is invoked for `value` and each element of `array` to compute their
	 * sort ranking. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * var objects = [{ 'x': 4 }, { 'x': 5 }];
	 *
	 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	 * // => 0
	 */

	function sortedIndexBy(array, value, iteratee) {
	  return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2));
	}

	/**
	 * This method is like `_.indexOf` except that it performs a binary
	 * search on a sorted `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	 * // => 1
	 */

	function sortedIndexOf(array, value) {
	  var length = array == null ? 0 : array.length;

	  if (length) {
	    var index = baseSortedIndex(array, value);

	    if (index < length && eq(array[index], value)) {
	      return index;
	    }
	  }

	  return -1;
	}

	/**
	 * This method is like `_.sortedIndex` except that it returns the highest
	 * index at which `value` should be inserted into `array` in order to
	 * maintain its sort order.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	 * // => 4
	 */

	function sortedLastIndex(array, value) {
	  return baseSortedIndex(array, value, true);
	}

	/**
	 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	 * which is invoked for `value` and each element of `array` to compute their
	 * sort ranking. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * var objects = [{ 'x': 4 }, { 'x': 5 }];
	 *
	 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	 * // => 1
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	 * // => 1
	 */

	function sortedLastIndexBy(array, value, iteratee) {
	  return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2), true);
	}

	/**
	 * This method is like `_.lastIndexOf` except that it performs a binary
	 * search on a sorted `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	 * // => 3
	 */

	function sortedLastIndexOf(array, value) {
	  var length = array == null ? 0 : array.length;

	  if (length) {
	    var index = baseSortedIndex(array, value, true) - 1;

	    if (eq(array[index], value)) {
	      return index;
	    }
	  }

	  return -1;
	}

	/**
	 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */

	function baseSortedUniq(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    if (!index || !eq(computed, seen)) {
	      var seen = computed;
	      result[resIndex++] = value === 0 ? 0 : value;
	    }
	  }

	  return result;
	}

	/**
	 * This method is like `_.uniq` except that it's designed and optimized
	 * for sorted arrays.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.sortedUniq([1, 1, 2]);
	 * // => [1, 2]
	 */

	function sortedUniq(array) {
	  return array && array.length ? baseSortedUniq(array) : [];
	}

	/**
	 * This method is like `_.uniqBy` except that it's designed and optimized
	 * for sorted arrays.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	 * // => [1.1, 2.3]
	 */

	function sortedUniqBy(array, iteratee) {
	  return array && array.length ? baseSortedUniq(array, baseIteratee(iteratee, 2)) : [];
	}

	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$4 = 4294967295;
	/**
	 * Splits `string` by `separator`.
	 *
	 * **Note:** This method is based on
	 * [`String#split`](https://mdn.io/String/split).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to split.
	 * @param {RegExp|string} separator The separator pattern to split by.
	 * @param {number} [limit] The length to truncate results to.
	 * @returns {Array} Returns the string segments.
	 * @example
	 *
	 * _.split('a-b-c', '-', 2);
	 * // => ['a', 'b']
	 */

	function split(string, separator, limit) {
	  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	    separator = limit = undefined;
	  }

	  limit = limit === undefined ? MAX_ARRAY_LENGTH$4 : limit >>> 0;

	  if (!limit) {
	    return [];
	  }

	  string = toString(string);

	  if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
	    separator = baseToString(separator);

	    if (!separator && hasUnicode(string)) {
	      return castSlice(stringToArray(string), 0, limit);
	    }
	  }

	  return string.split(separator, limit);
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT$a = 'Expected a function';
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$d = Math.max;
	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * create function and an array of arguments much like
	 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	 *
	 * **Note:** This method is based on the
	 * [spread operator](https://mdn.io/spread_operator).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.2.0
	 * @category Function
	 * @param {Function} func The function to spread arguments over.
	 * @param {number} [start=0] The start position of the spread.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.spread(function(who, what) {
	 *   return who + ' says ' + what;
	 * });
	 *
	 * say(['fred', 'hello']);
	 * // => 'fred says hello'
	 *
	 * var numbers = Promise.all([
	 *   Promise.resolve(40),
	 *   Promise.resolve(36)
	 * ]);
	 *
	 * numbers.then(_.spread(function(x, y) {
	 *   return x + y;
	 * }));
	 * // => a Promise of 76
	 */

	function spread(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$a);
	  }

	  start = start == null ? 0 : nativeMax$d(toInteger(start), 0);
	  return baseRest(function (args) {
	    var array = args[start],
	        otherArgs = castSlice(args, 0, start);

	    if (array) {
	      arrayPush(otherArgs, array);
	    }

	    return apply(func, this, otherArgs);
	  });
	}

	/**
	 * Converts `string` to
	 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.1.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the start cased string.
	 * @example
	 *
	 * _.startCase('--foo-bar--');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('fooBar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('__FOO_BAR__');
	 * // => 'FOO BAR'
	 */

	var startCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + upperFirst(word);
	});

	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`,
	 *  else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */

	function startsWith(string, target, position) {
	  string = toString(string);
	  position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
	  target = baseToString(target);
	  return string.slice(position, position + target.length) == target;
	}

	/**
	 * This method returns a new empty object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Object} Returns the new empty object.
	 * @example
	 *
	 * var objects = _.times(2, _.stubObject);
	 *
	 * console.log(objects);
	 * // => [{}, {}]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => false
	 */
	function stubObject() {
	  return {};
	}

	/**
	 * This method returns an empty string.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {string} Returns the empty string.
	 * @example
	 *
	 * _.times(2, _.stubString);
	 * // => ['', '']
	 */
	function stubString() {
	  return '';
	}

	/**
	 * This method returns `true`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `true`.
	 * @example
	 *
	 * _.times(2, _.stubTrue);
	 * // => [true, true]
	 */
	function stubTrue() {
	  return true;
	}

	/**
	 * Subtract two numbers.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {number} minuend The first number in a subtraction.
	 * @param {number} subtrahend The second number in a subtraction.
	 * @returns {number} Returns the difference.
	 * @example
	 *
	 * _.subtract(6, 4);
	 * // => 2
	 */

	var subtract = createMathOperation(function (minuend, subtrahend) {
	  return minuend - subtrahend;
	}, 0);

	/**
	 * Computes the sum of the values in `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.4.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * _.sum([4, 2, 8, 6]);
	 * // => 20
	 */

	function sum(array) {
	  return array && array.length ? baseSum(array, identity) : 0;
	}

	/**
	 * This method is like `_.sum` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the value to be summed.
	 * The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	 *
	 * _.sumBy(objects, function(o) { return o.n; });
	 * // => 20
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.sumBy(objects, 'n');
	 * // => 20
	 */

	function sumBy(array, iteratee) {
	  return array && array.length ? baseSum(array, baseIteratee(iteratee, 2)) : 0;
	}

	/**
	 * Gets all but the first element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.tail([1, 2, 3]);
	 * // => [2, 3]
	 */

	function tail(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseSlice(array, 1, length) : [];
	}

	/**
	 * Creates a slice of `array` with `n` elements taken from the beginning.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to take.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.take([1, 2, 3]);
	 * // => [1]
	 *
	 * _.take([1, 2, 3], 2);
	 * // => [1, 2]
	 *
	 * _.take([1, 2, 3], 5);
	 * // => [1, 2, 3]
	 *
	 * _.take([1, 2, 3], 0);
	 * // => []
	 */

	function take(array, n, guard) {
	  if (!(array && array.length)) {
	    return [];
	  }

	  n = guard || n === undefined ? 1 : toInteger(n);
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}

	/**
	 * Creates a slice of `array` with `n` elements taken from the end.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to take.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.takeRight([1, 2, 3]);
	 * // => [3]
	 *
	 * _.takeRight([1, 2, 3], 2);
	 * // => [2, 3]
	 *
	 * _.takeRight([1, 2, 3], 5);
	 * // => [1, 2, 3]
	 *
	 * _.takeRight([1, 2, 3], 0);
	 * // => []
	 */

	function takeRight(array, n, guard) {
	  var length = array == null ? 0 : array.length;

	  if (!length) {
	    return [];
	  }

	  n = guard || n === undefined ? 1 : toInteger(n);
	  n = length - n;
	  return baseSlice(array, n < 0 ? 0 : n, length);
	}

	/**
	 * Creates a slice of `array` with elements taken from the end. Elements are
	 * taken until `predicate` returns falsey. The predicate is invoked with
	 * three arguments: (value, index, array).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * _.takeRightWhile(users, function(o) { return !o.active; });
	 * // => objects for ['fred', 'pebbles']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	 * // => objects for ['pebbles']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.takeRightWhile(users, ['active', false]);
	 * // => objects for ['fred', 'pebbles']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.takeRightWhile(users, 'active');
	 * // => []
	 */

	function takeRightWhile(array, predicate) {
	  return array && array.length ? baseWhile(array, baseIteratee(predicate, 3), false, true) : [];
	}

	/**
	 * Creates a slice of `array` with elements taken from the beginning. Elements
	 * are taken until `predicate` returns falsey. The predicate is invoked with
	 * three arguments: (value, index, array).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.takeWhile(users, function(o) { return !o.active; });
	 * // => objects for ['barney', 'fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.takeWhile(users, { 'user': 'barney', 'active': false });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.takeWhile(users, ['active', false]);
	 * // => objects for ['barney', 'fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.takeWhile(users, 'active');
	 * // => []
	 */

	function takeWhile(array, predicate) {
	  return array && array.length ? baseWhile(array, baseIteratee(predicate, 3)) : [];
	}

	/**
	 * This method invokes `interceptor` and returns `value`. The interceptor
	 * is invoked with one argument; (value). The purpose of this method is to
	 * "tap into" a method chain sequence in order to modify intermediate results.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Seq
	 * @param {*} value The value to provide to `interceptor`.
	 * @param {Function} interceptor The function to invoke.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * _([1, 2, 3])
	 *  .tap(function(array) {
	 *    // Mutate input array.
	 *    array.pop();
	 *  })
	 *  .reverse()
	 *  .value();
	 * // => [2, 1]
	 */
	function tap(value, interceptor) {
	  interceptor(value);
	  return value;
	}

	/** Used for built-in method references. */

	var objectProto$q = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$m = objectProto$q.hasOwnProperty;
	/**
	 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	 * of source objects to the destination object for all destination properties
	 * that resolve to `undefined`.
	 *
	 * @private
	 * @param {*} objValue The destination value.
	 * @param {*} srcValue The source value.
	 * @param {string} key The key of the property to assign.
	 * @param {Object} object The parent object of `objValue`.
	 * @returns {*} Returns the value to assign.
	 */

	function customDefaultsAssignIn(objValue, srcValue, key, object) {
	  if (objValue === undefined || eq(objValue, objectProto$q[key]) && !hasOwnProperty$m.call(object, key)) {
	    return srcValue;
	  }

	  return objValue;
	}

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  "\u2028": 'u2028',
	  "\u2029": 'u2029'
	};
	/**
	 * Used by `_.template` to escape characters for inclusion in compiled string literals.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */

	function escapeStringChar(chr) {
	  return '\\' + stringEscapes[chr];
	}

	/** Used to match template delimiters. */
	var reInterpolate = /<%=([\s\S]+?)%>/g;

	/** Used to match template delimiters. */
	var reEscape = /<%-([\s\S]+?)%>/g;

	/** Used to match template delimiters. */
	var reEvaluate = /<%([\s\S]+?)%>/g;

	/**
	 * By default, the template delimiters used by lodash are like those in
	 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	 * following template settings to use alternative delimiters.
	 *
	 * @static
	 * @memberOf _
	 * @type {Object}
	 */

	var templateSettings = {
	  /**
	   * Used to detect `data` property values to be HTML-escaped.
	   *
	   * @memberOf _.templateSettings
	   * @type {RegExp}
	   */
	  'escape': reEscape,

	  /**
	   * Used to detect code to be evaluated.
	   *
	   * @memberOf _.templateSettings
	   * @type {RegExp}
	   */
	  'evaluate': reEvaluate,

	  /**
	   * Used to detect `data` property values to inject.
	   *
	   * @memberOf _.templateSettings
	   * @type {RegExp}
	   */
	  'interpolate': reInterpolate,

	  /**
	   * Used to reference the data object in the template text.
	   *
	   * @memberOf _.templateSettings
	   * @type {string}
	   */
	  'variable': '',

	  /**
	   * Used to import variables into the compiled template.
	   *
	   * @memberOf _.templateSettings
	   * @type {Object}
	   */
	  'imports': {
	    /**
	     * A reference to the `lodash` function.
	     *
	     * @memberOf _.templateSettings.imports
	     * @type {Function}
	     */
	    '_': {
	      'escape': escape
	    }
	  }
	};

	/** Used to match empty string literals in compiled template source. */

	var reEmptyStringLeading = /\b__p \+= '';/g,
	    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	/**
	 * Used to match
	 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	 */

	var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	/** Used to ensure capturing order of template delimiters. */

	var reNoMatch = /($^)/;
	/** Used to match unescaped characters in compiled string literals. */

	var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	/**
	 * Creates a compiled template function that can interpolate data properties
	 * in "interpolate" delimiters, HTML-escape interpolated data properties in
	 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	 * properties may be accessed as free variables in the template. If a setting
	 * object is given, it takes precedence over `_.templateSettings` values.
	 *
	 * **Note:** In the development build `_.template` utilizes
	 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	 * for easier debugging.
	 *
	 * For more information on precompiling templates see
	 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	 *
	 * For more information on Chrome extension sandboxes see
	 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The template string.
	 * @param {Object} [options={}] The options object.
	 * @param {RegExp} [options.escape=_.templateSettings.escape]
	 *  The HTML "escape" delimiter.
	 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	 *  The "evaluate" delimiter.
	 * @param {Object} [options.imports=_.templateSettings.imports]
	 *  An object to import into the template as free variables.
	 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	 *  The "interpolate" delimiter.
	 * @param {string} [options.sourceURL='templateSources[n]']
	 *  The sourceURL of the compiled template.
	 * @param {string} [options.variable='obj']
	 *  The data object variable name.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the compiled template function.
	 * @example
	 *
	 * // Use the "interpolate" delimiter to create a compiled template.
	 * var compiled = _.template('hello <%= user %>!');
	 * compiled({ 'user': 'fred' });
	 * // => 'hello fred!'
	 *
	 * // Use the HTML "escape" delimiter to escape data property values.
	 * var compiled = _.template('<b><%- value %></b>');
	 * compiled({ 'value': '<script>' });
	 * // => '<b>&lt;script&gt;</b>'
	 *
	 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	 * compiled({ 'users': ['fred', 'barney'] });
	 * // => '<li>fred</li><li>barney</li>'
	 *
	 * // Use the internal `print` function in "evaluate" delimiters.
	 * var compiled = _.template('<% print("hello " + user); %>!');
	 * compiled({ 'user': 'barney' });
	 * // => 'hello barney!'
	 *
	 * // Use the ES template literal delimiter as an "interpolate" delimiter.
	 * // Disable support by replacing the "interpolate" delimiter.
	 * var compiled = _.template('hello ${ user }!');
	 * compiled({ 'user': 'pebbles' });
	 * // => 'hello pebbles!'
	 *
	 * // Use backslashes to treat delimiters as plain text.
	 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	 * compiled({ 'value': 'ignored' });
	 * // => '<%- value %>'
	 *
	 * // Use the `imports` option to import `jQuery` as `jq`.
	 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	 * compiled({ 'users': ['fred', 'barney'] });
	 * // => '<li>fred</li><li>barney</li>'
	 *
	 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	 * compiled(data);
	 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	 *
	 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	 * compiled.source;
	 * // => function(data) {
	 * //   var __t, __p = '';
	 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	 * //   return __p;
	 * // }
	 *
	 * // Use custom template delimiters.
	 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	 * var compiled = _.template('hello {{ user }}!');
	 * compiled({ 'user': 'mustache' });
	 * // => 'hello mustache!'
	 *
	 * // Use the `source` property to inline compiled templates for meaningful
	 * // line numbers in error messages and stack traces.
	 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	 *   var JST = {\
	 *     "main": ' + _.template(mainText).source + '\
	 *   };\
	 * ');
	 */

	function template(string, options, guard) {
	  // Based on John Resig's `tmpl` implementation
	  // (http://ejohn.org/blog/javascript-micro-templating/)
	  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	  var settings = templateSettings.imports._.templateSettings || templateSettings;

	  if (guard && isIterateeCall(string, options, guard)) {
	    options = undefined;
	  }

	  string = toString(string);
	  options = assignInWith({}, options, settings, customDefaultsAssignIn);
	  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	      importsKeys = keys(imports),
	      importsValues = baseValues(imports, importsKeys);
	  var isEscaping,
	      isEvaluating,
	      index = 0,
	      interpolate = options.interpolate || reNoMatch,
	      source = "__p += '"; // Compile the regexp to match each delimiter.

	  var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.

	  var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\n' : '';
	  string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	    interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

	    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

	    if (escapeValue) {
	      isEscaping = true;
	      source += "' +\n__e(" + escapeValue + ") +\n'";
	    }

	    if (evaluateValue) {
	      isEvaluating = true;
	      source += "';\n" + evaluateValue + ";\n__p += '";
	    }

	    if (interpolateValue) {
	      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	    }

	    index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
	    // order to produce the correct `offset` value.

	    return match;
	  });
	  source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
	  // code to add the data object to the top of the scope chain.

	  var variable = options.variable;

	  if (!variable) {
	    source = 'with (obj) {\n' + source + '\n}\n';
	  } // Cleanup code by stripping empty strings.


	  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

	  source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
	  var result = attempt(function () {
	    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	  }); // Provide the compiled function's source by its `toString` method or
	  // the `source` property as a convenience for inlining compiled templates.

	  result.source = source;

	  if (isError(result)) {
	    throw result;
	  }

	  return result;
	}

	/** Error message constants. */

	var FUNC_ERROR_TEXT$b = 'Expected a function';
	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */

	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$b);
	  }

	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	/**
	 * This method is like `_.tap` except that it returns the result of `interceptor`.
	 * The purpose of this method is to "pass thru" values replacing intermediate
	 * results in a method chain sequence.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Seq
	 * @param {*} value The value to provide to `interceptor`.
	 * @param {Function} interceptor The function to invoke.
	 * @returns {*} Returns the result of `interceptor`.
	 * @example
	 *
	 * _('  abc  ')
	 *  .chain()
	 *  .trim()
	 *  .thru(function(value) {
	 *    return [value];
	 *  })
	 *  .value();
	 * // => ['abc']
	 */
	function thru(value, interceptor) {
	  return interceptor(value);
	}

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$4 = 9007199254740991;
	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$5 = 4294967295;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$b = Math.min;
	/**
	 * Invokes the iteratee `n` times, returning an array of the results of
	 * each invocation. The iteratee is invoked with one argument; (index).
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 * @example
	 *
	 * _.times(3, String);
	 * // => ['0', '1', '2']
	 *
	 *  _.times(4, _.constant(0));
	 * // => [0, 0, 0, 0]
	 */

	function times(n, iteratee) {
	  n = toInteger(n);

	  if (n < 1 || n > MAX_SAFE_INTEGER$4) {
	    return [];
	  }

	  var index = MAX_ARRAY_LENGTH$5,
	      length = nativeMin$b(n, MAX_ARRAY_LENGTH$5);
	  iteratee = castFunction(iteratee);
	  n -= MAX_ARRAY_LENGTH$5;
	  var result = baseTimes(length, iteratee);

	  while (++index < n) {
	    iteratee(index);
	  }

	  return result;
	}

	/**
	 * Enables the wrapper to be iterable.
	 *
	 * @name Symbol.iterator
	 * @memberOf _
	 * @since 4.0.0
	 * @category Seq
	 * @returns {Object} Returns the wrapper object.
	 * @example
	 *
	 * var wrapped = _([1, 2]);
	 *
	 * wrapped[Symbol.iterator]() === wrapped;
	 * // => true
	 *
	 * Array.from(wrapped);
	 * // => [1, 2]
	 */
	function wrapperToIterator() {
	  return this;
	}

	/**
	 * The base implementation of `wrapperValue` which returns the result of
	 * performing a sequence of actions on the unwrapped `value`, where each
	 * successive action is supplied the return value of the previous.
	 *
	 * @private
	 * @param {*} value The unwrapped value.
	 * @param {Array} actions Actions to perform to resolve the unwrapped value.
	 * @returns {*} Returns the resolved value.
	 */

	function baseWrapperValue(value, actions) {
	  var result = value;

	  if (result instanceof LazyWrapper) {
	    result = result.value();
	  }

	  return arrayReduce(actions, function (result, action) {
	    return action.func.apply(action.thisArg, arrayPush([result], action.args));
	  }, result);
	}

	/**
	 * Executes the chain sequence to resolve the unwrapped value.
	 *
	 * @name value
	 * @memberOf _
	 * @since 0.1.0
	 * @alias toJSON, valueOf
	 * @category Seq
	 * @returns {*} Returns the resolved unwrapped value.
	 * @example
	 *
	 * _([1, 2, 3]).value();
	 * // => [1, 2, 3]
	 */

	function wrapperValue() {
	  return baseWrapperValue(this.__wrapped__, this.__actions__);
	}

	/**
	 * Converts `string`, as a whole, to lower case just like
	 * [String#toLowerCase](https://mdn.io/toLowerCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the lower cased string.
	 * @example
	 *
	 * _.toLower('--Foo-Bar--');
	 * // => '--foo-bar--'
	 *
	 * _.toLower('fooBar');
	 * // => 'foobar'
	 *
	 * _.toLower('__FOO_BAR__');
	 * // => '__foo_bar__'
	 */

	function toLower(value) {
	  return toString(value).toLowerCase();
	}

	/**
	 * Converts `value` to a property path array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the new property path array.
	 * @example
	 *
	 * _.toPath('a.b.c');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toPath('a[0].b.c');
	 * // => ['a', '0', 'b', 'c']
	 */

	function toPath(value) {
	  if (isArray(value)) {
	    return arrayMap(value, toKey);
	  }

	  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	}

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$5 = 9007199254740991;
	/**
	 * Converts `value` to a safe integer. A safe integer can be compared and
	 * represented correctly.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toSafeInteger(3.2);
	 * // => 3
	 *
	 * _.toSafeInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toSafeInteger(Infinity);
	 * // => 9007199254740991
	 *
	 * _.toSafeInteger('3.2');
	 * // => 3
	 */

	function toSafeInteger(value) {
	  return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER$5, MAX_SAFE_INTEGER$5) : value === 0 ? value : 0;
	}

	/**
	 * Converts `string`, as a whole, to upper case just like
	 * [String#toUpperCase](https://mdn.io/toUpperCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the upper cased string.
	 * @example
	 *
	 * _.toUpper('--foo-bar--');
	 * // => '--FOO-BAR--'
	 *
	 * _.toUpper('fooBar');
	 * // => 'FOOBAR'
	 *
	 * _.toUpper('__foo_bar__');
	 * // => '__FOO_BAR__'
	 */

	function toUpper(value) {
	  return toString(value).toUpperCase();
	}

	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own
	 * enumerable string keyed properties thru `iteratee`, with each invocation
	 * potentially mutating the `accumulator` object. If `accumulator` is not
	 * provided, a new object with the same `[[Prototype]]` will be used. The
	 * iteratee is invoked with four arguments: (accumulator, value, key, object).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * }, []);
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */

	function transform(object, iteratee, accumulator) {
	  var isArr = isArray(object),
	      isArrLike = isArr || isBuffer(object) || isTypedArray(object);
	  iteratee = baseIteratee(iteratee, 4);

	  if (accumulator == null) {
	    var Ctor = object && object.constructor;

	    if (isArrLike) {
	      accumulator = isArr ? new Ctor() : [];
	    } else if (isObject(object)) {
	      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	    } else {
	      accumulator = {};
	    }
	  }

	  (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the last unmatched string symbol.
	 */

	function charsEndIndex(strSymbols, chrSymbols) {
	  var index = strSymbols.length;

	  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

	  return index;
	}

	/**
	 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the first unmatched string symbol.
	 */

	function charsStartIndex(strSymbols, chrSymbols) {
	  var index = -1,
	      length = strSymbols.length;

	  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

	  return index;
	}

	/** Used to match leading and trailing whitespace. */

	var reTrim$1 = /^\s+|\s+$/g;
	/**
	 * Removes leading and trailing whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trim('  abc  ');
	 * // => 'abc'
	 *
	 * _.trim('-_-abc-_-', '_-');
	 * // => 'abc'
	 *
	 * _.map(['  foo  ', '  bar  '], _.trim);
	 * // => ['foo', 'bar']
	 */

	function trim(string, chars, guard) {
	  string = toString(string);

	  if (string && (guard || chars === undefined)) {
	    return string.replace(reTrim$1, '');
	  }

	  if (!string || !(chars = baseToString(chars))) {
	    return string;
	  }

	  var strSymbols = stringToArray(string),
	      chrSymbols = stringToArray(chars),
	      start = charsStartIndex(strSymbols, chrSymbols),
	      end = charsEndIndex(strSymbols, chrSymbols) + 1;
	  return castSlice(strSymbols, start, end).join('');
	}

	/** Used to match leading and trailing whitespace. */

	var reTrimEnd = /\s+$/;
	/**
	 * Removes trailing whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trimEnd('  abc  ');
	 * // => '  abc'
	 *
	 * _.trimEnd('-_-abc-_-', '_-');
	 * // => '-_-abc'
	 */

	function trimEnd(string, chars, guard) {
	  string = toString(string);

	  if (string && (guard || chars === undefined)) {
	    return string.replace(reTrimEnd, '');
	  }

	  if (!string || !(chars = baseToString(chars))) {
	    return string;
	  }

	  var strSymbols = stringToArray(string),
	      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
	  return castSlice(strSymbols, 0, end).join('');
	}

	/** Used to match leading and trailing whitespace. */

	var reTrimStart$1 = /^\s+/;
	/**
	 * Removes leading whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trimStart('  abc  ');
	 * // => 'abc  '
	 *
	 * _.trimStart('-_-abc-_-', '_-');
	 * // => 'abc-_-'
	 */

	function trimStart(string, chars, guard) {
	  string = toString(string);

	  if (string && (guard || chars === undefined)) {
	    return string.replace(reTrimStart$1, '');
	  }

	  if (!string || !(chars = baseToString(chars))) {
	    return string;
	  }

	  var strSymbols = stringToArray(string),
	      start = charsStartIndex(strSymbols, stringToArray(chars));
	  return castSlice(strSymbols, start).join('');
	}

	/** Used as default options for `_.truncate`. */

	var DEFAULT_TRUNC_LENGTH = 30,
	    DEFAULT_TRUNC_OMISSION = '...';
	/** Used to match `RegExp` flags from their coerced string values. */

	var reFlags$1 = /\w*$/;
	/**
	 * Truncates `string` if it's longer than the given maximum string length.
	 * The last characters of the truncated string are replaced with the omission
	 * string which defaults to "...".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to truncate.
	 * @param {Object} [options={}] The options object.
	 * @param {number} [options.length=30] The maximum string length.
	 * @param {string} [options.omission='...'] The string to indicate text is omitted.
	 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	 * @returns {string} Returns the truncated string.
	 * @example
	 *
	 * _.truncate('hi-diddly-ho there, neighborino');
	 * // => 'hi-diddly-ho there, neighbo...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': ' '
	 * });
	 * // => 'hi-diddly-ho there,...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': /,? +/
	 * });
	 * // => 'hi-diddly-ho there...'
	 *
	 * _.truncate('hi-diddly-ho there, neighborino', {
	 *   'omission': ' [...]'
	 * });
	 * // => 'hi-diddly-ho there, neig [...]'
	 */

	function truncate(string, options) {
	  var length = DEFAULT_TRUNC_LENGTH,
	      omission = DEFAULT_TRUNC_OMISSION;

	  if (isObject(options)) {
	    var separator = 'separator' in options ? options.separator : separator;
	    length = 'length' in options ? toInteger(options.length) : length;
	    omission = 'omission' in options ? baseToString(options.omission) : omission;
	  }

	  string = toString(string);
	  var strLength = string.length;

	  if (hasUnicode(string)) {
	    var strSymbols = stringToArray(string);
	    strLength = strSymbols.length;
	  }

	  if (length >= strLength) {
	    return string;
	  }

	  var end = length - stringSize(omission);

	  if (end < 1) {
	    return omission;
	  }

	  var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

	  if (separator === undefined) {
	    return result + omission;
	  }

	  if (strSymbols) {
	    end += result.length - end;
	  }

	  if (isRegExp(separator)) {
	    if (string.slice(end).search(separator)) {
	      var match,
	          substring = result;

	      if (!separator.global) {
	        separator = RegExp(separator.source, toString(reFlags$1.exec(separator)) + 'g');
	      }

	      separator.lastIndex = 0;

	      while (match = separator.exec(substring)) {
	        var newEnd = match.index;
	      }

	      result = result.slice(0, newEnd === undefined ? end : newEnd);
	    }
	  } else if (string.indexOf(baseToString(separator), end) != end) {
	    var index = result.lastIndexOf(separator);

	    if (index > -1) {
	      result = result.slice(0, index);
	    }
	  }

	  return result + omission;
	}

	/**
	 * Creates a function that accepts up to one argument, ignoring any
	 * additional arguments.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Function
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 * @example
	 *
	 * _.map(['6', '8', '10'], _.unary(parseInt));
	 * // => [6, 8, 10]
	 */

	function unary(func) {
	  return ary(func, 1);
	}

	/** Used to map HTML entities to characters. */

	var htmlUnescapes = {
	  '&amp;': '&',
	  '&lt;': '<',
	  '&gt;': '>',
	  '&quot;': '"',
	  '&#39;': "'"
	};
	/**
	 * Used by `_.unescape` to convert HTML entities to characters.
	 *
	 * @private
	 * @param {string} chr The matched character to unescape.
	 * @returns {string} Returns the unescaped character.
	 */

	var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	/** Used to match HTML entities and HTML characters. */

	var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	    reHasEscapedHtml = RegExp(reEscapedHtml.source);
	/**
	 * The inverse of `_.escape`; this method converts the HTML entities
	 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	 * their corresponding characters.
	 *
	 * **Note:** No other HTML entities are unescaped. To unescape additional
	 * HTML entities use a third-party library like [_he_](https://mths.be/he).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.6.0
	 * @category String
	 * @param {string} [string=''] The string to unescape.
	 * @returns {string} Returns the unescaped string.
	 * @example
	 *
	 * _.unescape('fred, barney, &amp; pebbles');
	 * // => 'fred, barney, & pebbles'
	 */

	function unescape(string) {
	  string = toString(string);
	  return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
	}

	/** Used as references for various `Number` constants. */

	var INFINITY$5 = 1 / 0;
	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */

	var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY$5) ? noop : function (values) {
	  return new Set$1(values);
	};

	/** Used as the size to enable large array optimizations. */

	var LARGE_ARRAY_SIZE$2 = 200;
	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */

	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  } else if (length >= LARGE_ARRAY_SIZE$2) {
	    var set = iteratee ? null : createSet(array);

	    if (set) {
	      return setToArray(set);
	    }

	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache();
	  } else {
	    seen = iteratee ? [] : result;
	  }

	  outer: while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;
	    value = comparator || value !== 0 ? value : 0;

	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;

	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }

	      if (iteratee) {
	        seen.push(computed);
	      }

	      result.push(value);
	    } else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }

	      result.push(value);
	    }
	  }

	  return result;
	}

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */

	var union = baseRest(function (arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});

	/**
	 * This method is like `_.union` except that it accepts `iteratee` which is
	 * invoked for each element of each `arrays` to generate the criterion by
	 * which uniqueness is computed. Result values are chosen from the first
	 * array in which the value occurs. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	 * // => [2.1, 1.2]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */

	var unionBy = baseRest(function (arrays) {
	  var iteratee = last(arrays);

	  if (isArrayLikeObject(iteratee)) {
	    iteratee = undefined;
	  }

	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
	});

	/**
	 * This method is like `_.union` except that it accepts `comparator` which
	 * is invoked to compare elements of `arrays`. Result values are chosen from
	 * the first array in which the value occurs. The comparator is invoked
	 * with two arguments: (arrVal, othVal).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	 *
	 * _.unionWith(objects, others, _.isEqual);
	 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	 */

	var unionWith = baseRest(function (arrays) {
	  var comparator = last(arrays);
	  comparator = typeof comparator == 'function' ? comparator : undefined;
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	});

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each element
	 * is kept. The order of result values is determined by the order they occur
	 * in the array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */

	function uniq(array) {
	  return array && array.length ? baseUniq(array) : [];
	}

	/**
	 * This method is like `_.uniq` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * uniqueness is computed. The order of result values is determined by the
	 * order they occur in the array. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	 * // => [2.1, 1.2]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */

	function uniqBy(array, iteratee) {
	  return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
	}

	/**
	 * This method is like `_.uniq` except that it accepts `comparator` which
	 * is invoked to compare elements of `array`. The order of result values is
	 * determined by the order they occur in the array.The comparator is invoked
	 * with two arguments: (arrVal, othVal).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	 *
	 * _.uniqWith(objects, _.isEqual);
	 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	 */

	function uniqWith(array, comparator) {
	  comparator = typeof comparator == 'function' ? comparator : undefined;
	  return array && array.length ? baseUniq(array, undefined, comparator) : [];
	}

	/** Used to generate unique IDs. */

	var idCounter = 0;
	/**
	 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {string} [prefix=''] The value to prefix the ID with.
	 * @returns {string} Returns the unique ID.
	 * @example
	 *
	 * _.uniqueId('contact_');
	 * // => 'contact_104'
	 *
	 * _.uniqueId();
	 * // => '105'
	 */

	function uniqueId(prefix) {
	  var id = ++idCounter;
	  return toString(prefix) + id;
	}

	/**
	 * Removes the property at `path` of `object`.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	 * _.unset(object, 'a[0].b.c');
	 * // => true
	 *
	 * console.log(object);
	 * // => { 'a': [{ 'b': {} }] };
	 *
	 * _.unset(object, ['a', '0', 'b', 'c']);
	 * // => true
	 *
	 * console.log(object);
	 * // => { 'a': [{ 'b': {} }] };
	 */

	function unset(object, path) {
	  return object == null ? true : baseUnset(object, path);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$e = Math.max;
	/**
	 * This method is like `_.zip` except that it accepts an array of grouped
	 * elements and creates an array regrouping the elements to their pre-zip
	 * configuration.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.2.0
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	 * // => [['a', 1, true], ['b', 2, false]]
	 *
	 * _.unzip(zipped);
	 * // => [['a', 'b'], [1, 2], [true, false]]
	 */

	function unzip(array) {
	  if (!(array && array.length)) {
	    return [];
	  }

	  var length = 0;
	  array = arrayFilter(array, function (group) {
	    if (isArrayLikeObject(group)) {
	      length = nativeMax$e(group.length, length);
	      return true;
	    }
	  });
	  return baseTimes(length, function (index) {
	    return arrayMap(array, baseProperty(index));
	  });
	}

	/**
	 * This method is like `_.unzip` except that it accepts `iteratee` to specify
	 * how regrouped values should be combined. The iteratee is invoked with the
	 * elements of each group: (...group).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @param {Function} [iteratee=_.identity] The function to combine
	 *  regrouped values.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	 * // => [[1, 10, 100], [2, 20, 200]]
	 *
	 * _.unzipWith(zipped, _.add);
	 * // => [3, 30, 300]
	 */

	function unzipWith(array, iteratee) {
	  if (!(array && array.length)) {
	    return [];
	  }

	  var result = unzip(array);

	  if (iteratee == null) {
	    return result;
	  }

	  return arrayMap(result, function (group) {
	    return apply(iteratee, undefined, group);
	  });
	}

	/**
	 * The base implementation of `_.update`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to update.
	 * @param {Function} updater The function to produce the updated value.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */

	function baseUpdate(object, path, updater, customizer) {
	  return baseSet(object, path, updater(baseGet(object, path)), customizer);
	}

	/**
	 * This method is like `_.set` except that accepts `updater` to produce the
	 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	 * is invoked with one argument: (value).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {Function} updater The function to produce the updated value.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	 * console.log(object.a[0].b.c);
	 * // => 9
	 *
	 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	 * console.log(object.x[0].y.z);
	 * // => 0
	 */

	function update(object, path, updater) {
	  return object == null ? object : baseUpdate(object, path, castFunction(updater));
	}

	/**
	 * This method is like `_.update` except that it accepts `customizer` which is
	 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	 * path creation is handled by the method instead. The `customizer` is invoked
	 * with three arguments: (nsValue, key, nsObject).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {Function} updater The function to produce the updated value.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {};
	 *
	 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	 * // => { '0': { '1': 'a' } }
	 */

	function updateWith(object, path, updater, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	}

	/**
	 * Converts `string`, as space separated words, to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the upper cased string.
	 * @example
	 *
	 * _.upperCase('--foo-bar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('fooBar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('__foo_bar__');
	 * // => 'FOO BAR'
	 */

	var upperCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + word.toUpperCase();
	});

	/**
	 * Creates an array of the own and inherited enumerable string keyed property
	 * values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.valuesIn(new Foo);
	 * // => [1, 2, 3] (iteration order is not guaranteed)
	 */

	function valuesIn(object) {
	  return object == null ? [] : baseValues(object, keysIn$1(object));
	}

	/**
	 * Creates an array excluding all given values using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.pull`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...*} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.xor
	 * @example
	 *
	 * _.without([2, 1, 2, 3], 1, 2);
	 * // => [3]
	 */

	var without = baseRest(function (array, values) {
	  return isArrayLikeObject(array) ? baseDifference(array, values) : [];
	});

	/**
	 * Creates a function that provides `value` to `wrapper` as its first
	 * argument. Any additional arguments provided to the function are appended
	 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	 * binding of the created function.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {*} value The value to wrap.
	 * @param {Function} [wrapper=identity] The wrapper function.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var p = _.wrap(_.escape, function(func, text) {
	 *   return '<p>' + func(text) + '</p>';
	 * });
	 *
	 * p('fred, barney, & pebbles');
	 * // => '<p>fred, barney, &amp; pebbles</p>'
	 */

	function wrap(value, wrapper) {
	  return partial(castFunction(wrapper), value);
	}

	/**
	 * This method is the wrapper version of `_.at`.
	 *
	 * @name at
	 * @memberOf _
	 * @since 1.0.0
	 * @category Seq
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	 *
	 * _(object).at(['a[0].b.c', 'a[1]']).value();
	 * // => [3, 4]
	 */

	var wrapperAt = flatRest(function (paths) {
	  var length = paths.length,
	      start = length ? paths[0] : 0,
	      value = this.__wrapped__,
	      interceptor = function interceptor(object) {
	    return baseAt(object, paths);
	  };

	  if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
	    return this.thru(interceptor);
	  }

	  value = value.slice(start, +start + (length ? 1 : 0));

	  value.__actions__.push({
	    'func': thru,
	    'args': [interceptor],
	    'thisArg': undefined
	  });

	  return new LodashWrapper(value, this.__chain__).thru(function (array) {
	    if (length && !array.length) {
	      array.push(undefined);
	    }

	    return array;
	  });
	});

	/**
	 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	 *
	 * @name chain
	 * @memberOf _
	 * @since 0.1.0
	 * @category Seq
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 }
	 * ];
	 *
	 * // A sequence without explicit chaining.
	 * _(users).head();
	 * // => { 'user': 'barney', 'age': 36 }
	 *
	 * // A sequence with explicit chaining.
	 * _(users)
	 *   .chain()
	 *   .head()
	 *   .pick('user')
	 *   .value();
	 * // => { 'user': 'barney' }
	 */

	function wrapperChain() {
	  return chain(this);
	}

	/**
	 * This method is the wrapper version of `_.reverse`.
	 *
	 * **Note:** This method mutates the wrapped array.
	 *
	 * @name reverse
	 * @memberOf _
	 * @since 0.1.0
	 * @category Seq
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var array = [1, 2, 3];
	 *
	 * _(array).reverse().value()
	 * // => [3, 2, 1]
	 *
	 * console.log(array);
	 * // => [3, 2, 1]
	 */

	function wrapperReverse() {
	  var value = this.__wrapped__;

	  if (value instanceof LazyWrapper) {
	    var wrapped = value;

	    if (this.__actions__.length) {
	      wrapped = new LazyWrapper(this);
	    }

	    wrapped = wrapped.reverse();

	    wrapped.__actions__.push({
	      'func': thru,
	      'args': [reverse],
	      'thisArg': undefined
	    });

	    return new LodashWrapper(wrapped, this.__chain__);
	  }

	  return this.thru(reverse);
	}

	/**
	 * The base implementation of methods like `_.xor`, without support for
	 * iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arrays The arrays to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of values.
	 */

	function baseXor(arrays, iteratee, comparator) {
	  var length = arrays.length;

	  if (length < 2) {
	    return length ? baseUniq(arrays[0]) : [];
	  }

	  var index = -1,
	      result = Array(length);

	  while (++index < length) {
	    var array = arrays[index],
	        othIndex = -1;

	    while (++othIndex < length) {
	      if (othIndex != index) {
	        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	      }
	    }
	  }

	  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	}

	/**
	 * Creates an array of unique values that is the
	 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	 * of the given arrays. The order of result values is determined by the order
	 * they occur in the arrays.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.without
	 * @example
	 *
	 * _.xor([2, 1], [2, 3]);
	 * // => [1, 3]
	 */

	var xor = baseRest(function (arrays) {
	  return baseXor(arrayFilter(arrays, isArrayLikeObject));
	});

	/**
	 * This method is like `_.xor` except that it accepts `iteratee` which is
	 * invoked for each element of each `arrays` to generate the criterion by
	 * which by which they're compared. The order of result values is determined
	 * by the order they occur in the arrays. The iteratee is invoked with one
	 * argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	 * // => [1.2, 3.4]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 2 }]
	 */

	var xorBy = baseRest(function (arrays) {
	  var iteratee = last(arrays);

	  if (isArrayLikeObject(iteratee)) {
	    iteratee = undefined;
	  }

	  return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee, 2));
	});

	/**
	 * This method is like `_.xor` except that it accepts `comparator` which is
	 * invoked to compare elements of `arrays`. The order of result values is
	 * determined by the order they occur in the arrays. The comparator is invoked
	 * with two arguments: (arrVal, othVal).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	 *
	 * _.xorWith(objects, others, _.isEqual);
	 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	 */

	var xorWith = baseRest(function (arrays) {
	  var comparator = last(arrays);
	  comparator = typeof comparator == 'function' ? comparator : undefined;
	  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	});

	/**
	 * Creates an array of grouped elements, the first of which contains the
	 * first elements of the given arrays, the second of which contains the
	 * second elements of the given arrays, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to process.
	 * @returns {Array} Returns the new array of grouped elements.
	 * @example
	 *
	 * _.zip(['a', 'b'], [1, 2], [true, false]);
	 * // => [['a', 1, true], ['b', 2, false]]
	 */

	var zip = baseRest(unzip);

	/**
	 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	 *
	 * @private
	 * @param {Array} props The property identifiers.
	 * @param {Array} values The property values.
	 * @param {Function} assignFunc The function to assign values.
	 * @returns {Object} Returns the new object.
	 */
	function baseZipObject(props, values, assignFunc) {
	  var index = -1,
	      length = props.length,
	      valsLength = values.length,
	      result = {};

	  while (++index < length) {
	    var value = index < valsLength ? values[index] : undefined;
	    assignFunc(result, props[index], value);
	  }

	  return result;
	}

	/**
	 * This method is like `_.fromPairs` except that it accepts two arrays,
	 * one of property identifiers and one of corresponding values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.4.0
	 * @category Array
	 * @param {Array} [props=[]] The property identifiers.
	 * @param {Array} [values=[]] The property values.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.zipObject(['a', 'b'], [1, 2]);
	 * // => { 'a': 1, 'b': 2 }
	 */

	function zipObject(props, values) {
	  return baseZipObject(props || [], values || [], assignValue);
	}

	/**
	 * This method is like `_.zipObject` except that it supports property paths.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.1.0
	 * @category Array
	 * @param {Array} [props=[]] The property identifiers.
	 * @param {Array} [values=[]] The property values.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	 */

	function zipObjectDeep(props, values) {
	  return baseZipObject(props || [], values || [], baseSet);
	}

	/**
	 * This method is like `_.zip` except that it accepts `iteratee` to specify
	 * how grouped values should be combined. The iteratee is invoked with the
	 * elements of each group: (...group).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to process.
	 * @param {Function} [iteratee=_.identity] The function to combine
	 *  grouped values.
	 * @returns {Array} Returns the new array of grouped elements.
	 * @example
	 *
	 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	 *   return a + b + c;
	 * });
	 * // => [111, 222]
	 */

	var zipWith = baseRest(function (arrays) {
	  var length = arrays.length,
	      iteratee = length > 1 ? arrays[length - 1] : undefined;
	  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	  return unzipWith(arrays, iteratee);
	});

	var array = {
	  chunk: chunk,
	  compact: compact,
	  concat: concat,
	  difference: difference,
	  differenceBy: differenceBy,
	  differenceWith: differenceWith,
	  drop: drop,
	  dropRight: dropRight,
	  dropRightWhile: dropRightWhile,
	  dropWhile: dropWhile,
	  fill: fill,
	  findIndex: findIndex,
	  findLastIndex: findLastIndex,
	  first: head,
	  flatten: flatten,
	  flattenDeep: flattenDeep,
	  flattenDepth: flattenDepth,
	  fromPairs: fromPairs,
	  head: head,
	  indexOf: indexOf,
	  initial: initial,
	  intersection: intersection,
	  intersectionBy: intersectionBy,
	  intersectionWith: intersectionWith,
	  join: join,
	  last: last,
	  lastIndexOf: lastIndexOf,
	  nth: nth,
	  pull: pull,
	  pullAll: pullAll,
	  pullAllBy: pullAllBy,
	  pullAllWith: pullAllWith,
	  pullAt: pullAt,
	  remove: remove,
	  reverse: reverse,
	  slice: slice,
	  sortedIndex: sortedIndex,
	  sortedIndexBy: sortedIndexBy,
	  sortedIndexOf: sortedIndexOf,
	  sortedLastIndex: sortedLastIndex,
	  sortedLastIndexBy: sortedLastIndexBy,
	  sortedLastIndexOf: sortedLastIndexOf,
	  sortedUniq: sortedUniq,
	  sortedUniqBy: sortedUniqBy,
	  tail: tail,
	  take: take,
	  takeRight: takeRight,
	  takeRightWhile: takeRightWhile,
	  takeWhile: takeWhile,
	  union: union,
	  unionBy: unionBy,
	  unionWith: unionWith,
	  uniq: uniq,
	  uniqBy: uniqBy,
	  uniqWith: uniqWith,
	  unzip: unzip,
	  unzipWith: unzipWith,
	  without: without,
	  xor: xor,
	  xorBy: xorBy,
	  xorWith: xorWith,
	  zip: zip,
	  zipObject: zipObject,
	  zipObjectDeep: zipObjectDeep,
	  zipWith: zipWith
	};

	var collection = {
	  countBy: countBy,
	  each: forEach,
	  eachRight: forEachRight,
	  every: every,
	  filter: filter,
	  find: find,
	  findLast: findLast,
	  flatMap: flatMap,
	  flatMapDeep: flatMapDeep,
	  flatMapDepth: flatMapDepth,
	  forEach: forEach,
	  forEachRight: forEachRight,
	  groupBy: groupBy,
	  includes: includes,
	  invokeMap: invokeMap,
	  keyBy: keyBy,
	  map: map,
	  orderBy: orderBy,
	  partition: partition,
	  reduce: reduce,
	  reduceRight: reduceRight,
	  reject: reject,
	  sample: sample,
	  sampleSize: sampleSize,
	  shuffle: shuffle,
	  size: size,
	  some: some,
	  sortBy: sortBy
	};

	var date = {
	  now: now
	};

	var func = {
	  after: after,
	  ary: ary,
	  before: before,
	  bind: bind,
	  bindKey: bindKey,
	  curry: curry,
	  curryRight: curryRight,
	  debounce: debounce,
	  defer: defer,
	  delay: delay,
	  flip: flip,
	  memoize: memoize,
	  negate: negate,
	  once: once,
	  overArgs: overArgs,
	  partial: partial,
	  partialRight: partialRight,
	  rearg: rearg,
	  rest: rest,
	  spread: spread,
	  throttle: throttle,
	  unary: unary,
	  wrap: wrap
	};

	var lang = {
	  castArray: castArray,
	  clone: clone,
	  cloneDeep: cloneDeep,
	  cloneDeepWith: cloneDeepWith,
	  cloneWith: cloneWith,
	  conformsTo: conformsTo,
	  eq: eq,
	  gt: gt,
	  gte: gte,
	  isArguments: isArguments,
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isArrayLike: isArrayLike,
	  isArrayLikeObject: isArrayLikeObject,
	  isBoolean: isBoolean,
	  isBuffer: isBuffer,
	  isDate: isDate,
	  isElement: isElement,
	  isEmpty: isEmpty,
	  isEqual: isEqual,
	  isEqualWith: isEqualWith,
	  isError: isError,
	  isFinite: isFinite$1,
	  isFunction: isFunction,
	  isInteger: isInteger,
	  isLength: isLength,
	  isMap: isMap,
	  isMatch: isMatch,
	  isMatchWith: isMatchWith,
	  isNaN: isNaN$1,
	  isNative: isNative,
	  isNil: isNil,
	  isNull: isNull,
	  isNumber: isNumber,
	  isObject: isObject,
	  isObjectLike: isObjectLike,
	  isPlainObject: isPlainObject,
	  isRegExp: isRegExp,
	  isSafeInteger: isSafeInteger,
	  isSet: isSet,
	  isString: isString,
	  isSymbol: isSymbol,
	  isTypedArray: isTypedArray,
	  isUndefined: isUndefined,
	  isWeakMap: isWeakMap,
	  isWeakSet: isWeakSet,
	  lt: lt,
	  lte: lte,
	  toArray: toArray,
	  toFinite: toFinite,
	  toInteger: toInteger,
	  toLength: toLength,
	  toNumber: toNumber,
	  toPlainObject: toPlainObject,
	  toSafeInteger: toSafeInteger,
	  toString: toString
	};

	var math = {
	  add: add,
	  ceil: ceil,
	  divide: divide,
	  floor: floor,
	  max: max,
	  maxBy: maxBy,
	  mean: mean,
	  meanBy: meanBy,
	  min: min,
	  minBy: minBy,
	  multiply: multiply,
	  round: round,
	  subtract: subtract,
	  sum: sum,
	  sumBy: sumBy
	};

	var number = {
	  clamp: clamp,
	  inRange: inRange,
	  random: random
	};

	var object = {
	  assign: assign,
	  assignIn: assignIn,
	  assignInWith: assignInWith,
	  assignWith: assignWith,
	  at: at,
	  create: create,
	  defaults: defaults,
	  defaultsDeep: defaultsDeep,
	  entries: toPairs,
	  entriesIn: toPairsIn,
	  extend: assignIn,
	  extendWith: assignInWith,
	  findKey: findKey,
	  findLastKey: findLastKey,
	  forIn: forIn,
	  forInRight: forInRight,
	  forOwn: forOwn,
	  forOwnRight: forOwnRight,
	  functions: functions,
	  functionsIn: functionsIn,
	  get: get,
	  has: has,
	  hasIn: hasIn,
	  invert: invert,
	  invertBy: invertBy,
	  invoke: invoke,
	  keys: keys,
	  keysIn: keysIn$1,
	  mapKeys: mapKeys,
	  mapValues: mapValues,
	  merge: merge,
	  mergeWith: mergeWith,
	  omit: omit,
	  omitBy: omitBy,
	  pick: pick,
	  pickBy: pickBy,
	  result: result,
	  set: set,
	  setWith: setWith,
	  toPairs: toPairs,
	  toPairsIn: toPairsIn,
	  transform: transform,
	  unset: unset,
	  update: update,
	  updateWith: updateWith,
	  values: values,
	  valuesIn: valuesIn
	};

	var seq = {
	  at: wrapperAt,
	  chain: chain,
	  commit: wrapperCommit,
	  lodash: lodash,
	  next: wrapperNext,
	  plant: wrapperPlant,
	  reverse: wrapperReverse,
	  tap: tap,
	  thru: thru,
	  toIterator: wrapperToIterator,
	  toJSON: wrapperValue,
	  value: wrapperValue,
	  valueOf: wrapperValue,
	  wrapperChain: wrapperChain
	};

	var string = {
	  camelCase: camelCase,
	  capitalize: capitalize,
	  deburr: deburr,
	  endsWith: endsWith,
	  escape: escape,
	  escapeRegExp: escapeRegExp,
	  kebabCase: kebabCase,
	  lowerCase: lowerCase,
	  lowerFirst: lowerFirst,
	  pad: pad,
	  padEnd: padEnd,
	  padStart: padStart,
	  parseInt: parseInt$1,
	  repeat: repeat,
	  replace: replace,
	  snakeCase: snakeCase,
	  split: split,
	  startCase: startCase,
	  startsWith: startsWith,
	  template: template,
	  templateSettings: templateSettings,
	  toLower: toLower,
	  toUpper: toUpper,
	  trim: trim,
	  trimEnd: trimEnd,
	  trimStart: trimStart,
	  truncate: truncate,
	  unescape: unescape,
	  upperCase: upperCase,
	  upperFirst: upperFirst,
	  words: words
	};

	var util = {
	  attempt: attempt,
	  bindAll: bindAll,
	  cond: cond,
	  conforms: conforms,
	  constant: constant,
	  defaultTo: defaultTo,
	  flow: flow,
	  flowRight: flowRight,
	  identity: identity,
	  iteratee: iteratee,
	  matches: matches,
	  matchesProperty: matchesProperty,
	  method: method,
	  methodOf: methodOf,
	  mixin: mixin,
	  noop: noop,
	  nthArg: nthArg,
	  over: over,
	  overEvery: overEvery,
	  overSome: overSome,
	  property: property,
	  propertyOf: propertyOf,
	  range: range,
	  rangeRight: rangeRight,
	  stubArray: stubArray,
	  stubFalse: stubFalse,
	  stubObject: stubObject,
	  stubString: stubString,
	  stubTrue: stubTrue,
	  times: times,
	  toPath: toPath,
	  uniqueId: uniqueId
	};

	/**
	 * Creates a clone of the lazy wrapper object.
	 *
	 * @private
	 * @name clone
	 * @memberOf LazyWrapper
	 * @returns {Object} Returns the cloned `LazyWrapper` object.
	 */

	function lazyClone() {
	  var result = new LazyWrapper(this.__wrapped__);
	  result.__actions__ = copyArray(this.__actions__);
	  result.__dir__ = this.__dir__;
	  result.__filtered__ = this.__filtered__;
	  result.__iteratees__ = copyArray(this.__iteratees__);
	  result.__takeCount__ = this.__takeCount__;
	  result.__views__ = copyArray(this.__views__);
	  return result;
	}

	/**
	 * Reverses the direction of lazy iteration.
	 *
	 * @private
	 * @name reverse
	 * @memberOf LazyWrapper
	 * @returns {Object} Returns the new reversed `LazyWrapper` object.
	 */

	function lazyReverse() {
	  if (this.__filtered__) {
	    var result = new LazyWrapper(this);
	    result.__dir__ = -1;
	    result.__filtered__ = true;
	  } else {
	    result = this.clone();
	    result.__dir__ *= -1;
	  }

	  return result;
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$f = Math.max,
	    nativeMin$c = Math.min;
	/**
	 * Gets the view, applying any `transforms` to the `start` and `end` positions.
	 *
	 * @private
	 * @param {number} start The start of the view.
	 * @param {number} end The end of the view.
	 * @param {Array} transforms The transformations to apply to the view.
	 * @returns {Object} Returns an object containing the `start` and `end`
	 *  positions of the view.
	 */

	function getView(start, end, transforms) {
	  var index = -1,
	      length = transforms.length;

	  while (++index < length) {
	    var data = transforms[index],
	        size = data.size;

	    switch (data.type) {
	      case 'drop':
	        start += size;
	        break;

	      case 'dropRight':
	        end -= size;
	        break;

	      case 'take':
	        end = nativeMin$c(end, start + size);
	        break;

	      case 'takeRight':
	        start = nativeMax$f(start, end - size);
	        break;
	    }
	  }

	  return {
	    'start': start,
	    'end': end
	  };
	}

	/** Used to indicate the type of lazy iteratees. */

	var LAZY_FILTER_FLAG = 1,
	    LAZY_MAP_FLAG = 2;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMin$d = Math.min;
	/**
	 * Extracts the unwrapped value from its lazy wrapper.
	 *
	 * @private
	 * @name value
	 * @memberOf LazyWrapper
	 * @returns {*} Returns the unwrapped value.
	 */

	function lazyValue() {
	  var array = this.__wrapped__.value(),
	      dir = this.__dir__,
	      isArr = isArray(array),
	      isRight = dir < 0,
	      arrLength = isArr ? array.length : 0,
	      view = getView(0, arrLength, this.__views__),
	      start = view.start,
	      end = view.end,
	      length = end - start,
	      index = isRight ? end : start - 1,
	      iteratees = this.__iteratees__,
	      iterLength = iteratees.length,
	      resIndex = 0,
	      takeCount = nativeMin$d(length, this.__takeCount__);

	  if (!isArr || !isRight && arrLength == length && takeCount == length) {
	    return baseWrapperValue(array, this.__actions__);
	  }

	  var result = [];

	  outer: while (length-- && resIndex < takeCount) {
	    index += dir;
	    var iterIndex = -1,
	        value = array[index];

	    while (++iterIndex < iterLength) {
	      var data = iteratees[iterIndex],
	          iteratee = data.iteratee,
	          type = data.type,
	          computed = iteratee(value);

	      if (type == LAZY_MAP_FLAG) {
	        value = computed;
	      } else if (!computed) {
	        if (type == LAZY_FILTER_FLAG) {
	          continue outer;
	        } else {
	          break outer;
	        }
	      }
	    }

	    result[resIndex++] = value;
	  }

	  return result;
	}

	/**
	 * @license
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="es" -o ./`
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	/** Used as the semantic version number. */

	var VERSION = '4.17.11';
	/** Used to compose bitmasks for function metadata. */

	var WRAP_BIND_KEY_FLAG$6 = 2;
	/** Used to indicate the type of lazy iteratees. */

	var LAZY_FILTER_FLAG$1 = 1,
	    LAZY_WHILE_FLAG = 3;
	/** Used as references for the maximum length and index of an array. */

	var MAX_ARRAY_LENGTH$6 = 4294967295;
	/** Used for built-in method references. */

	var arrayProto$5 = Array.prototype,
	    objectProto$r = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty$n = objectProto$r.hasOwnProperty;
	/** Built-in value references. */

	var symIterator$1 = _Symbol ? _Symbol.iterator : undefined;
	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$g = Math.max,
	    nativeMin$e = Math.min; // wrap `_.mixin` so it works when provided only one argument

	var mixin$1 = function (func$$1) {
	  return function (object$$1, source, options) {
	    if (options == null) {
	      var isObj = isObject(source),
	          props = isObj && keys(source),
	          methodNames = props && props.length && baseFunctions(source, props);

	      if (!(methodNames ? methodNames.length : isObj)) {
	        options = source;
	        source = object$$1;
	        object$$1 = this;
	      }
	    }

	    return func$$1(object$$1, source, options);
	  };
	}(mixin); // Add methods that return wrapped values in chain sequences.


	lodash.after = func.after;
	lodash.ary = func.ary;
	lodash.assign = object.assign;
	lodash.assignIn = object.assignIn;
	lodash.assignInWith = object.assignInWith;
	lodash.assignWith = object.assignWith;
	lodash.at = object.at;
	lodash.before = func.before;
	lodash.bind = func.bind;
	lodash.bindAll = util.bindAll;
	lodash.bindKey = func.bindKey;
	lodash.castArray = lang.castArray;
	lodash.chain = seq.chain;
	lodash.chunk = array.chunk;
	lodash.compact = array.compact;
	lodash.concat = array.concat;
	lodash.cond = util.cond;
	lodash.conforms = util.conforms;
	lodash.constant = util.constant;
	lodash.countBy = collection.countBy;
	lodash.create = object.create;
	lodash.curry = func.curry;
	lodash.curryRight = func.curryRight;
	lodash.debounce = func.debounce;
	lodash.defaults = object.defaults;
	lodash.defaultsDeep = object.defaultsDeep;
	lodash.defer = func.defer;
	lodash.delay = func.delay;
	lodash.difference = array.difference;
	lodash.differenceBy = array.differenceBy;
	lodash.differenceWith = array.differenceWith;
	lodash.drop = array.drop;
	lodash.dropRight = array.dropRight;
	lodash.dropRightWhile = array.dropRightWhile;
	lodash.dropWhile = array.dropWhile;
	lodash.fill = array.fill;
	lodash.filter = collection.filter;
	lodash.flatMap = collection.flatMap;
	lodash.flatMapDeep = collection.flatMapDeep;
	lodash.flatMapDepth = collection.flatMapDepth;
	lodash.flatten = array.flatten;
	lodash.flattenDeep = array.flattenDeep;
	lodash.flattenDepth = array.flattenDepth;
	lodash.flip = func.flip;
	lodash.flow = util.flow;
	lodash.flowRight = util.flowRight;
	lodash.fromPairs = array.fromPairs;
	lodash.functions = object.functions;
	lodash.functionsIn = object.functionsIn;
	lodash.groupBy = collection.groupBy;
	lodash.initial = array.initial;
	lodash.intersection = array.intersection;
	lodash.intersectionBy = array.intersectionBy;
	lodash.intersectionWith = array.intersectionWith;
	lodash.invert = object.invert;
	lodash.invertBy = object.invertBy;
	lodash.invokeMap = collection.invokeMap;
	lodash.iteratee = util.iteratee;
	lodash.keyBy = collection.keyBy;
	lodash.keys = keys;
	lodash.keysIn = object.keysIn;
	lodash.map = collection.map;
	lodash.mapKeys = object.mapKeys;
	lodash.mapValues = object.mapValues;
	lodash.matches = util.matches;
	lodash.matchesProperty = util.matchesProperty;
	lodash.memoize = func.memoize;
	lodash.merge = object.merge;
	lodash.mergeWith = object.mergeWith;
	lodash.method = util.method;
	lodash.methodOf = util.methodOf;
	lodash.mixin = mixin$1;
	lodash.negate = negate;
	lodash.nthArg = util.nthArg;
	lodash.omit = object.omit;
	lodash.omitBy = object.omitBy;
	lodash.once = func.once;
	lodash.orderBy = collection.orderBy;
	lodash.over = util.over;
	lodash.overArgs = func.overArgs;
	lodash.overEvery = util.overEvery;
	lodash.overSome = util.overSome;
	lodash.partial = func.partial;
	lodash.partialRight = func.partialRight;
	lodash.partition = collection.partition;
	lodash.pick = object.pick;
	lodash.pickBy = object.pickBy;
	lodash.property = util.property;
	lodash.propertyOf = util.propertyOf;
	lodash.pull = array.pull;
	lodash.pullAll = array.pullAll;
	lodash.pullAllBy = array.pullAllBy;
	lodash.pullAllWith = array.pullAllWith;
	lodash.pullAt = array.pullAt;
	lodash.range = util.range;
	lodash.rangeRight = util.rangeRight;
	lodash.rearg = func.rearg;
	lodash.reject = collection.reject;
	lodash.remove = array.remove;
	lodash.rest = func.rest;
	lodash.reverse = array.reverse;
	lodash.sampleSize = collection.sampleSize;
	lodash.set = object.set;
	lodash.setWith = object.setWith;
	lodash.shuffle = collection.shuffle;
	lodash.slice = array.slice;
	lodash.sortBy = collection.sortBy;
	lodash.sortedUniq = array.sortedUniq;
	lodash.sortedUniqBy = array.sortedUniqBy;
	lodash.split = string.split;
	lodash.spread = func.spread;
	lodash.tail = array.tail;
	lodash.take = array.take;
	lodash.takeRight = array.takeRight;
	lodash.takeRightWhile = array.takeRightWhile;
	lodash.takeWhile = array.takeWhile;
	lodash.tap = seq.tap;
	lodash.throttle = func.throttle;
	lodash.thru = thru;
	lodash.toArray = lang.toArray;
	lodash.toPairs = object.toPairs;
	lodash.toPairsIn = object.toPairsIn;
	lodash.toPath = util.toPath;
	lodash.toPlainObject = lang.toPlainObject;
	lodash.transform = object.transform;
	lodash.unary = func.unary;
	lodash.union = array.union;
	lodash.unionBy = array.unionBy;
	lodash.unionWith = array.unionWith;
	lodash.uniq = array.uniq;
	lodash.uniqBy = array.uniqBy;
	lodash.uniqWith = array.uniqWith;
	lodash.unset = object.unset;
	lodash.unzip = array.unzip;
	lodash.unzipWith = array.unzipWith;
	lodash.update = object.update;
	lodash.updateWith = object.updateWith;
	lodash.values = object.values;
	lodash.valuesIn = object.valuesIn;
	lodash.without = array.without;
	lodash.words = string.words;
	lodash.wrap = func.wrap;
	lodash.xor = array.xor;
	lodash.xorBy = array.xorBy;
	lodash.xorWith = array.xorWith;
	lodash.zip = array.zip;
	lodash.zipObject = array.zipObject;
	lodash.zipObjectDeep = array.zipObjectDeep;
	lodash.zipWith = array.zipWith; // Add aliases.

	lodash.entries = object.toPairs;
	lodash.entriesIn = object.toPairsIn;
	lodash.extend = object.assignIn;
	lodash.extendWith = object.assignInWith; // Add methods to `lodash.prototype`.

	mixin$1(lodash, lodash); // Add methods that return unwrapped values in chain sequences.

	lodash.add = math.add;
	lodash.attempt = util.attempt;
	lodash.camelCase = string.camelCase;
	lodash.capitalize = string.capitalize;
	lodash.ceil = math.ceil;
	lodash.clamp = number.clamp;
	lodash.clone = lang.clone;
	lodash.cloneDeep = lang.cloneDeep;
	lodash.cloneDeepWith = lang.cloneDeepWith;
	lodash.cloneWith = lang.cloneWith;
	lodash.conformsTo = lang.conformsTo;
	lodash.deburr = string.deburr;
	lodash.defaultTo = util.defaultTo;
	lodash.divide = math.divide;
	lodash.endsWith = string.endsWith;
	lodash.eq = lang.eq;
	lodash.escape = string.escape;
	lodash.escapeRegExp = string.escapeRegExp;
	lodash.every = collection.every;
	lodash.find = collection.find;
	lodash.findIndex = array.findIndex;
	lodash.findKey = object.findKey;
	lodash.findLast = collection.findLast;
	lodash.findLastIndex = array.findLastIndex;
	lodash.findLastKey = object.findLastKey;
	lodash.floor = math.floor;
	lodash.forEach = collection.forEach;
	lodash.forEachRight = collection.forEachRight;
	lodash.forIn = object.forIn;
	lodash.forInRight = object.forInRight;
	lodash.forOwn = object.forOwn;
	lodash.forOwnRight = object.forOwnRight;
	lodash.get = object.get;
	lodash.gt = lang.gt;
	lodash.gte = lang.gte;
	lodash.has = object.has;
	lodash.hasIn = object.hasIn;
	lodash.head = array.head;
	lodash.identity = identity;
	lodash.includes = collection.includes;
	lodash.indexOf = array.indexOf;
	lodash.inRange = number.inRange;
	lodash.invoke = object.invoke;
	lodash.isArguments = lang.isArguments;
	lodash.isArray = isArray;
	lodash.isArrayBuffer = lang.isArrayBuffer;
	lodash.isArrayLike = lang.isArrayLike;
	lodash.isArrayLikeObject = lang.isArrayLikeObject;
	lodash.isBoolean = lang.isBoolean;
	lodash.isBuffer = lang.isBuffer;
	lodash.isDate = lang.isDate;
	lodash.isElement = lang.isElement;
	lodash.isEmpty = lang.isEmpty;
	lodash.isEqual = lang.isEqual;
	lodash.isEqualWith = lang.isEqualWith;
	lodash.isError = lang.isError;
	lodash.isFinite = lang.isFinite;
	lodash.isFunction = lang.isFunction;
	lodash.isInteger = lang.isInteger;
	lodash.isLength = lang.isLength;
	lodash.isMap = lang.isMap;
	lodash.isMatch = lang.isMatch;
	lodash.isMatchWith = lang.isMatchWith;
	lodash.isNaN = lang.isNaN;
	lodash.isNative = lang.isNative;
	lodash.isNil = lang.isNil;
	lodash.isNull = lang.isNull;
	lodash.isNumber = lang.isNumber;
	lodash.isObject = isObject;
	lodash.isObjectLike = lang.isObjectLike;
	lodash.isPlainObject = lang.isPlainObject;
	lodash.isRegExp = lang.isRegExp;
	lodash.isSafeInteger = lang.isSafeInteger;
	lodash.isSet = lang.isSet;
	lodash.isString = lang.isString;
	lodash.isSymbol = lang.isSymbol;
	lodash.isTypedArray = lang.isTypedArray;
	lodash.isUndefined = lang.isUndefined;
	lodash.isWeakMap = lang.isWeakMap;
	lodash.isWeakSet = lang.isWeakSet;
	lodash.join = array.join;
	lodash.kebabCase = string.kebabCase;
	lodash.last = last;
	lodash.lastIndexOf = array.lastIndexOf;
	lodash.lowerCase = string.lowerCase;
	lodash.lowerFirst = string.lowerFirst;
	lodash.lt = lang.lt;
	lodash.lte = lang.lte;
	lodash.max = math.max;
	lodash.maxBy = math.maxBy;
	lodash.mean = math.mean;
	lodash.meanBy = math.meanBy;
	lodash.min = math.min;
	lodash.minBy = math.minBy;
	lodash.stubArray = util.stubArray;
	lodash.stubFalse = util.stubFalse;
	lodash.stubObject = util.stubObject;
	lodash.stubString = util.stubString;
	lodash.stubTrue = util.stubTrue;
	lodash.multiply = math.multiply;
	lodash.nth = array.nth;
	lodash.noop = util.noop;
	lodash.now = date.now;
	lodash.pad = string.pad;
	lodash.padEnd = string.padEnd;
	lodash.padStart = string.padStart;
	lodash.parseInt = string.parseInt;
	lodash.random = number.random;
	lodash.reduce = collection.reduce;
	lodash.reduceRight = collection.reduceRight;
	lodash.repeat = string.repeat;
	lodash.replace = string.replace;
	lodash.result = object.result;
	lodash.round = math.round;
	lodash.sample = collection.sample;
	lodash.size = collection.size;
	lodash.snakeCase = string.snakeCase;
	lodash.some = collection.some;
	lodash.sortedIndex = array.sortedIndex;
	lodash.sortedIndexBy = array.sortedIndexBy;
	lodash.sortedIndexOf = array.sortedIndexOf;
	lodash.sortedLastIndex = array.sortedLastIndex;
	lodash.sortedLastIndexBy = array.sortedLastIndexBy;
	lodash.sortedLastIndexOf = array.sortedLastIndexOf;
	lodash.startCase = string.startCase;
	lodash.startsWith = string.startsWith;
	lodash.subtract = math.subtract;
	lodash.sum = math.sum;
	lodash.sumBy = math.sumBy;
	lodash.template = string.template;
	lodash.times = util.times;
	lodash.toFinite = lang.toFinite;
	lodash.toInteger = toInteger;
	lodash.toLength = lang.toLength;
	lodash.toLower = string.toLower;
	lodash.toNumber = lang.toNumber;
	lodash.toSafeInteger = lang.toSafeInteger;
	lodash.toString = lang.toString;
	lodash.toUpper = string.toUpper;
	lodash.trim = string.trim;
	lodash.trimEnd = string.trimEnd;
	lodash.trimStart = string.trimStart;
	lodash.truncate = string.truncate;
	lodash.unescape = string.unescape;
	lodash.uniqueId = util.uniqueId;
	lodash.upperCase = string.upperCase;
	lodash.upperFirst = string.upperFirst; // Add aliases.

	lodash.each = collection.forEach;
	lodash.eachRight = collection.forEachRight;
	lodash.first = array.head;
	mixin$1(lodash, function () {
	  var source = {};
	  baseForOwn(lodash, function (func$$1, methodName) {
	    if (!hasOwnProperty$n.call(lodash.prototype, methodName)) {
	      source[methodName] = func$$1;
	    }
	  });
	  return source;
	}(), {
	  'chain': false
	});
	/**
	 * The semantic version number.
	 *
	 * @static
	 * @memberOf _
	 * @type {string}
	 */

	lodash.VERSION = VERSION;
	(lodash.templateSettings = string.templateSettings).imports._ = lodash; // Assign default placeholders.

	arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
	  lodash[methodName].placeholder = lodash;
	}); // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

	arrayEach(['drop', 'take'], function (methodName, index) {
	  LazyWrapper.prototype[methodName] = function (n) {
	    n = n === undefined ? 1 : nativeMax$g(toInteger(n), 0);
	    var result$$1 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

	    if (result$$1.__filtered__) {
	      result$$1.__takeCount__ = nativeMin$e(n, result$$1.__takeCount__);
	    } else {
	      result$$1.__views__.push({
	        'size': nativeMin$e(n, MAX_ARRAY_LENGTH$6),
	        'type': methodName + (result$$1.__dir__ < 0 ? 'Right' : '')
	      });
	    }

	    return result$$1;
	  };

	  LazyWrapper.prototype[methodName + 'Right'] = function (n) {
	    return this.reverse()[methodName](n).reverse();
	  };
	}); // Add `LazyWrapper` methods that accept an `iteratee` value.

	arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
	  var type = index + 1,
	      isFilter = type == LAZY_FILTER_FLAG$1 || type == LAZY_WHILE_FLAG;

	  LazyWrapper.prototype[methodName] = function (iteratee$$1) {
	    var result$$1 = this.clone();

	    result$$1.__iteratees__.push({
	      'iteratee': baseIteratee(iteratee$$1, 3),
	      'type': type
	    });

	    result$$1.__filtered__ = result$$1.__filtered__ || isFilter;
	    return result$$1;
	  };
	}); // Add `LazyWrapper` methods for `_.head` and `_.last`.

	arrayEach(['head', 'last'], function (methodName, index) {
	  var takeName = 'take' + (index ? 'Right' : '');

	  LazyWrapper.prototype[methodName] = function () {
	    return this[takeName](1).value()[0];
	  };
	}); // Add `LazyWrapper` methods for `_.initial` and `_.tail`.

	arrayEach(['initial', 'tail'], function (methodName, index) {
	  var dropName = 'drop' + (index ? '' : 'Right');

	  LazyWrapper.prototype[methodName] = function () {
	    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	  };
	});

	LazyWrapper.prototype.compact = function () {
	  return this.filter(identity);
	};

	LazyWrapper.prototype.find = function (predicate) {
	  return this.filter(predicate).head();
	};

	LazyWrapper.prototype.findLast = function (predicate) {
	  return this.reverse().find(predicate);
	};

	LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
	  if (typeof path == 'function') {
	    return new LazyWrapper(this);
	  }

	  return this.map(function (value) {
	    return baseInvoke(value, path, args);
	  });
	});

	LazyWrapper.prototype.reject = function (predicate) {
	  return this.filter(negate(baseIteratee(predicate)));
	};

	LazyWrapper.prototype.slice = function (start, end) {
	  start = toInteger(start);
	  var result$$1 = this;

	  if (result$$1.__filtered__ && (start > 0 || end < 0)) {
	    return new LazyWrapper(result$$1);
	  }

	  if (start < 0) {
	    result$$1 = result$$1.takeRight(-start);
	  } else if (start) {
	    result$$1 = result$$1.drop(start);
	  }

	  if (end !== undefined) {
	    end = toInteger(end);
	    result$$1 = end < 0 ? result$$1.dropRight(-end) : result$$1.take(end - start);
	  }

	  return result$$1;
	};

	LazyWrapper.prototype.takeRightWhile = function (predicate) {
	  return this.reverse().takeWhile(predicate).reverse();
	};

	LazyWrapper.prototype.toArray = function () {
	  return this.take(MAX_ARRAY_LENGTH$6);
	}; // Add `LazyWrapper` methods to `lodash.prototype`.


	baseForOwn(LazyWrapper.prototype, function (func$$1, methodName) {
	  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	      isTaker = /^(?:head|last)$/.test(methodName),
	      lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
	      retUnwrapped = isTaker || /^find/.test(methodName);

	  if (!lodashFunc) {
	    return;
	  }

	  lodash.prototype[methodName] = function () {
	    var value = this.__wrapped__,
	        args = isTaker ? [1] : arguments,
	        isLazy = value instanceof LazyWrapper,
	        iteratee$$1 = args[0],
	        useLazy = isLazy || isArray(value);

	    var interceptor = function interceptor(value) {
	      var result$$1 = lodashFunc.apply(lodash, arrayPush([value], args));
	      return isTaker && chainAll ? result$$1[0] : result$$1;
	    };

	    if (useLazy && checkIteratee && typeof iteratee$$1 == 'function' && iteratee$$1.length != 1) {
	      // Avoid lazy use if the iteratee has a "length" value other than `1`.
	      isLazy = useLazy = false;
	    }

	    var chainAll = this.__chain__,
	        isHybrid = !!this.__actions__.length,
	        isUnwrapped = retUnwrapped && !chainAll,
	        onlyLazy = isLazy && !isHybrid;

	    if (!retUnwrapped && useLazy) {
	      value = onlyLazy ? value : new LazyWrapper(this);
	      var result$$1 = func$$1.apply(value, args);

	      result$$1.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });

	      return new LodashWrapper(result$$1, chainAll);
	    }

	    if (isUnwrapped && onlyLazy) {
	      return func$$1.apply(this, args);
	    }

	    result$$1 = this.thru(interceptor);
	    return isUnwrapped ? isTaker ? result$$1.value()[0] : result$$1.value() : result$$1;
	  };
	}); // Add `Array` methods to `lodash.prototype`.

	arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
	  var func$$1 = arrayProto$5[methodName],
	      chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	  lodash.prototype[methodName] = function () {
	    var args = arguments;

	    if (retUnwrapped && !this.__chain__) {
	      var value = this.value();
	      return func$$1.apply(isArray(value) ? value : [], args);
	    }

	    return this[chainName](function (value) {
	      return func$$1.apply(isArray(value) ? value : [], args);
	    });
	  };
	}); // Map minified method names to their real names.

	baseForOwn(LazyWrapper.prototype, function (func$$1, methodName) {
	  var lodashFunc = lodash[methodName];

	  if (lodashFunc) {
	    var key = lodashFunc.name + '',
	        names = realNames[key] || (realNames[key] = []);
	    names.push({
	      'name': methodName,
	      'func': lodashFunc
	    });
	  }
	});
	realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG$6).name] = [{
	  'name': 'wrapper',
	  'func': undefined
	}]; // Add methods to `LazyWrapper`.

	LazyWrapper.prototype.clone = lazyClone;
	LazyWrapper.prototype.reverse = lazyReverse;
	LazyWrapper.prototype.value = lazyValue; // Add chain sequence methods to the `lodash` wrapper.

	lodash.prototype.at = seq.at;
	lodash.prototype.chain = seq.wrapperChain;
	lodash.prototype.commit = seq.commit;
	lodash.prototype.next = seq.next;
	lodash.prototype.plant = seq.plant;
	lodash.prototype.reverse = seq.reverse;
	lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = seq.value; // Add lazy aliases.

	lodash.prototype.first = lodash.prototype.head;

	if (symIterator$1) {
	  lodash.prototype[symIterator$1] = seq.toIterator;
	}

	/**
	 * @license
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="es" -o ./`
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	function emptyFunction() {}

	function emptyFunctionWithReset() {}

	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function () {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1) {
	      // It is still safe when called from React.
	      return;
	    }

	    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	    err.name = 'Invariant Violation';
	    throw err;
	  }
	  shim.isRequired = shim;

	  function getShim() {
	    return shim;
	  }
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,
	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims();
	}
	});
	var propTypes_1 = propTypes.func;
	var propTypes_2 = propTypes.object;
	var propTypes_3 = propTypes.oneOfType;
	var propTypes_4 = propTypes.element;

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
	function defaultSetTimout() {
	  throw new Error('setTimeout has not been defined');
	}

	function defaultClearTimeout() {
	  throw new Error('clearTimeout has not been defined');
	}

	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;

	if (typeof global$1.setTimeout === 'function') {
	  cachedSetTimeout = setTimeout;
	}

	if (typeof global$1.clearTimeout === 'function') {
	  cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	  if (cachedSetTimeout === setTimeout) {
	    //normal enviroments in sane situations
	    return setTimeout(fun, 0);
	  } // if setTimeout wasn't available but was latter defined


	  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	    cachedSetTimeout = setTimeout;
	    return setTimeout(fun, 0);
	  }

	  try {
	    // when when somebody has screwed with setTimeout but no I.E. maddness
	    return cachedSetTimeout(fun, 0);
	  } catch (e) {
	    try {
	      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	      return cachedSetTimeout.call(null, fun, 0);
	    } catch (e) {
	      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	      return cachedSetTimeout.call(this, fun, 0);
	    }
	  }
	}

	function runClearTimeout(marker) {
	  if (cachedClearTimeout === clearTimeout) {
	    //normal enviroments in sane situations
	    return clearTimeout(marker);
	  } // if clearTimeout wasn't available but was latter defined


	  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	    cachedClearTimeout = clearTimeout;
	    return clearTimeout(marker);
	  }

	  try {
	    // when when somebody has screwed with setTimeout but no I.E. maddness
	    return cachedClearTimeout(marker);
	  } catch (e) {
	    try {
	      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	      return cachedClearTimeout.call(null, marker);
	    } catch (e) {
	      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	      return cachedClearTimeout.call(this, marker);
	    }
	  }
	}

	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	  if (!draining || !currentQueue) {
	    return;
	  }

	  draining = false;

	  if (currentQueue.length) {
	    queue = currentQueue.concat(queue);
	  } else {
	    queueIndex = -1;
	  }

	  if (queue.length) {
	    drainQueue();
	  }
	}

	function drainQueue() {
	  if (draining) {
	    return;
	  }

	  var timeout = runTimeout(cleanUpNextTick);
	  draining = true;
	  var len = queue.length;

	  while (len) {
	    currentQueue = queue;
	    queue = [];

	    while (++queueIndex < len) {
	      if (currentQueue) {
	        currentQueue[queueIndex].run();
	      }
	    }

	    queueIndex = -1;
	    len = queue.length;
	  }

	  currentQueue = null;
	  draining = false;
	  runClearTimeout(timeout);
	}

	function nextTick(fun) {
	  var args = new Array(arguments.length - 1);

	  if (arguments.length > 1) {
	    for (var i = 1; i < arguments.length; i++) {
	      args[i - 1] = arguments[i];
	    }
	  }

	  queue.push(new Item(fun, args));

	  if (queue.length === 1 && !draining) {
	    runTimeout(drainQueue);
	  }
	} // v8 likes predictible objects

	function Item(fun, array) {
	  this.fun = fun;
	  this.array = array;
	}

	Item.prototype.run = function () {
	  this.fun.apply(null, this.array);
	};

	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues

	var versions = {};
	var release = {};
	var config = {};

	function noop$1() {}

	var on = noop$1;
	var addListener = noop$1;
	var once$1 = noop$1;
	var off = noop$1;
	var removeListener = noop$1;
	var removeAllListeners = noop$1;
	var emit = noop$1;
	function binding(name) {
	  throw new Error('process.binding is not supported');
	}
	function cwd() {
	  return '/';
	}
	function chdir(dir) {
	  throw new Error('process.chdir is not supported');
	}
	function umask() {
	  return 0;
	} // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

	var performance = global$1.performance || {};

	var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
	  return new Date().getTime();
	}; // generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime


	function hrtime(previousTimestamp) {
	  var clocktime = performanceNow.call(performance) * 1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor(clocktime % 1 * 1e9);

	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];

	    if (nanoseconds < 0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }

	  return [seconds, nanoseconds];
	}
	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}
	var process = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once$1,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var browser$1 = true;

	/* eslint-env browser */

	/**
	 * This is the web browser implementation of `debug()`.
	 */
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();
	/**
	 * Colors.
	 */

	exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	// eslint-disable-next-line complexity

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
	    return true;
	  } // Internet Explorer and Edge do not support colors.


	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  } // Is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


	  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
	  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
	  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
	  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
	}
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */


	function formatArgs(args) {
	  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

	  if (!this.useColors) {
	    return;
	  }

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into

	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function (match) {
	    if (match === '%%') {
	      return;
	    }

	    index++;

	    if (match === '%c') {
	      // We only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	  args.splice(lastC, 0, c);
	}
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */


	function log() {
	  var _console;

	  // This hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return (typeof console === "undefined" ? "undefined" : _typeof_1$1(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
	}
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */


	function save(namespaces) {
	  try {
	    if (namespaces) {
	      exports.storage.setItem('debug', namespaces);
	    } else {
	      exports.storage.removeItem('debug');
	    }
	  } catch (error) {// Swallow
	    // XXX (@Qix-) should we be logging these?
	  }
	}
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */


	function load() {
	  var r;

	  try {
	    r = exports.storage.getItem('debug');
	  } catch (error) {} // Swallow
	  // XXX (@Qix-) should we be logging these?
	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */


	function localstorage() {
	  try {
	    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
	    // The Browser also has localStorage in the global context.
	    return localStorage;
	  } catch (error) {// Swallow
	    // XXX (@Qix-) should we be logging these?
	  }
	}

	module.exports = require('./common')(exports);
	var formatters = module.exports.formatters;
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
	  try {
	    return JSON.stringify(v);
	  } catch (error) {
	    return '[UnexpectedJSONParseError]: ' + error.message;
	  }
	};

	var browser$2 = /*#__PURE__*/Object.freeze({

	});

	// MIT lisence
	// from https://github.com/substack/tty-browserify/blob/1ba769a6429d242f36226538835b4034bf6b7886/index.js
	function isatty() {
	  return false;
	}
	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	var tty = {
	  isatty: isatty,
	  ReadStream: ReadStream,
	  WriteStream: WriteStream
	};

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;

	function init() {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray(b64) {
	  if (!inited) {
	    init();
	  }

	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4');
	  } // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice


	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

	  arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

	  l = placeHolders > 0 ? len - 4 : len;
	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = tmp >> 16 & 0xFF;
	    arr[L++] = tmp >> 8 & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
	    arr[L++] = tmp >> 8 & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr;
	}

	function tripletToBase64(num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
	}

	function encodeChunk(uint8, start, end) {
	  var tmp;
	  var output = [];

	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
	    output.push(tripletToBase64(tmp));
	  }

	  return output.join('');
	}

	function fromByteArray(uint8) {
	  if (!inited) {
	    init();
	  }

	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3
	  // go through the array every three bytes, we'll deal with trailing stuff later

	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
	  } // pad the end with zeros, but make sure to not forget the extra bytes


	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[tmp << 4 & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    output += lookup[tmp >> 10];
	    output += lookup[tmp >> 4 & 0x3F];
	    output += lookup[tmp << 2 & 0x3F];
	    output += '=';
	  }

	  parts.push(output);
	  return parts.join('');
	}

	function read(buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? nBytes - 1 : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];
	  i += d;
	  e = s & (1 << -nBits) - 1;
	  s >>= -nBits;
	  nBits += eLen;

	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;

	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : (s ? -1 : 1) * Infinity;
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }

	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	}
	function write(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
	  var i = isLE ? 0 : nBytes - 1;
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);

	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }

	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }

	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = e << mLen | m;
	  eLen += mLen;

	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$1 = {}.toString;
	var isArray$1 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */

	Buffer$2.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

	function kMaxLength() {
	  return Buffer$2.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
	}

	function createBuffer(that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length');
	  }

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$2.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$2(length);
	    }

	    that.length = length;
	  }

	  return that;
	}
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */


	function Buffer$2(arg, encodingOrOffset, length) {
	  if (!Buffer$2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$2)) {
	    return new Buffer$2(arg, encodingOrOffset, length);
	  } // Common case.


	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error('If encoding is specified then the first argument must be a string');
	    }

	    return allocUnsafe$1(this, arg);
	  }

	  return from(this, arg, encodingOrOffset, length);
	}
	Buffer$2.poolSize = 8192; // not used by this implementation
	// TODO: Legacy, not needed anymore. Remove in next major version.

	Buffer$2._augment = function (arr) {
	  arr.__proto__ = Buffer$2.prototype;
	  return arr;
	};

	function from(that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length);
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset);
	  }

	  return fromObject(that, value);
	}
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/


	Buffer$2.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length);
	};

	if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	  Buffer$2.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$2.__proto__ = Uint8Array;
	}

	function assertSize(size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number');
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative');
	  }
	}

	function alloc(that, size, fill, encoding) {
	  assertSize(size);

	  if (size <= 0) {
	    return createBuffer(that, size);
	  }

	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
	  }

	  return createBuffer(that, size);
	}
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/


	Buffer$2.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding);
	};

	function allocUnsafe$1(that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

	  if (!Buffer$2.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }

	  return that;
	}
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */


	Buffer$2.allocUnsafe = function (size) {
	  return allocUnsafe$1(null, size);
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */


	Buffer$2.allocUnsafeSlow = function (size) {
	  return allocUnsafe$1(null, size);
	};

	function fromString(that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$2.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding');
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);
	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that;
	}

	function fromArrayLike(that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }

	  return that;
	}

	function fromArrayBuffer(that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds');
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds');
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$2.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }

	  return that;
	}

	function fromObject(that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that;
	    }

	    obj.copy(that, 0, 0, len);
	    return that;
	  }

	  if (obj) {
	    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0);
	      }

	      return fromArrayLike(that, obj);
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
	}

	function checked(length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
	  }

	  return length | 0;
	}
	Buffer$2.isBuffer = isBuffer$1;

	function internalIsBuffer(b) {
	  return !!(b != null && b._isBuffer);
	}

	Buffer$2.compare = function compare(a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers');
	  }

	  if (a === b) return 0;
	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) return -1;
	  if (y < x) return 1;
	  return 0;
	};

	Buffer$2.isEncoding = function isEncoding(encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true;

	    default:
	      return false;
	  }
	};

	Buffer$2.concat = function concat(list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers');
	  }

	  if (list.length === 0) {
	    return Buffer$2.alloc(0);
	  }

	  var i;

	  if (length === undefined) {
	    length = 0;

	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$2.allocUnsafe(length);
	  var pos = 0;

	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];

	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers');
	    }

	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }

	  return buffer;
	};

	function byteLength(string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length;
	  }

	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength;
	  }

	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0; // Use a for loop to avoid recursion

	  var loweredCase = false;

	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len;

	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length;

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2;

	      case 'hex':
	        return len >>> 1;

	      case 'base64':
	        return base64ToBytes(string).length;

	      default:
	        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	Buffer$2.byteLength = byteLength;

	function slowToString(encoding, start, end) {
	  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

	  if (start === undefined || start < 0) {
	    start = 0;
	  } // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.


	  if (start > this.length) {
	    return '';
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return '';
	  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return '';
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end);

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end);

	      case 'ascii':
	        return asciiSlice(this, start, end);

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end);

	      case 'base64':
	        return base64Slice(this, start, end);

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end);

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.


	Buffer$2.prototype._isBuffer = true;

	function swap(b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$2.prototype.swap16 = function swap16() {
	  var len = this.length;

	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits');
	  }

	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }

	  return this;
	};

	Buffer$2.prototype.swap32 = function swap32() {
	  var len = this.length;

	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits');
	  }

	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }

	  return this;
	};

	Buffer$2.prototype.swap64 = function swap64() {
	  var len = this.length;

	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits');
	  }

	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }

	  return this;
	};

	Buffer$2.prototype.toString = function toString() {
	  var length = this.length | 0;
	  if (length === 0) return '';
	  if (arguments.length === 0) return utf8Slice(this, 0, length);
	  return slowToString.apply(this, arguments);
	};

	Buffer$2.prototype.equals = function equals(b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
	  if (this === b) return true;
	  return Buffer$2.compare(this, b) === 0;
	};

	Buffer$2.prototype.inspect = function inspect() {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;

	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }

	  return '<Buffer ' + str + '>';
	};

	Buffer$2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer');
	  }

	  if (start === undefined) {
	    start = 0;
	  }

	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }

	  if (thisStart === undefined) {
	    thisStart = 0;
	  }

	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index');
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0;
	  }

	  if (thisStart >= thisEnd) {
	    return -1;
	  }

	  if (start >= end) {
	    return 1;
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;
	  if (this === target) return 0;
	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);
	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break;
	    }
	  }

	  if (x < y) return -1;
	  if (y < x) return 1;
	  return 0;
	}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf


	function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1; // Normalize byteOffset

	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }

	  byteOffset = +byteOffset; // Coerce to Number.

	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : buffer.length - 1;
	  } // Normalize byteOffset: negative offsets start from the end of the buffer


	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

	  if (byteOffset >= buffer.length) {
	    if (dir) return -1;else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;else return -1;
	  } // Normalize val


	  if (typeof val === 'string') {
	    val = Buffer$2.from(val, encoding);
	  } // Finally, search either indexOf (if dir is true) or lastIndexOf


	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1;
	    }

	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]

	    if (Buffer$2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
	      }
	    }

	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
	  }

	  throw new TypeError('val must be string, number or Buffer');
	}

	function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();

	    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1;
	      }

	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read$$1(buf, i) {
	    if (indexSize === 1) {
	      return buf[i];
	    } else {
	      return buf.readUInt16BE(i * indexSize);
	    }
	  }

	  var i;

	  if (dir) {
	    var foundIndex = -1;

	    for (i = byteOffset; i < arrLength; i++) {
	      if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;

	      for (var j = 0; j < valLength; j++) {
	        if (read$$1(arr, i + j) !== read$$1(val, j)) {
	          found = false;
	          break;
	        }
	      }

	      if (found) return i;
	    }
	  }

	  return -1;
	}

	Buffer$2.prototype.includes = function includes(val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1;
	};

	Buffer$2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};

	Buffer$2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};

	function hexWrite(buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;

	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);

	    if (length > remaining) {
	      length = remaining;
	    }
	  } // must be an even number of digits


	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }

	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i;
	    buf[offset + i] = parsed;
	  }

	  return i;
	}

	function utf8Write(buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}

	function asciiWrite(buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length);
	}

	function latin1Write(buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length);
	}

	function base64Write(buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length);
	}

	function ucs2Write(buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}

	Buffer$2.prototype.write = function write$$1(string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0; // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0; // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;

	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    } // legacy write(string, encoding, offset, length) - remove in v0.13

	  } else {
	    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds');
	  }

	  if (!encoding) encoding = 'utf8';
	  var loweredCase = false;

	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length);

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length);

	      case 'ascii':
	        return asciiWrite(this, string, offset, length);

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length);

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length);

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length);

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$2.prototype.toJSON = function toJSON() {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  };
	};

	function base64Slice(buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf);
	  } else {
	    return fromByteArray(buf.slice(start, end));
	  }
	}

	function utf8Slice(buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];
	  var i = start;

	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }

	          break;

	        case 2:
	          secondByte = buf[i + 1];

	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }

	          break;

	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];

	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }

	          break;

	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];

	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }

	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res);
	} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety


	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray(codePoints) {
	  var len = codePoints.length;

	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
	  } // Decode in chunks to avoid "call stack size exceeded".


	  var res = '';
	  var i = 0;

	  while (i < len) {
	    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
	  }

	  return res;
	}

	function asciiSlice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }

	  return ret;
	}

	function latin1Slice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }

	  return ret;
	}

	function hexSlice(buf, start, end) {
	  var len = buf.length;
	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;
	  var out = '';

	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }

	  return out;
	}

	function utf16leSlice(buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';

	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }

	  return res;
	}

	Buffer$2.prototype.slice = function slice(start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;
	  var newBuf;

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$2.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$2(sliceLen, undefined);

	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf;
	};
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */


	function checkOffset(offset, ext, length) {
	  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	}

	Buffer$2.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  var val = this[offset];
	  var mul = 1;
	  var i = 0;

	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val;
	};

	Buffer$2.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;

	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;

	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val;
	};

	Buffer$2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset];
	};

	Buffer$2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | this[offset + 1] << 8;
	};

	Buffer$2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] << 8 | this[offset + 1];
	};

	Buffer$2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
	};

	Buffer$2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};

	Buffer$2.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  var val = this[offset];
	  var mul = 1;
	  var i = 0;

	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  mul *= 0x80;
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	  return val;
	};

	Buffer$2.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];

	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }

	  mul *= 0x80;
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	  return val;
	};

	Buffer$2.prototype.readInt8 = function readInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return this[offset];
	  return (0xff - this[offset] + 1) * -1;
	};

	Buffer$2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | this[offset + 1] << 8;
	  return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer$2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | this[offset] << 8;
	  return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer$2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};

	Buffer$2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};

	Buffer$2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4);
	};

	Buffer$2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4);
	};

	Buffer$2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8);
	};

	Buffer$2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8);
	};

	function checkInt(buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
	  if (offset + ext > buf.length) throw new RangeError('Index out of range');
	}

	Buffer$2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;

	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;

	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = value / mul & 0xFF;
	  }

	  return offset + byteLength;
	};

	Buffer$2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;

	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;

	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = value / mul & 0xFF;
	  }

	  return offset + byteLength;
	};

	Buffer$2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = value & 0xff;
	  return offset + 1;
	};

	function objectWriteUInt16(buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;

	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }

	  return offset + 2;
	};

	Buffer$2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }

	  return offset + 2;
	};

	function objectWriteUInt32(buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;

	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
	  }
	}

	Buffer$2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = value >>> 24;
	    this[offset + 2] = value >>> 16;
	    this[offset + 1] = value >>> 8;
	    this[offset] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }

	  return offset + 4;
	};

	Buffer$2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }

	  return offset + 4;
	};

	Buffer$2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;

	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;

	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }

	    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength;
	};

	Buffer$2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;

	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;

	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }

	    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength;
	};

	Buffer$2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = value & 0xff;
	  return offset + 1;
	};

	Buffer$2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }

	  return offset + 2;
	};

	Buffer$2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }

	  return offset + 2;
	};

	Buffer$2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    this[offset + 2] = value >>> 16;
	    this[offset + 3] = value >>> 24;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }

	  return offset + 4;
	};

	Buffer$2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;

	  if (Buffer$2.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }

	  return offset + 4;
	};

	function checkIEEE754(buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range');
	  if (offset < 0) throw new RangeError('Index out of range');
	}

	function writeFloat(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }

	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4;
	}

	Buffer$2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert);
	};

	Buffer$2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert);
	};

	function writeDouble(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }

	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8;
	}

	Buffer$2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert);
	};

	Buffer$2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert);
	}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


	Buffer$2.prototype.copy = function copy(target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

	  if (end === start) return 0;
	  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds');
	  }

	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
	  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

	  if (end > this.length) end = this.length;

	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$2.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
	  }

	  return len;
	}; // Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])


	Buffer$2.prototype.fill = function fill(val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }

	    if (val.length === 1) {
	      var code = val.charCodeAt(0);

	      if (code < 256) {
	        val = code;
	      }
	    }

	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string');
	    }

	    if (typeof encoding === 'string' && !Buffer$2.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding);
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  } // Invalid ranges are not set to a default, so can range check early.


	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index');
	  }

	  if (end <= start) {
	    return this;
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;
	  if (!val) val = 0;
	  var i;

	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$2(val, encoding).toString());
	    var len = bytes.length;

	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this;
	}; // HELPER FUNCTIONS
	// ================


	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean(str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

	  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }

	  return str;
	}

	function stringtrim(str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	}

	function toHex(n) {
	  if (n < 16) return '0' + n.toString(16);
	  return n.toString(16);
	}

	function utf8ToBytes(string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i); // is surrogate component

	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue;
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue;
	        } // valid lead


	        leadSurrogate = codePoint;
	        continue;
	      } // 2 leads in a row


	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue;
	      } // valid surrogate pair


	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null; // encode utf8

	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break;
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break;
	      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break;
	      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break;
	      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	    } else {
	      throw new Error('Invalid code point');
	    }
	  }

	  return bytes;
	}

	function asciiToBytes(str) {
	  var byteArray = [];

	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }

	  return byteArray;
	}

	function utf16leToBytes(str, units) {
	  var c, hi, lo;
	  var byteArray = [];

	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break;
	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray;
	}

	function base64ToBytes(str) {
	  return toByteArray(base64clean(str));
	}

	function blitBuffer(src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if (i + offset >= dst.length || i >= src.length) break;
	    dst[i + offset] = src[i];
	  }

	  return i;
	}

	function isnan(val) {
	  return val !== val; // eslint-disable-line no-self-compare
	} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually


	function isBuffer$1(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
	}

	function isFastBuffer(obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
	} // For Node v0.10 support. Remove this eventually.


	function isSlowBuffer(obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
	}

	var inherits$1;

	if (typeof Object.create === 'function') {
	  inherits$1 = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$1 = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;

	    var TempCtor = function TempCtor() {};

	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}

	var inherits$2 = inherits$1;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString$1(f)) {
	    var objects = [];

	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }

	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function (x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;

	    switch (x) {
	      case '%s':
	        return String(args[i++]);

	      case '%d':
	        return Number(args[i++]);

	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }

	      default:
	        return x;
	    }
	  });

	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull$1(x) || !isObject$1(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }

	  return str;
	}
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.

	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined$1(global$1.process)) {
	    return function () {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;

	  function deprecated() {
	    if (!warned) {
	      {
	        console.error(msg);
	      }

	      warned = true;
	    }

	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}
	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined$1(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();

	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;

	      debugs[set] = function () {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function () {};
	    }
	  }

	  return debugs[set];
	}
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */

	/* legacy: obj, showHidden, depth, colors*/

	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  }; // legacy...

	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];

	  if (isBoolean$1(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  } // set default options


	  if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined$1(ctx.depth)) ctx.depth = 2;
	  if (isUndefined$1(ctx.colors)) ctx.colors = false;
	  if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

	inspect.colors = {
	  'bold': [1, 22],
	  'italic': [3, 23],
	  'underline': [4, 24],
	  'inverse': [7, 27],
	  'white': [37, 39],
	  'grey': [90, 39],
	  'black': [30, 39],
	  'blue': [34, 39],
	  'cyan': [36, 39],
	  'green': [32, 39],
	  'magenta': [35, 39],
	  'red': [31, 39],
	  'yellow': [33, 39]
	}; // Don't use 'blue' not visible on cmd.exe

	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};

	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}

	function stylizeNoColor(str, styleType) {
	  return str;
	}

	function arrayToHash(array) {
	  var hash = {};
	  array.forEach(function (val, idx) {
	    hash[val] = true;
	  });
	  return hash;
	}

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
	  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
	  !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);

	    if (!isString$1(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }

	    return ret;
	  } // Primitive types cannot have properties


	  var primitive = formatPrimitive(ctx, value);

	  if (primitive) {
	    return primitive;
	  } // Look up the keys of the object.


	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  } // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


	  if (isError$1(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  } // Some type of object without properties can be shortcutted.


	  if (keys.length === 0) {
	    if (isFunction$1(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }

	    if (isRegExp$1(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }

	    if (isDate$1(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }

	    if (isError$1(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '',
	      array = false,
	      braces = ['{', '}']; // Make Array say that they are Array

	  if (isArray$2(value)) {
	    array = true;
	    braces = ['[', ']'];
	  } // Make functions say that they are functions


	  if (isFunction$1(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  } // Make RegExps say that they are RegExps


	  if (isRegExp$1(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  } // Make dates with properties first say the date


	  if (isDate$1(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  } // Make error with message first say the error


	  if (isError$1(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp$1(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);
	  var output;

	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function (key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();
	  return reduceToSingleString(output, base, braces);
	}

	function formatPrimitive(ctx, value) {
	  if (isUndefined$1(value)) return ctx.stylize('undefined', 'undefined');

	  if (isString$1(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }

	  if (isNumber$1(value)) return ctx.stylize('' + value, 'number');
	  if (isBoolean$1(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

	  if (isNull$1(value)) return ctx.stylize('null', 'null');
	}

	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}

	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];

	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$o(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
	    } else {
	      output.push('');
	    }
	  }

	  keys.forEach(function (key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
	    }
	  });
	  return output;
	}

	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || {
	    value: value[key]
	  };

	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }

	  if (!hasOwnProperty$o(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }

	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull$1(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }

	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function (line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function (line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }

	  if (isUndefined$1(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }

	    name = JSON.stringify('' + key);

	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}

	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function (prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	} // NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.


	function isArray$2(ar) {
	  return Array.isArray(ar);
	}
	function isBoolean$1(arg) {
	  return typeof arg === 'boolean';
	}
	function isNull$1(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	function isNumber$1(arg) {
	  return typeof arg === 'number';
	}
	function isString$1(arg) {
	  return typeof arg === 'string';
	}
	function isSymbol$1(arg) {
	  return _typeof_1$1(arg) === 'symbol';
	}
	function isUndefined$1(arg) {
	  return arg === void 0;
	}
	function isRegExp$1(re) {
	  return isObject$1(re) && objectToString$1(re) === '[object RegExp]';
	}
	function isObject$1(arg) {
	  return _typeof_1$1(arg) === 'object' && arg !== null;
	}
	function isDate$1(d) {
	  return isObject$1(d) && objectToString$1(d) === '[object Date]';
	}
	function isError$1(e) {
	  return isObject$1(e) && (objectToString$1(e) === '[object Error]' || e instanceof Error);
	}
	function isFunction$1(arg) {
	  return typeof arg === 'function';
	}
	function isPrimitive(arg) {
	  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof_1$1(arg) === 'symbol' || // ES6 symbol
	  typeof arg === 'undefined';
	}
	function isBuffer$2(maybeBuf) {
	  return isBuffer$1(maybeBuf);
	}

	function objectToString$1(o) {
	  return Object.prototype.toString.call(o);
	}

	function pad$1(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}

	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

	function timestamp() {
	  var d = new Date();
	  var time = [pad$1(d.getHours()), pad$1(d.getMinutes()), pad$1(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	} // log is just a thin wrapper to console.log that prepends a timestamp


	function log$1() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}
	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject$1(add)) return origin;
	  var keys = Object.keys(add);
	  var i = keys.length;

	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }

	  return origin;
	}

	function hasOwnProperty$o(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util$1 = {
	  inherits: inherits$2,
	  _extend: _extend,
	  log: log$1,
	  isBuffer: isBuffer$2,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction$1,
	  isError: isError$1,
	  isDate: isDate$1,
	  isObject: isObject$1,
	  isRegExp: isRegExp$1,
	  isUndefined: isUndefined$1,
	  isSymbol: isSymbol$1,
	  isString: isString$1,
	  isNumber: isNumber$1,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull$1,
	  isBoolean: isBoolean$1,
	  isArray: isArray$2,
	  inspect: inspect,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var hasFlag = function (flag, argv$$1) {
	  argv$$1 = argv$$1 || process.argv;
	  var prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
	  var pos = argv$$1.indexOf(prefix + flag);
	  var terminatorPos = argv$$1.indexOf('--');
	  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};

	var _process = process,
	    env$1 = _process.env;
	var forceColor;

	if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
	  forceColor = 0;
	} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
	  forceColor = 1;
	}

	if ('FORCE_COLOR' in env$1) {
	  if (env$1.FORCE_COLOR === true || env$1.FORCE_COLOR === 'true') {
	    forceColor = 1;
	  } else if (env$1.FORCE_COLOR === false || env$1.FORCE_COLOR === 'false') {
	    forceColor = 0;
	  } else {
	    forceColor = env$1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env$1.FORCE_COLOR, 10), 3);
	  }
	}

	function translateLevel(level) {
	  if (level === 0) {
	    return false;
	  }

	  return {
	    level: level,
	    hasBasic: true,
	    has256: level >= 2,
	    has16m: level >= 3
	  };
	}

	function supportsColor(stream) {
	  if (forceColor === 0) {
	    return 0;
	  }

	  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
	    return 3;
	  }

	  if (hasFlag('color=256')) {
	    return 2;
	  }

	  if (stream && !stream.isTTY && forceColor === undefined) {
	    return 0;
	  }

	  var min = forceColor || 0;

	  if (env$1.TERM === 'dumb') {
	    return min;
	  }

	  if ('CI' in env$1) {
	    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function (sign) {
	      return sign in env$1;
	    }) || env$1.CI_NAME === 'codeship') {
	      return 1;
	    }

	    return min;
	  }

	  if ('TEAMCITY_VERSION' in env$1) {
	    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
	  }

	  if (env$1.COLORTERM === 'truecolor') {
	    return 3;
	  }

	  if ('TERM_PROGRAM' in env$1) {
	    var version$$1 = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

	    switch (env$1.TERM_PROGRAM) {
	      case 'iTerm.app':
	        return version$$1 >= 3 ? 3 : 2;

	      case 'Apple_Terminal':
	        return 2;
	      // No default
	    }
	  }

	  if (/-256(color)?$/i.test(env$1.TERM)) {
	    return 2;
	  }

	  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
	    return 1;
	  }

	  if ('COLORTERM' in env$1) {
	    return 1;
	  }

	  return min;
	}

	function getSupportLevel(stream) {
	  var level = supportsColor(stream);
	  return translateLevel(level);
	}

	var supportsColor_1 = {
	  supportsColor: getSupportLevel,
	  stdout: getSupportLevel(process.stdout),
	  stderr: getSupportLevel(process.stderr)
	};

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	var arrayWithoutHoles = _arrayWithoutHoles;

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	var iterableToArray = _iterableToArray;

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	var nonIterableSpread = _nonIterableSpread;

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray;

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */
	function setup(env) {
	  createDebug.debug = createDebug;
	  createDebug.default = createDebug;
	  createDebug.coerce = coerce;
	  createDebug.disable = disable;
	  createDebug.enable = enable;
	  createDebug.enabled = enabled;
	  createDebug.humanize = require('ms');
	  Object.keys(env).forEach(function (key) {
	    createDebug[key] = env[key];
	  });
	  /**
	  * Active `debug` instances.
	  */

	  createDebug.instances = [];
	  /**
	  * The currently active debug mode names, and names to skip.
	  */

	  createDebug.names = [];
	  createDebug.skips = [];
	  /**
	  * Map of special "%n" handling functions, for the debug "format" argument.
	  *
	  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	  */

	  createDebug.formatters = {};
	  /**
	  * Selects a color for a debug namespace
	  * @param {String} namespace The namespace string for the for the debug instance to be colored
	  * @return {Number|String} An ANSI color code for the given namespace
	  * @api private
	  */

	  function selectColor(namespace) {
	    var hash = 0;

	    for (var i = 0; i < namespace.length; i++) {
	      hash = (hash << 5) - hash + namespace.charCodeAt(i);
	      hash |= 0; // Convert to 32bit integer
	    }

	    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	  }

	  createDebug.selectColor = selectColor;
	  /**
	  * Create a debugger with the given `namespace`.
	  *
	  * @param {String} namespace
	  * @return {Function}
	  * @api public
	  */

	  function createDebug(namespace) {
	    var prevTime;

	    function debug() {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      // Disabled?
	      if (!debug.enabled) {
	        return;
	      }

	      var self = debug; // Set `diff` timestamp

	      var curr = Number(new Date());
	      var ms = curr - (prevTime || curr);
	      self.diff = ms;
	      self.prev = prevTime;
	      self.curr = curr;
	      prevTime = curr;
	      args[0] = createDebug.coerce(args[0]);

	      if (typeof args[0] !== 'string') {
	        // Anything else let's inspect with %O
	        args.unshift('%O');
	      } // Apply any `formatters` transformations


	      var index = 0;
	      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
	        // If we encounter an escaped % then don't increase the array index
	        if (match === '%%') {
	          return match;
	        }

	        index++;
	        var formatter = createDebug.formatters[format];

	        if (typeof formatter === 'function') {
	          var val = args[index];
	          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

	          args.splice(index, 1);
	          index--;
	        }

	        return match;
	      }); // Apply env-specific formatting (colors, etc.)

	      createDebug.formatArgs.call(self, args);
	      var logFn = self.log || createDebug.log;
	      logFn.apply(self, args);
	    }

	    debug.namespace = namespace;
	    debug.enabled = createDebug.enabled(namespace);
	    debug.useColors = createDebug.useColors();
	    debug.color = selectColor(namespace);
	    debug.destroy = destroy;
	    debug.extend = extend; // Debug.formatArgs = formatArgs;
	    // debug.rawLog = rawLog;
	    // env-specific initialization logic for debug instances

	    if (typeof createDebug.init === 'function') {
	      createDebug.init(debug);
	    }

	    createDebug.instances.push(debug);
	    return debug;
	  }

	  function destroy() {
	    var index = createDebug.instances.indexOf(this);

	    if (index !== -1) {
	      createDebug.instances.splice(index, 1);
	      return true;
	    }

	    return false;
	  }

	  function extend(namespace, delimiter) {
	    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
	    newDebug.log = this.log;
	    return newDebug;
	  }
	  /**
	  * Enables a debug mode by namespaces. This can include modes
	  * separated by a colon and wildcards.
	  *
	  * @param {String} namespaces
	  * @api public
	  */


	  function enable(namespaces) {
	    createDebug.save(namespaces);
	    createDebug.names = [];
	    createDebug.skips = [];
	    var i;
	    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	    var len = split.length;

	    for (i = 0; i < len; i++) {
	      if (!split[i]) {
	        // ignore empty strings
	        continue;
	      }

	      namespaces = split[i].replace(/\*/g, '.*?');

	      if (namespaces[0] === '-') {
	        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	      } else {
	        createDebug.names.push(new RegExp('^' + namespaces + '$'));
	      }
	    }

	    for (i = 0; i < createDebug.instances.length; i++) {
	      var instance = createDebug.instances[i];
	      instance.enabled = createDebug.enabled(instance.namespace);
	    }
	  }
	  /**
	  * Disable debug output.
	  *
	  * @return {String} namespaces
	  * @api public
	  */


	  function disable() {
	    var namespaces = [].concat(toConsumableArray(createDebug.names.map(toNamespace)), toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
	      return '-' + namespace;
	    }))).join(',');
	    createDebug.enable('');
	    return namespaces;
	  }
	  /**
	  * Returns true if the given mode name is enabled, false otherwise.
	  *
	  * @param {String} name
	  * @return {Boolean}
	  * @api public
	  */


	  function enabled(name) {
	    if (name[name.length - 1] === '*') {
	      return true;
	    }

	    var i;
	    var len;

	    for (i = 0, len = createDebug.skips.length; i < len; i++) {
	      if (createDebug.skips[i].test(name)) {
	        return false;
	      }
	    }

	    for (i = 0, len = createDebug.names.length; i < len; i++) {
	      if (createDebug.names[i].test(name)) {
	        return true;
	      }
	    }

	    return false;
	  }
	  /**
	  * Convert regexp to namespace
	  *
	  * @param {RegExp} regxep
	  * @return {String} namespace
	  * @api private
	  */


	  function toNamespace(regexp) {
	    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
	  }
	  /**
	  * Coerce `val`.
	  *
	  * @param {Mixed} val
	  * @return {Mixed}
	  * @api private
	  */


	  function coerce(val) {
	    if (val instanceof Error) {
	      return val.stack || val.message;
	    }

	    return val;
	  }

	  createDebug.enable(createDebug.load());
	  return createDebug;
	}

	module.exports = setup;

	var common = /*#__PURE__*/Object.freeze({

	});

	var node = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */



	/**
	 * This is the Node.js implementation of `debug()`.
	 */


	exports.init = init;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	try {
	  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	  // eslint-disable-next-line import/no-extraneous-dependencies
	  var supportsColor = supportsColor_1;

	  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
	    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
	  }
	} catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.

	/**
	 * Build up the default `inspectOpts` object from the environment variables.
	 *
	 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
	 */


	exports.inspectOpts = Object.keys(process.env).filter(function (key) {
	  return /^debug_/i.test(key);
	}).reduce(function (obj, key) {
	  // Camel-case
	  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
	    return k.toUpperCase();
	  }); // Coerce string value into JS value

	  var val = process.env[key];

	  if (/^(yes|on|true|enabled)$/i.test(val)) {
	    val = true;
	  } else if (/^(no|off|false|disabled)$/i.test(val)) {
	    val = false;
	  } else if (val === 'null') {
	    val = null;
	  } else {
	    val = Number(val);
	  }

	  obj[prop] = val;
	  return obj;
	}, {});
	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
	}
	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */


	function formatArgs(args) {
	  var name = this.namespace,
	      useColors = this.useColors;

	  if (useColors) {
	    var c = this.color;
	    var colorCode = "\x1B[3" + (c < 8 ? c : '8;5;' + c);
	    var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
	    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
	    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + "\x1B[0m");
	  } else {
	    args[0] = getDate() + name + ' ' + args[0];
	  }
	}

	function getDate() {
	  if (exports.inspectOpts.hideDate) {
	    return '';
	  }

	  return new Date().toISOString() + ' ';
	}
	/**
	 * Invokes `util.format()` with the specified arguments and writes to stderr.
	 */


	function log() {
	  return process.stderr.write(util$1.format.apply(util$1, arguments) + '\n');
	}
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */


	function save(namespaces) {
	  if (namespaces) {
	    process.env.DEBUG = namespaces;
	  } else {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  }
	}
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */


	function load() {
	  return process.env.DEBUG;
	}
	/**
	 * Init logic for `debug` instances.
	 *
	 * Create a new `inspectOpts` object in case `useColors` is set
	 * differently for a particular `debug` instance.
	 */


	function init(debug) {
	  debug.inspectOpts = {};
	  var keys = Object.keys(exports.inspectOpts);

	  for (var i = 0; i < keys.length; i++) {
	    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	  }
	}

	module.exports = common(exports);
	var formatters = module.exports.formatters;
	/**
	 * Map %o to `util.inspect()`, all on a single line.
	 */

	formatters.o = function (v) {
	  this.inspectOpts.colors = this.useColors;
	  return util$1.inspect(v, this.inspectOpts).replace(/\s*\n\s*/g, ' ');
	};
	/**
	 * Map %O to `util.inspect()`, allowing multiple lines if needed.
	 */


	formatters.O = function (v) {
	  this.inspectOpts.colors = this.useColors;
	  return util$1.inspect(v, this.inspectOpts);
	};
	});
	var node_1 = node.init;
	var node_2 = node.log;
	var node_3 = node.formatArgs;
	var node_4 = node.save;
	var node_5 = node.load;
	var node_6 = node.useColors;
	var node_7 = node.colors;
	var node_8 = node.inspectOpts;

	var src = createCommonjsModule(function (module) {
	/**
	 * Detect Electron renderer / nwjs process, which is node, but we should
	 * treat as a browser.
	 */
	if (typeof process === 'undefined' || process.type === 'renderer' || browser$1 === true || process.__nwjs) {
	  module.exports = browser$2;
	} else {
	  module.exports = node;
	}
	});

	var hasDocument = (typeof document === "undefined" ? "undefined" : _typeof_1(document)) === 'object' && document !== null;
	var hasWindow = (typeof window === "undefined" ? "undefined" : _typeof_1(window)) === 'object' && window !== null && window.self === window; // eslint-disable-next-line no-confusing-arrow

	var isBrowser = function isBrowser() {
	  return !lodash.isNil(isBrowser.override) ? isBrowser.override : hasDocument && hasWindow;
	};

	if (isBrowser() && "production" !== 'production' && "production" !== 'test') {
	  // Heads Up!
	  // https://github.com/visionmedia/debug/pull/331
	  //
	  // debug now clears storage on load, grab the debug settings before require('debug').
	  // We try/catch here as Safari throws on localStorage access in private mode or with cookies disabled.
	  var DEBUG;

	  try {
	    DEBUG = window.localStorage.debug;
	  } catch (e) {
	    /* eslint-disable no-console */
	    console.error('Semantic-UI-React could not enable debug.');
	    console.error(e);
	    /* eslint-enable no-console */
	  } // enable what ever settings we got from storage


	  src.enable(DEBUG);
	}
	/**
	 * Create a namespaced debug function.
	 * @param {String} namespace Usually a component name.
	 * @example
	 * import { makeDebugger } from 'src/lib'
	 * const debug = makeDebugger('namespace')
	 *
	 * debug('Some message')
	 * @returns {Function}
	 */


	var makeDebugger = function makeDebugger(namespace) {
	  return src("semanticUIReact:".concat(namespace));
	};

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	var objectSpread = _objectSpread;

	var getDefaultPropName = function getDefaultPropName(prop) {
	  return "default".concat(prop[0].toUpperCase() + prop.slice(1));
	};
	/**
	 * Return the auto controlled state value for a give prop. The initial value is chosen in this order:
	 *  - regular props
	 *  - then, default props
	 *  - then, initial state
	 *  - then, `checked` defaults to false
	 *  - then, `value` defaults to '' or [] if props.multiple
	 *  - else, undefined
	 *
	 *  @param {string} propName A prop name
	 *  @param {object} [props] A props object
	 *  @param {object} [state] A state object
	 *  @param {boolean} [includeDefaults=false] Whether or not to heed the default props or initial state
	 */


	var getAutoControlledStateValue = function getAutoControlledStateValue(propName, props, state) {
	  var includeDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  // regular props
	  var propValue = props[propName];
	  if (propValue !== undefined) return propValue;

	  if (includeDefaults) {
	    // defaultProps
	    var defaultProp = props[getDefaultPropName(propName)];
	    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined

	    if (state) {
	      var initialState = state[propName];
	      if (initialState !== undefined) return initialState;
	    }
	  } // React doesn't allow changing from uncontrolled to controlled components,
	  // default checked/value if they were not present.


	  if (propName === 'checked') return false;
	  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined
	};

	var AutoControlledComponent =
	/*#__PURE__*/
	function (_Component) {
	  inherits(AutoControlledComponent, _Component);

	  function AutoControlledComponent() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, AutoControlledComponent);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(AutoControlledComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "trySetState", function (maybeState, state) {
	      var autoControlledProps = _this.constructor.autoControlledProps;

	      var newState = Object.keys(maybeState).reduce(function (acc, prop) {
	        // ignore props defined by the parent
	        if (_this.props[prop] !== undefined) return acc; // ignore props not listed in auto controlled props

	        if (autoControlledProps.indexOf(prop) === -1) return acc;
	        acc[prop] = maybeState[prop];
	        return acc;
	      }, {});
	      if (state) newState = objectSpread({}, newState, state);
	      if (Object.keys(newState).length > 0) _this.setState(newState);
	    });

	    var _autoControlledProps = _this.constructor.autoControlledProps;

	    var _state = lodash.invoke(assertThisInitialized(_this), 'getInitialAutoControlledState', _this.props) || {};
	    // Set initial state by copying auto controlled props to state.
	    // Also look for the default prop for any auto controlled props (foo => defaultFoo)
	    // so we can set initial values from defaults.


	    var initialAutoControlledState = _autoControlledProps.reduce(function (acc, prop) {
	      acc[prop] = getAutoControlledStateValue(prop, _this.props, _state, true);

	      return acc;
	    }, {});

	    _this.state = objectSpread({}, _state, initialAutoControlledState);
	    return _this;
	  }

	  createClass(AutoControlledComponent, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var autoControlledProps = this.constructor.autoControlledProps; // Solve the next state for autoControlledProps

	      var newState = autoControlledProps.reduce(function (acc, prop) {
	        var isNextDefined = !lodash.isUndefined(nextProps[prop]); // if next is defined then use its value

	        if (isNextDefined) acc[prop] = nextProps[prop];
	        return acc;
	      }, {});
	      if (Object.keys(newState).length > 0) this.setState(newState);
	    }
	    /**
	     * Safely attempt to set state for props that might be controlled by the user.
	     * Second argument is a state object that is always passed to setState.
	     * @param {object} maybeState State that corresponds to controlled props.
	     * @param {object} [state] Actual state, useful when you also need to setState.
	     */

	  }]);

	  return AutoControlledComponent;
	}(React.Component);

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles;

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit;

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var nonIterableRest = _nonIterableRest;

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray;

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {object} children Element's children
	 * @return {object} Mapping of key to child
	 */

	var getChildMapping = function getChildMapping(children) {
	  return lodash.keyBy(lodash.filter(React.Children.toArray(children), React.isValidElement), 'key');
	};

	var getPendingKeys = function getPendingKeys(prev, next) {
	  var nextKeysPending = {};
	  var pendingKeys = [];

	  lodash.forEach(lodash.keys(prev), function (prevKey) {
	    if (!lodash.has(next, prevKey)) {
	      pendingKeys.push(prevKey);
	      return;
	    }

	    if (pendingKeys.length) {
	      nextKeysPending[prevKey] = pendingKeys;
	      pendingKeys = [];
	    }
	  });

	  return [nextKeysPending, pendingKeys];
	};

	var getValue$1 = function getValue(key, prev, next) {
	  return lodash.has(next, key) ? next[key] : prev[key];
	};
	/**
	 * When you're adding or removing children some may be added or removed in the same render pass. We want to show *both*
	 * since we want to simultaneously animate elements in and out. This function takes a previous set of keys and a new set
	 * of keys and merges them with its best guess of the correct ordering.
	 *
	 * @param {object} prev Prev children as returned from `getChildMapping()`
	 * @param {object} next Next children as returned from `getChildMapping()`
	 * @return {object} A key set that contains all keys in `prev` and all keys in `next` in a reasonable order
	 */


	var mergeChildMappings = function mergeChildMappings() {
	  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var childMapping = {};

	  var _getPendingKeys = getPendingKeys(prev, next),
	      _getPendingKeys2 = slicedToArray(_getPendingKeys, 2),
	      nextKeysPending = _getPendingKeys2[0],
	      pendingKeys = _getPendingKeys2[1];

	  lodash.forEach(lodash.keys(next), function (nextKey) {
	    if (lodash.has(nextKeysPending, nextKey)) {
	      lodash.forEach(nextKeysPending[nextKey], function (pendingKey) {
	        childMapping[pendingKey] = getValue$1(pendingKey, prev, next);
	      });
	    }

	    childMapping[nextKey] = getValue$1(nextKey, prev, next);
	  });

	  lodash.forEach(pendingKeys, function (pendingKey) {
	    childMapping[pendingKey] = getValue$1(pendingKey, prev, next);
	  });

	  return childMapping;
	};

	/**
	 * Determine if child by type exists in children.
	 * @param {Object} children The children prop of a component.
	 * @param {string|Function} type An html tag name string or React component.
	 * @returns {Boolean}
	 */

	var someByType = function someByType(children, type) {
	  return lodash.some(React.Children.toArray(children), {
	    type: type
	  });
	};
	/**
	 * Tests if children are nil in React and Preact.
	 * @param {Object} children The children prop of a component.
	 * @returns {Boolean}
	 */

	var isNil$1 = function isNil$$1(children) {
	  return children === null || children === undefined || Array.isArray(children) && children.length === 0;
	};

	var numberToWordMap = {
	  1: 'one',
	  2: 'two',
	  3: 'three',
	  4: 'four',
	  5: 'five',
	  6: 'six',
	  7: 'seven',
	  8: 'eight',
	  9: 'nine',
	  10: 'ten',
	  11: 'eleven',
	  12: 'twelve',
	  13: 'thirteen',
	  14: 'fourteen',
	  15: 'fifteen',
	  16: 'sixteen'
	  /**
	   * Return the number word for numbers 1-16.
	   * Returns strings or numbers as is if there is no corresponding word.
	   * Returns an empty string if value is not a string or number.
	   * @param {string|number} value The value to convert to a word.
	   * @returns {string}
	   */

	};
	function numberToWord(value) {
	  var type = _typeof_1(value);

	  if (type === 'string' || type === 'number') {
	    return numberToWordMap[value] || value;
	  }

	  return '';
	}

	/*
	 * There are 3 prop patterns used to build up the className for a component.
	 * Each utility here is meant for use in a classnames() argument.
	 *
	 * There is no util for valueOnly() because it would simply return val.
	 * Use the prop value inline instead.
	 *   <Label size='big' />
	 *   <div class="ui big label"></div>
	 */

	/**
	 * Props where only the prop key is used in the className.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example
	 * <Label tag />
	 * <div class="ui tag label"></div>
	 */

	var useKeyOnly = function useKeyOnly(val, key) {
	  return val && key;
	};
	/**
	 * Props that require both a key and value to create a className.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example
	 * <Label corner='left' />
	 * <div class="ui left corner label"></div>
	 */

	var useValueAndKey = function useValueAndKey(val, key) {
	  return val && val !== true && "".concat(val, " ").concat(key);
	};
	/**
	 * Props whose key will be used in className, or value and key.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example Key Only
	 * <Label pointing />
	 * <div class="ui pointing label"></div>
	 *
	 * @example Key and Value
	 * <Label pointing='left' />
	 * <div class="ui left pointing label"></div>
	 */

	var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {
	  return val && (val === true ? key : "".concat(val, " ").concat(key));
	}; //
	// Prop to className exceptions
	//

	/**
	 * The "multiple" prop implements control of visibility and reserved classes for Grid subcomponents.
	 *
	 * @param {*} val The value of the "multiple" prop
	 * @param {*} key A props key
	 *
	 * @example
	 * <Grid.Row only='mobile' />
	 * <Grid.Row only='mobile tablet' />
	 * <div class="mobile only row"></div>
	 * <div class="mobile only tablet only row"></div>
	 */

	var useMultipleProp = function useMultipleProp(val, key) {
	  if (!val || val === true) return null;
	  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {
	    return "".concat(prop.replace('-', ' '), " ").concat(key);
	  }).join(' ');
	};
	/**
	 * The "textAlign" prop follows the useValueAndKey except when the value is "justified'.
	 * In this case, only the class "justified" is used, ignoring the "aligned" class.
	 * @param {*} val The value of the "textAlign" prop
	 *
	 * @example
	 * <Container textAlign='justified' />
	 * <div class="ui justified container"></div>
	 *
	 * @example
	 * <Container textAlign='left' />
	 * <div class="ui left aligned container"></div>
	 */

	var useTextAlignProp = function useTextAlignProp(val) {
	  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');
	};
	/**
	 * The "verticalAlign" prop follows the useValueAndKey.
	 *
	 * @param {*} val The value of the "verticalAlign" prop
	 *
	 * @example
	 * <Grid verticalAlign='middle' />
	 * <div class="ui middle aligned grid"></div>
	 */

	var useVerticalAlignProp = function useVerticalAlignProp(val) {
	  return useValueAndKey(val, 'aligned');
	};
	/**
	 * Create "X", "X wide" and "equal width" classNames.
	 * "X" is a numberToWord value and "wide" is configurable.
	 * @param {*} val The prop value
	 * @param {string} [widthClass=''] The class
	 * @param {boolean} [canEqual=false] Flag that indicates possibility of "equal" value
	 *
	 * @example
	 * <Grid columns='equal' />
	 * <div class="ui equal width grid"></div>
	 *
	 * <Form widths='equal' />
	 * <div class="ui equal width form"></div>
	 *
	 * <FieldGroup widths='equal' />
	 * <div class="equal width fields"></div>
	 *
	 * @example
	 * <Grid columns={4} />
	 * <div class="ui four column grid"></div>
	 */

	var useWidthProp = function useWidthProp(val) {
	  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (canEqual && val === 'equal') {
	    return 'equal width';
	  }

	  var valType = _typeof_1(val);

	  if ((valType === 'string' || valType === 'number') && widthClass) {
	    return "".concat(numberToWord(val), " ").concat(widthClass);
	  }

	  return numberToWord(val);
	};

	function _arrayWithoutHoles$1(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	var arrayWithoutHoles$1 = _arrayWithoutHoles$1;

	function _iterableToArray$1(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	var iterableToArray$1 = _iterableToArray$1;

	function _nonIterableSpread$1() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	var nonIterableSpread$1 = _nonIterableSpread$1;

	function _toConsumableArray$1(arr) {
	  return arrayWithoutHoles$1(arr) || iterableToArray$1(arr) || nonIterableSpread$1();
	}

	var toConsumableArray$1 = _toConsumableArray$1;

	(function () {
	  function n(n, t, r) {
	    switch (r.length) {
	      case 0:
	        return n.call(t);

	      case 1:
	        return n.call(t, r[0]);

	      case 2:
	        return n.call(t, r[0], r[1]);

	      case 3:
	        return n.call(t, r[0], r[1], r[2]);
	    }

	    return n.apply(t, r);
	  }

	  function t(n, t, r, e) {
	    for (var u = -1, i = null == n ? 0 : n.length; ++u < i;) {
	      var o = n[u];
	      t(e, o, r(o), n);
	    }

	    return e;
	  }

	  function r(n, t) {
	    for (var r = -1, e = null == n ? 0 : n.length; ++r < e && false !== t(n[r], r, n);) {
	    }

	    return n;
	  }

	  function e(n, t) {
	    for (var r = null == n ? 0 : n.length; r-- && false !== t(n[r], r, n);) {
	    }

	    return n;
	  }

	  function u(n, t) {
	    for (var r = -1, e = null == n ? 0 : n.length; ++r < e;) {
	      if (!t(n[r], r, n)) return false;
	    }

	    return true;
	  }

	  function i(n, t) {
	    for (var r = -1, e = null == n ? 0 : n.length, u = 0, i = []; ++r < e;) {
	      var o = n[r];
	      t(o, r, n) && (i[u++] = o);
	    }

	    return i;
	  }

	  function o(n, t) {
	    return !(null == n || !n.length) && -1 < v(n, t, 0);
	  }

	  function f(n, t, r) {
	    for (var e = -1, u = null == n ? 0 : n.length; ++e < u;) {
	      if (r(t, n[e])) return true;
	    }

	    return false;
	  }

	  function c(n, t) {
	    for (var r = -1, e = null == n ? 0 : n.length, u = Array(e); ++r < e;) {
	      u[r] = t(n[r], r, n);
	    }

	    return u;
	  }

	  function a(n, t) {
	    for (var r = -1, e = t.length, u = n.length; ++r < e;) {
	      n[u + r] = t[r];
	    }

	    return n;
	  }

	  function l(n, t, r, e) {
	    var u = -1,
	        i = null == n ? 0 : n.length;

	    for (e && i && (r = n[++u]); ++u < i;) {
	      r = t(r, n[u], u, n);
	    }

	    return r;
	  }

	  function s(n, t, r, e) {
	    var u = null == n ? 0 : n.length;

	    for (e && u && (r = n[--u]); u--;) {
	      r = t(r, n[u], u, n);
	    }

	    return r;
	  }

	  function h(n, t) {
	    for (var r = -1, e = null == n ? 0 : n.length; ++r < e;) {
	      if (t(n[r], r, n)) return true;
	    }

	    return false;
	  }

	  function p(n, t, r) {
	    var e;
	    return r(n, function (n, r, u) {
	      if (t(n, r, u)) return e = r, false;
	    }), e;
	  }

	  function _(n, t, r, e) {
	    var u = n.length;

	    for (r += e ? 1 : -1; e ? r-- : ++r < u;) {
	      if (t(n[r], r, n)) return r;
	    }

	    return -1;
	  }

	  function v(n, t, r) {
	    if (t === t) n: {
	      --r;

	      for (var e = n.length; ++r < e;) {
	        if (n[r] === t) {
	          n = r;
	          break n;
	        }
	      }

	      n = -1;
	    } else n = _(n, d, r);
	    return n;
	  }

	  function g(n, t, r, e) {
	    --r;

	    for (var u = n.length; ++r < u;) {
	      if (e(n[r], t)) return r;
	    }

	    return -1;
	  }

	  function d(n) {
	    return n !== n;
	  }

	  function y(n, t) {
	    var r = null == n ? 0 : n.length;
	    return r ? m(n, t) / r : F;
	  }

	  function b(n) {
	    return function (t) {
	      return null == t ? T : t[n];
	    };
	  }

	  function x(n) {
	    return function (t) {
	      return null == n ? T : n[t];
	    };
	  }

	  function j(n, t, r, e, u) {
	    return u(n, function (n, u, i) {
	      r = e ? (e = false, n) : t(r, n, u, i);
	    }), r;
	  }

	  function w(n, t) {
	    var r = n.length;

	    for (n.sort(t); r--;) {
	      n[r] = n[r].c;
	    }

	    return n;
	  }

	  function m(n, t) {
	    for (var r, e = -1, u = n.length; ++e < u;) {
	      var i = t(n[e]);
	      i !== T && (r = r === T ? i : r + i);
	    }

	    return r;
	  }

	  function A(n, t) {
	    for (var r = -1, e = Array(n); ++r < n;) {
	      e[r] = t(r);
	    }

	    return e;
	  }

	  function k(n, t) {
	    return c(t, function (t) {
	      return [t, n[t]];
	    });
	  }

	  function E(n) {
	    return function (t) {
	      return n(t);
	    };
	  }

	  function S(n, t) {
	    return c(t, function (t) {
	      return n[t];
	    });
	  }

	  function O(n, t) {
	    return n.has(t);
	  }

	  function I(n, t) {
	    for (var r = -1, e = n.length; ++r < e && -1 < v(t, n[r], 0);) {
	    }

	    return r;
	  }

	  function R(n, t) {
	    for (var r = n.length; r-- && -1 < v(t, n[r], 0);) {
	    }

	    return r;
	  }

	  function z(n) {
	    return "\\" + Ln[n];
	  }

	  function W(n) {
	    var t = -1,
	        r = Array(n.size);
	    return n.forEach(function (n, e) {
	      r[++t] = [e, n];
	    }), r;
	  }

	  function U(n, t) {
	    return function (r) {
	      return n(t(r));
	    };
	  }

	  function B(n, t) {
	    for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
	      var o = n[r];
	      o !== t && "__lodash_placeholder__" !== o || (n[r] = "__lodash_placeholder__", i[u++] = r);
	    }

	    return i;
	  }

	  function L(n) {
	    var t = -1,
	        r = Array(n.size);
	    return n.forEach(function (n) {
	      r[++t] = n;
	    }), r;
	  }

	  function C(n) {
	    var t = -1,
	        r = Array(n.size);
	    return n.forEach(function (n) {
	      r[++t] = [n, n];
	    }), r;
	  }

	  function D(n) {
	    if (Rn.test(n)) {
	      for (var t = On.lastIndex = 0; On.test(n);) {
	        ++t;
	      }

	      n = t;
	    } else n = Qn(n);

	    return n;
	  }

	  function M(n) {
	    return Rn.test(n) ? n.match(On) || [] : n.split("");
	  }

	  var T,
	      $ = 1 / 0,
	      F = NaN,
	      N = [["ary", 128], ["bind", 1], ["bindKey", 2], ["curry", 8], ["curryRight", 16], ["flip", 512], ["partial", 32], ["partialRight", 64], ["rearg", 256]],
	      P = /\b__p\+='';/g,
	      Z = /\b(__p\+=)''\+/g,
	      q = /(__e\(.*?\)|\b__t\))\+'';/g,
	      V = /&(?:amp|lt|gt|quot|#39);/g,
	      K = /[&<>"']/g,
	      G = RegExp(V.source),
	      H = RegExp(K.source),
	      J = /<%-([\s\S]+?)%>/g,
	      Y = /<%([\s\S]+?)%>/g,
	      Q = /<%=([\s\S]+?)%>/g,
	      X = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      nn = /^\w*$/,
	      tn = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
	      rn = /[\\^$.*+?()[\]{}|]/g,
	      en = RegExp(rn.source),
	      un = /^\s+|\s+$/g,
	      on = /^\s+/,
	      fn = /\s+$/,
	      cn = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      an = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      ln = /,? & /,
	      sn = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
	      hn = /\\(\\)?/g,
	      pn = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
	      _n = /\w*$/,
	      vn = /^[-+]0x[0-9a-f]+$/i,
	      gn = /^0b[01]+$/i,
	      dn = /^\[object .+?Constructor\]$/,
	      yn = /^0o[0-7]+$/i,
	      bn = /^(?:0|[1-9]\d*)$/,
	      xn = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
	      jn = /($^)/,
	      wn = /['\n\r\u2028\u2029\\]/g,
	      mn = "[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*",
	      An = "(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])" + mn,
	      kn = "(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?|[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])",
	      En = RegExp("['\u2019]", "g"),
	      Sn = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]", "g"),
	      On = RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|" + kn + mn, "g"),
	      In = RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?|\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])|\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])|\\d+", An].join("|"), "g"),
	      Rn = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]"),
	      zn = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
	      Wn = "Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "),
	      Un = {};
	  Un["[object Float32Array]"] = Un["[object Float64Array]"] = Un["[object Int8Array]"] = Un["[object Int16Array]"] = Un["[object Int32Array]"] = Un["[object Uint8Array]"] = Un["[object Uint8ClampedArray]"] = Un["[object Uint16Array]"] = Un["[object Uint32Array]"] = true, Un["[object Arguments]"] = Un["[object Array]"] = Un["[object ArrayBuffer]"] = Un["[object Boolean]"] = Un["[object DataView]"] = Un["[object Date]"] = Un["[object Error]"] = Un["[object Function]"] = Un["[object Map]"] = Un["[object Number]"] = Un["[object Object]"] = Un["[object RegExp]"] = Un["[object Set]"] = Un["[object String]"] = Un["[object WeakMap]"] = false;
	  var Bn = {};
	  Bn["[object Arguments]"] = Bn["[object Array]"] = Bn["[object ArrayBuffer]"] = Bn["[object DataView]"] = Bn["[object Boolean]"] = Bn["[object Date]"] = Bn["[object Float32Array]"] = Bn["[object Float64Array]"] = Bn["[object Int8Array]"] = Bn["[object Int16Array]"] = Bn["[object Int32Array]"] = Bn["[object Map]"] = Bn["[object Number]"] = Bn["[object Object]"] = Bn["[object RegExp]"] = Bn["[object Set]"] = Bn["[object String]"] = Bn["[object Symbol]"] = Bn["[object Uint8Array]"] = Bn["[object Uint8ClampedArray]"] = Bn["[object Uint16Array]"] = Bn["[object Uint32Array]"] = true, Bn["[object Error]"] = Bn["[object Function]"] = Bn["[object WeakMap]"] = false;

	  var Ln = {
	    "\\": "\\",
	    "'": "'",
	    "\n": "n",
	    "\r": "r",
	    "\u2028": "u2028",
	    "\u2029": "u2029"
	  },
	      Cn = parseFloat,
	      Dn = parseInt,
	      Mn = (typeof global$1 === "undefined" ? "undefined" : _typeof_1$1(global$1)) == "object" && global$1 && global$1.Object === Object && global$1,
	      Tn = (typeof self === "undefined" ? "undefined" : _typeof_1$1(self)) == "object" && self && self.Object === Object && self,
	      $n = Mn || Tn || Function("return this")(),
	      Fn = (typeof exports === "undefined" ? "undefined" : _typeof_1$1(exports)) == "object" && exports && !exports.nodeType && exports,
	      Nn = Fn && (typeof module === "undefined" ? "undefined" : _typeof_1$1(module)) == "object" && module && !module.nodeType && module,
	      Pn = Nn && Nn.exports === Fn,
	      Zn = Pn && Mn.process,
	      qn = function () {
	    try {
	      var n = Nn && Nn.require && Nn.require("util").types;

	      return n ? n : Zn && Zn.binding && Zn.binding("util");
	    } catch (n) {}
	  }(),
	      Vn = qn && qn.isArrayBuffer,
	      Kn = qn && qn.isDate,
	      Gn = qn && qn.isMap,
	      Hn = qn && qn.isRegExp,
	      Jn = qn && qn.isSet,
	      Yn = qn && qn.isTypedArray,
	      Qn = b("length"),
	      Xn = x({
	    "\xc0": "A",
	    "\xc1": "A",
	    "\xc2": "A",
	    "\xc3": "A",
	    "\xc4": "A",
	    "\xc5": "A",
	    "\xe0": "a",
	    "\xe1": "a",
	    "\xe2": "a",
	    "\xe3": "a",
	    "\xe4": "a",
	    "\xe5": "a",
	    "\xc7": "C",
	    "\xe7": "c",
	    "\xd0": "D",
	    "\xf0": "d",
	    "\xc8": "E",
	    "\xc9": "E",
	    "\xca": "E",
	    "\xcb": "E",
	    "\xe8": "e",
	    "\xe9": "e",
	    "\xea": "e",
	    "\xeb": "e",
	    "\xcc": "I",
	    "\xcd": "I",
	    "\xce": "I",
	    "\xcf": "I",
	    "\xec": "i",
	    "\xed": "i",
	    "\xee": "i",
	    "\xef": "i",
	    "\xd1": "N",
	    "\xf1": "n",
	    "\xd2": "O",
	    "\xd3": "O",
	    "\xd4": "O",
	    "\xd5": "O",
	    "\xd6": "O",
	    "\xd8": "O",
	    "\xf2": "o",
	    "\xf3": "o",
	    "\xf4": "o",
	    "\xf5": "o",
	    "\xf6": "o",
	    "\xf8": "o",
	    "\xd9": "U",
	    "\xda": "U",
	    "\xdb": "U",
	    "\xdc": "U",
	    "\xf9": "u",
	    "\xfa": "u",
	    "\xfb": "u",
	    "\xfc": "u",
	    "\xdd": "Y",
	    "\xfd": "y",
	    "\xff": "y",
	    "\xc6": "Ae",
	    "\xe6": "ae",
	    "\xde": "Th",
	    "\xfe": "th",
	    "\xdf": "ss",
	    "\u0100": "A",
	    "\u0102": "A",
	    "\u0104": "A",
	    "\u0101": "a",
	    "\u0103": "a",
	    "\u0105": "a",
	    "\u0106": "C",
	    "\u0108": "C",
	    "\u010A": "C",
	    "\u010C": "C",
	    "\u0107": "c",
	    "\u0109": "c",
	    "\u010B": "c",
	    "\u010D": "c",
	    "\u010E": "D",
	    "\u0110": "D",
	    "\u010F": "d",
	    "\u0111": "d",
	    "\u0112": "E",
	    "\u0114": "E",
	    "\u0116": "E",
	    "\u0118": "E",
	    "\u011A": "E",
	    "\u0113": "e",
	    "\u0115": "e",
	    "\u0117": "e",
	    "\u0119": "e",
	    "\u011B": "e",
	    "\u011C": "G",
	    "\u011E": "G",
	    "\u0120": "G",
	    "\u0122": "G",
	    "\u011D": "g",
	    "\u011F": "g",
	    "\u0121": "g",
	    "\u0123": "g",
	    "\u0124": "H",
	    "\u0126": "H",
	    "\u0125": "h",
	    "\u0127": "h",
	    "\u0128": "I",
	    "\u012A": "I",
	    "\u012C": "I",
	    "\u012E": "I",
	    "\u0130": "I",
	    "\u0129": "i",
	    "\u012B": "i",
	    "\u012D": "i",
	    "\u012F": "i",
	    "\u0131": "i",
	    "\u0134": "J",
	    "\u0135": "j",
	    "\u0136": "K",
	    "\u0137": "k",
	    "\u0138": "k",
	    "\u0139": "L",
	    "\u013B": "L",
	    "\u013D": "L",
	    "\u013F": "L",
	    "\u0141": "L",
	    "\u013A": "l",
	    "\u013C": "l",
	    "\u013E": "l",
	    "\u0140": "l",
	    "\u0142": "l",
	    "\u0143": "N",
	    "\u0145": "N",
	    "\u0147": "N",
	    "\u014A": "N",
	    "\u0144": "n",
	    "\u0146": "n",
	    "\u0148": "n",
	    "\u014B": "n",
	    "\u014C": "O",
	    "\u014E": "O",
	    "\u0150": "O",
	    "\u014D": "o",
	    "\u014F": "o",
	    "\u0151": "o",
	    "\u0154": "R",
	    "\u0156": "R",
	    "\u0158": "R",
	    "\u0155": "r",
	    "\u0157": "r",
	    "\u0159": "r",
	    "\u015A": "S",
	    "\u015C": "S",
	    "\u015E": "S",
	    "\u0160": "S",
	    "\u015B": "s",
	    "\u015D": "s",
	    "\u015F": "s",
	    "\u0161": "s",
	    "\u0162": "T",
	    "\u0164": "T",
	    "\u0166": "T",
	    "\u0163": "t",
	    "\u0165": "t",
	    "\u0167": "t",
	    "\u0168": "U",
	    "\u016A": "U",
	    "\u016C": "U",
	    "\u016E": "U",
	    "\u0170": "U",
	    "\u0172": "U",
	    "\u0169": "u",
	    "\u016B": "u",
	    "\u016D": "u",
	    "\u016F": "u",
	    "\u0171": "u",
	    "\u0173": "u",
	    "\u0174": "W",
	    "\u0175": "w",
	    "\u0176": "Y",
	    "\u0177": "y",
	    "\u0178": "Y",
	    "\u0179": "Z",
	    "\u017B": "Z",
	    "\u017D": "Z",
	    "\u017A": "z",
	    "\u017C": "z",
	    "\u017E": "z",
	    "\u0132": "IJ",
	    "\u0133": "ij",
	    "\u0152": "Oe",
	    "\u0153": "oe",
	    "\u0149": "'n",
	    "\u017F": "s"
	  }),
	      nt = x({
	    "&": "&amp;",
	    "<": "&lt;",
	    ">": "&gt;",
	    '"': "&quot;",
	    "'": "&#39;"
	  }),
	      tt = x({
	    "&amp;": "&",
	    "&lt;": "<",
	    "&gt;": ">",
	    "&quot;": '"',
	    "&#39;": "'"
	  }),
	      rt = function x(mn) {
	    function An(n) {
	      if (yu(n) && !ff(n) && !(n instanceof Ln)) {
	        if (n instanceof On) return n;
	        if (oi.call(n, "__wrapped__")) return Fe(n);
	      }

	      return new On(n);
	    }

	    function kn() {}

	    function On(n, t) {
	      this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = T;
	    }

	    function Ln(n) {
	      this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [];
	    }

	    function Mn(n) {
	      var t = -1,
	          r = null == n ? 0 : n.length;

	      for (this.clear(); ++t < r;) {
	        var e = n[t];
	        this.set(e[0], e[1]);
	      }
	    }

	    function Tn(n) {
	      var t = -1,
	          r = null == n ? 0 : n.length;

	      for (this.clear(); ++t < r;) {
	        var e = n[t];
	        this.set(e[0], e[1]);
	      }
	    }

	    function Fn(n) {
	      var t = -1,
	          r = null == n ? 0 : n.length;

	      for (this.clear(); ++t < r;) {
	        var e = n[t];
	        this.set(e[0], e[1]);
	      }
	    }

	    function Nn(n) {
	      var t = -1,
	          r = null == n ? 0 : n.length;

	      for (this.__data__ = new Fn(); ++t < r;) {
	        this.add(n[t]);
	      }
	    }

	    function Zn(n) {
	      this.size = (this.__data__ = new Tn(n)).size;
	    }

	    function qn(n, t) {
	      var r,
	          e = ff(n),
	          u = !e && of(n),
	          i = !e && !u && af(n),
	          o = !e && !u && !i && _f(n),
	          u = (e = e || u || i || o) ? A(n.length, ni) : [],
	          f = u.length;

	      for (r in n) {
	        !t && !oi.call(n, r) || e && ("length" == r || i && ("offset" == r || "parent" == r) || o && ("buffer" == r || "byteLength" == r || "byteOffset" == r) || Se(r, f)) || u.push(r);
	      }

	      return u;
	    }

	    function Qn(n) {
	      var t = n.length;
	      return t ? n[ir(0, t - 1)] : T;
	    }

	    function et(n, t) {
	      return De(Lr(n), pt(t, 0, n.length));
	    }

	    function ut(n) {
	      return De(Lr(n));
	    }

	    function it(n, t, r) {
	      (r === T || lu(n[t], r)) && (r !== T || t in n) || st(n, t, r);
	    }

	    function ot(n, t, r) {
	      var e = n[t];
	      oi.call(n, t) && lu(e, r) && (r !== T || t in n) || st(n, t, r);
	    }

	    function ft(n, t) {
	      for (var r = n.length; r--;) {
	        if (lu(n[r][0], t)) return r;
	      }

	      return -1;
	    }

	    function ct(n, t, r, e) {
	      return uo(n, function (n, u, i) {
	        t(e, n, r(n), i);
	      }), e;
	    }

	    function at(n, t) {
	      return n && Cr(t, Wu(t), n);
	    }

	    function lt(n, t) {
	      return n && Cr(t, Uu(t), n);
	    }

	    function st(n, t, r) {
	      "__proto__" == t && Ai ? Ai(n, t, {
	        configurable: true,
	        enumerable: true,
	        value: r,
	        writable: true
	      }) : n[t] = r;
	    }

	    function ht(n, t) {
	      for (var r = -1, e = t.length, u = Ku(e), i = null == n; ++r < e;) {
	        u[r] = i ? T : Ru(n, t[r]);
	      }

	      return u;
	    }

	    function pt(n, t, r) {
	      return n === n && (r !== T && (n = n <= r ? n : r), t !== T && (n = n >= t ? n : t)), n;
	    }

	    function _t(n, t, e, u, i, o) {
	      var f,
	          c = 1 & t,
	          a = 2 & t,
	          l = 4 & t;
	      if (e && (f = i ? e(n, u, i, o) : e(n)), f !== T) return f;
	      if (!du(n)) return n;

	      if (u = ff(n)) {
	        if (f = me(n), !c) return Lr(n, f);
	      } else {
	        var s = vo(n),
	            h = "[object Function]" == s || "[object GeneratorFunction]" == s;
	        if (af(n)) return Ir(n, c);

	        if ("[object Object]" == s || "[object Arguments]" == s || h && !i) {
	          if (f = a || h ? {} : Ae(n), !c) return a ? Mr(n, lt(f, n)) : Dr(n, at(f, n));
	        } else {
	          if (!Bn[s]) return i ? n : {};
	          f = ke(n, s, c);
	        }
	      }

	      if (o || (o = new Zn()), i = o.get(n)) return i;
	      if (o.set(n, f), pf(n)) return n.forEach(function (r) {
	        f.add(_t(r, t, e, r, n, o));
	      }), f;
	      if (sf(n)) return n.forEach(function (r, u) {
	        f.set(u, _t(r, t, e, u, n, o));
	      }), f;
	      var a = l ? a ? ve : _e : a ? Uu : Wu,
	          p = u ? T : a(n);
	      return r(p || n, function (r, u) {
	        p && (u = r, r = n[u]), ot(f, u, _t(r, t, e, u, n, o));
	      }), f;
	    }

	    function vt(n) {
	      var t = Wu(n);
	      return function (r) {
	        return gt(r, n, t);
	      };
	    }

	    function gt(n, t, r) {
	      var e = r.length;
	      if (null == n) return !e;

	      for (n = Qu(n); e--;) {
	        var u = r[e],
	            i = t[u],
	            o = n[u];
	        if (o === T && !(u in n) || !i(o)) return false;
	      }

	      return true;
	    }

	    function dt(n, t, r) {
	      if (typeof n != "function") throw new ti("Expected a function");
	      return bo(function () {
	        n.apply(T, r);
	      }, t);
	    }

	    function yt(n, t, r, e) {
	      var u = -1,
	          i = o,
	          a = true,
	          l = n.length,
	          s = [],
	          h = t.length;
	      if (!l) return s;
	      r && (t = c(t, E(r))), e ? (i = f, a = false) : 200 <= t.length && (i = O, a = false, t = new Nn(t));

	      n: for (; ++u < l;) {
	        var p = n[u],
	            _ = null == r ? p : r(p),
	            p = e || 0 !== p ? p : 0;

	        if (a && _ === _) {
	          for (var v = h; v--;) {
	            if (t[v] === _) continue n;
	          }

	          s.push(p);
	        } else i(t, _, e) || s.push(p);
	      }

	      return s;
	    }

	    function bt(n, t) {
	      var r = true;
	      return uo(n, function (n, e, u) {
	        return r = !!t(n, e, u);
	      }), r;
	    }

	    function xt(n, t, r) {
	      for (var e = -1, u = n.length; ++e < u;) {
	        var i = n[e],
	            o = t(i);
	        if (null != o && (f === T ? o === o && !wu(o) : r(o, f))) var f = o,
	            c = i;
	      }

	      return c;
	    }

	    function jt(n, t) {
	      var r = [];
	      return uo(n, function (n, e, u) {
	        t(n, e, u) && r.push(n);
	      }), r;
	    }

	    function wt(n, t, r, e, u) {
	      var i = -1,
	          o = n.length;

	      for (r || (r = Ee), u || (u = []); ++i < o;) {
	        var f = n[i];
	        0 < t && r(f) ? 1 < t ? wt(f, t - 1, r, e, u) : a(u, f) : e || (u[u.length] = f);
	      }

	      return u;
	    }

	    function mt(n, t) {
	      return n && oo(n, t, Wu);
	    }

	    function At(n, t) {
	      return n && fo(n, t, Wu);
	    }

	    function kt(n, t) {
	      return i(t, function (t) {
	        return _u(n[t]);
	      });
	    }

	    function Et(n, t) {
	      t = Sr(t, n);

	      for (var r = 0, e = t.length; null != n && r < e;) {
	        n = n[Me(t[r++])];
	      }

	      return r && r == e ? n : T;
	    }

	    function St(n, t, r) {
	      return t = t(n), ff(n) ? t : a(t, r(n));
	    }

	    function Ot(n) {
	      if (null == n) return n === T ? "[object Undefined]" : "[object Null]";

	      if (mi && mi in Qu(n)) {
	        var t = oi.call(n, mi),
	            r = n[mi];

	        try {
	          n[mi] = T;
	        } catch (n) {}

	        var u = ai.call(n);
	        t ? n[mi] = r : delete n[mi], n = u;
	      } else n = ai.call(n);

	      return n;
	    }

	    function It(n, t) {
	      return n > t;
	    }

	    function Rt(n, t) {
	      return null != n && oi.call(n, t);
	    }

	    function zt(n, t) {
	      return null != n && t in Qu(n);
	    }

	    function Wt(n, t, r) {
	      for (var e = r ? f : o, u = n[0].length, i = n.length, a = i, l = Ku(i), s = 1 / 0, h = []; a--;) {
	        var p = n[a];
	        a && t && (p = c(p, E(t))), s = Ci(p.length, s), l[a] = !r && (t || 120 <= u && 120 <= p.length) ? new Nn(a && p) : T;
	      }

	      var p = n[0],
	          _ = -1,
	          v = l[0];

	      n: for (; ++_ < u && h.length < s;) {
	        var g = p[_],
	            d = t ? t(g) : g,
	            g = r || 0 !== g ? g : 0;

	        if (v ? !O(v, d) : !e(h, d, r)) {
	          for (a = i; --a;) {
	            var y = l[a];
	            if (y ? !O(y, d) : !e(n[a], d, r)) continue n;
	          }

	          v && v.push(d), h.push(g);
	        }
	      }

	      return h;
	    }

	    function Ut(n, t, r, e) {
	      return mt(n, function (n, u, i) {
	        t(e, r(n), u, i);
	      }), e;
	    }

	    function Bt(t, r, e) {
	      return r = Sr(r, t), t = 2 > r.length ? t : Et(t, hr(r, 0, -1)), r = null == t ? t : t[Me(Ve(r))], null == r ? T : n(r, t, e);
	    }

	    function Lt(n) {
	      return yu(n) && "[object Arguments]" == Ot(n);
	    }

	    function Ct(n) {
	      return yu(n) && "[object ArrayBuffer]" == Ot(n);
	    }

	    function Dt(n) {
	      return yu(n) && "[object Date]" == Ot(n);
	    }

	    function Mt(n, t, r, e, u) {
	      if (n === t) return true;
	      if (null == n || null == t || !yu(n) && !yu(t)) return n !== n && t !== t;

	      n: {
	        var i = ff(n),
	            o = ff(t),
	            f = i ? "[object Array]" : vo(n),
	            c = o ? "[object Array]" : vo(t),
	            f = "[object Arguments]" == f ? "[object Object]" : f,
	            c = "[object Arguments]" == c ? "[object Object]" : c,
	            a = "[object Object]" == f,
	            o = "[object Object]" == c;

	        if ((c = f == c) && af(n)) {
	          if (!af(t)) {
	            t = false;
	            break n;
	          }

	          i = true, a = false;
	        }

	        if (c && !a) u || (u = new Zn()), t = i || _f(n) ? se(n, t, r, e, Mt, u) : he(n, t, f, r, e, Mt, u);else {
	          if (!(1 & r) && (i = a && oi.call(n, "__wrapped__"), f = o && oi.call(t, "__wrapped__"), i || f)) {
	            n = i ? n.value() : n, t = f ? t.value() : t, u || (u = new Zn()), t = Mt(n, t, r, e, u);
	            break n;
	          }

	          if (c) {
	            t: if (u || (u = new Zn()), i = 1 & r, f = _e(n), o = f.length, c = _e(t).length, o == c || i) {
	              for (a = o; a--;) {
	                var l = f[a];

	                if (!(i ? l in t : oi.call(t, l))) {
	                  t = false;
	                  break t;
	                }
	              }

	              if ((c = u.get(n)) && u.get(t)) t = c == t;else {
	                c = true, u.set(n, t), u.set(t, n);

	                for (var s = i; ++a < o;) {
	                  var l = f[a],
	                      h = n[l],
	                      p = t[l];
	                  if (e) var _ = i ? e(p, h, l, t, n, u) : e(h, p, l, n, t, u);

	                  if (_ === T ? h !== p && !Mt(h, p, r, e, u) : !_) {
	                    c = false;
	                    break;
	                  }

	                  s || (s = "constructor" == l);
	                }

	                c && !s && (r = n.constructor, e = t.constructor, r != e && "constructor" in n && "constructor" in t && !(typeof r == "function" && r instanceof r && typeof e == "function" && e instanceof e) && (c = false)), u.delete(n), u.delete(t), t = c;
	              }
	            } else t = false;
	          } else t = false;
	        }
	      }

	      return t;
	    }

	    function Tt(n) {
	      return yu(n) && "[object Map]" == vo(n);
	    }

	    function $t(n, t, r, e) {
	      var u = r.length,
	          i = u,
	          o = !e;
	      if (null == n) return !i;

	      for (n = Qu(n); u--;) {
	        var f = r[u];
	        if (o && f[2] ? f[1] !== n[f[0]] : !(f[0] in n)) return false;
	      }

	      for (; ++u < i;) {
	        var f = r[u],
	            c = f[0],
	            a = n[c],
	            l = f[1];

	        if (o && f[2]) {
	          if (a === T && !(c in n)) return false;
	        } else {
	          if (f = new Zn(), e) var s = e(a, l, c, n, t, f);
	          if (s === T ? !Mt(l, a, 3, e, f) : !s) return false;
	        }
	      }

	      return true;
	    }

	    function Ft(n) {
	      return !(!du(n) || ci && ci in n) && (_u(n) ? hi : dn).test(Te(n));
	    }

	    function Nt(n) {
	      return yu(n) && "[object RegExp]" == Ot(n);
	    }

	    function Pt(n) {
	      return yu(n) && "[object Set]" == vo(n);
	    }

	    function Zt(n) {
	      return yu(n) && gu(n.length) && !!Un[Ot(n)];
	    }

	    function qt(n) {
	      return typeof n == "function" ? n : null == n ? $u : _typeof_1$1(n) == "object" ? ff(n) ? Jt(n[0], n[1]) : Ht(n) : Zu(n);
	    }

	    function Vt(n) {
	      if (!ze(n)) return Bi(n);
	      var t,
	          r = [];

	      for (t in Qu(n)) {
	        oi.call(n, t) && "constructor" != t && r.push(t);
	      }

	      return r;
	    }

	    function Kt(n, t) {
	      return n < t;
	    }

	    function Gt(n, t) {
	      var r = -1,
	          e = su(n) ? Ku(n.length) : [];
	      return uo(n, function (n, u, i) {
	        e[++r] = t(n, u, i);
	      }), e;
	    }

	    function Ht(n) {
	      var t = xe(n);
	      return 1 == t.length && t[0][2] ? We(t[0][0], t[0][1]) : function (r) {
	        return r === n || $t(r, n, t);
	      };
	    }

	    function Jt(n, t) {
	      return Ie(n) && t === t && !du(t) ? We(Me(n), t) : function (r) {
	        var e = Ru(r, n);
	        return e === T && e === t ? zu(r, n) : Mt(t, e, 3);
	      };
	    }

	    function Yt(n, t, r, e, u) {
	      n !== t && oo(t, function (i, o) {
	        if (du(i)) {
	          u || (u = new Zn());
	          var f = u,
	              c = Be(n, o),
	              a = Be(t, o),
	              l = f.get(a);

	          if (!l) {
	            var l = e ? e(c, a, o + "", n, t, f) : T,
	                s = l === T;

	            if (s) {
	              var h = ff(a),
	                  p = !h && af(a),
	                  _ = !h && !p && _f(a),
	                  l = a;

	              h || p || _ ? ff(c) ? l = c : hu(c) ? l = Lr(c) : p ? (s = false, l = Ir(a, true)) : _ ? (s = false, l = zr(a, true)) : l = [] : xu(a) || of(a) ? (l = c, of(c) ? l = Ou(c) : du(c) && !_u(c) || (l = Ae(a))) : s = false;
	            }

	            s && (f.set(a, l), Yt(l, a, r, e, f), f.delete(a));
	          }

	          it(n, o, l);
	        } else f = e ? e(Be(n, o), i, o + "", n, t, u) : T, f === T && (f = i), it(n, o, f);
	      }, Uu);
	    }

	    function Qt(n, t) {
	      var r = n.length;
	      if (r) return t += 0 > t ? r : 0, Se(t, r) ? n[t] : T;
	    }

	    function Xt(n, t, r) {
	      var e = -1;
	      return t = c(t.length ? t : [$u], E(ye())), n = Gt(n, function (n, r, u) {
	        return {
	          a: c(t, function (t) {
	            return t(n);
	          }),
	          b: ++e,
	          c: n
	        };
	      }), w(n, function (n, t) {
	        var e;

	        n: {
	          e = -1;

	          for (var u = n.a, i = t.a, o = u.length, f = r.length; ++e < o;) {
	            var c = Wr(u[e], i[e]);

	            if (c) {
	              if (e >= f) {
	                e = c;
	                break n;
	              }

	              e = c * ("desc" == r[e] ? -1 : 1);
	              break n;
	            }
	          }

	          e = n.b - t.b;
	        }

	        return e;
	      });
	    }

	    function nr(n, t) {
	      return tr(n, t, function (t, r) {
	        return zu(n, r);
	      });
	    }

	    function tr(n, t, r) {
	      for (var e = -1, u = t.length, i = {}; ++e < u;) {
	        var o = t[e],
	            f = Et(n, o);
	        r(f, o) && lr(i, Sr(o, n), f);
	      }

	      return i;
	    }

	    function rr(n) {
	      return function (t) {
	        return Et(t, n);
	      };
	    }

	    function er(n, t, r, e) {
	      var u = e ? g : v,
	          i = -1,
	          o = t.length,
	          f = n;

	      for (n === t && (t = Lr(t)), r && (f = c(n, E(r))); ++i < o;) {
	        for (var a = 0, l = t[i], l = r ? r(l) : l; -1 < (a = u(f, l, a, e));) {
	          f !== n && xi.call(f, a, 1), xi.call(n, a, 1);
	        }
	      }

	      return n;
	    }

	    function ur(n, t) {
	      for (var r = n ? t.length : 0, e = r - 1; r--;) {
	        var u = t[r];

	        if (r == e || u !== i) {
	          var i = u;
	          Se(u) ? xi.call(n, u, 1) : xr(n, u);
	        }
	      }

	      return n;
	    }

	    function ir(n, t) {
	      return n + Ii(Ti() * (t - n + 1));
	    }

	    function or(n, t) {
	      var r = "";
	      if (!n || 1 > t || 9007199254740991 < t) return r;

	      do {
	        t % 2 && (r += n), (t = Ii(t / 2)) && (n += n);
	      } while (t);

	      return r;
	    }

	    function fr(n, t) {
	      return xo(Ue(n, t, $u), n + "");
	    }

	    function cr(n) {
	      return Qn(Lu(n));
	    }

	    function ar(n, t) {
	      var r = Lu(n);
	      return De(r, pt(t, 0, r.length));
	    }

	    function lr(n, t, r, e) {
	      if (!du(n)) return n;
	      t = Sr(t, n);

	      for (var u = -1, i = t.length, o = i - 1, f = n; null != f && ++u < i;) {
	        var c = Me(t[u]),
	            a = r;

	        if (u != o) {
	          var l = f[c],
	              a = e ? e(l, c, f) : T;
	          a === T && (a = du(l) ? l : Se(t[u + 1]) ? [] : {});
	        }

	        ot(f, c, a), f = f[c];
	      }

	      return n;
	    }

	    function sr(n) {
	      return De(Lu(n));
	    }

	    function hr(n, t, r) {
	      var e = -1,
	          u = n.length;

	      for (0 > t && (t = -t > u ? 0 : u + t), r = r > u ? u : r, 0 > r && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0, r = Ku(u); ++e < u;) {
	        r[e] = n[e + t];
	      }

	      return r;
	    }

	    function pr(n, t) {
	      var r;
	      return uo(n, function (n, e, u) {
	        return r = t(n, e, u), !r;
	      }), !!r;
	    }

	    function _r(n, t, r) {
	      var e = 0,
	          u = null == n ? e : n.length;

	      if (typeof t == "number" && t === t && 2147483647 >= u) {
	        for (; e < u;) {
	          var i = e + u >>> 1,
	              o = n[i];
	          null !== o && !wu(o) && (r ? o <= t : o < t) ? e = i + 1 : u = i;
	        }

	        return u;
	      }

	      return vr(n, t, $u, r);
	    }

	    function vr(n, t, r, e) {
	      t = r(t);

	      for (var u = 0, i = null == n ? 0 : n.length, o = t !== t, f = null === t, c = wu(t), a = t === T; u < i;) {
	        var l = Ii((u + i) / 2),
	            s = r(n[l]),
	            h = s !== T,
	            p = null === s,
	            _ = s === s,
	            v = wu(s);

	        (o ? e || _ : a ? _ && (e || h) : f ? _ && h && (e || !p) : c ? _ && h && !p && (e || !v) : p || v ? 0 : e ? s <= t : s < t) ? u = l + 1 : i = l;
	      }

	      return Ci(i, 4294967294);
	    }

	    function gr(n, t) {
	      for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
	        var o = n[r],
	            f = t ? t(o) : o;

	        if (!r || !lu(f, c)) {
	          var c = f;
	          i[u++] = 0 === o ? 0 : o;
	        }
	      }

	      return i;
	    }

	    function dr(n) {
	      return typeof n == "number" ? n : wu(n) ? F : +n;
	    }

	    function yr(n) {
	      if (typeof n == "string") return n;
	      if (ff(n)) return c(n, yr) + "";
	      if (wu(n)) return ro ? ro.call(n) : "";
	      var t = n + "";
	      return "0" == t && 1 / n == -$ ? "-0" : t;
	    }

	    function br(n, t, r) {
	      var e = -1,
	          u = o,
	          i = n.length,
	          c = true,
	          a = [],
	          l = a;
	      if (r) c = false, u = f;else if (200 <= i) {
	        if (u = t ? null : so(n)) return L(u);
	        c = false, u = O, l = new Nn();
	      } else l = t ? [] : a;

	      n: for (; ++e < i;) {
	        var s = n[e],
	            h = t ? t(s) : s,
	            s = r || 0 !== s ? s : 0;

	        if (c && h === h) {
	          for (var p = l.length; p--;) {
	            if (l[p] === h) continue n;
	          }

	          t && l.push(h), a.push(s);
	        } else u(l, h, r) || (l !== a && l.push(h), a.push(s));
	      }

	      return a;
	    }

	    function xr(n, t) {
	      return t = Sr(t, n), n = 2 > t.length ? n : Et(n, hr(t, 0, -1)), null == n || delete n[Me(Ve(t))];
	    }

	    function jr(n, t, r, e) {
	      for (var u = n.length, i = e ? u : -1; (e ? i-- : ++i < u) && t(n[i], i, n);) {
	      }

	      return r ? hr(n, e ? 0 : i, e ? i + 1 : u) : hr(n, e ? i + 1 : 0, e ? u : i);
	    }

	    function wr(n, t) {
	      var r = n;
	      return r instanceof Ln && (r = r.value()), l(t, function (n, t) {
	        return t.func.apply(t.thisArg, a([n], t.args));
	      }, r);
	    }

	    function mr(n, t, r) {
	      var e = n.length;
	      if (2 > e) return e ? br(n[0]) : [];

	      for (var u = -1, i = Ku(e); ++u < e;) {
	        for (var o = n[u], f = -1; ++f < e;) {
	          f != u && (i[u] = yt(i[u] || o, n[f], t, r));
	        }
	      }

	      return br(wt(i, 1), t, r);
	    }

	    function Ar(n, t, r) {
	      for (var e = -1, u = n.length, i = t.length, o = {}; ++e < u;) {
	        r(o, n[e], e < i ? t[e] : T);
	      }

	      return o;
	    }

	    function kr(n) {
	      return hu(n) ? n : [];
	    }

	    function Er(n) {
	      return typeof n == "function" ? n : $u;
	    }

	    function Sr(n, t) {
	      return ff(n) ? n : Ie(n, t) ? [n] : jo(Iu(n));
	    }

	    function Or(n, t, r) {
	      var e = n.length;
	      return r = r === T ? e : r, !t && r >= e ? n : hr(n, t, r);
	    }

	    function Ir(n, t) {
	      if (t) return n.slice();
	      var r = n.length,
	          r = gi ? gi(r) : new n.constructor(r);
	      return n.copy(r), r;
	    }

	    function Rr(n) {
	      var t = new n.constructor(n.byteLength);
	      return new vi(t).set(new vi(n)), t;
	    }

	    function zr(n, t) {
	      return new n.constructor(t ? Rr(n.buffer) : n.buffer, n.byteOffset, n.length);
	    }

	    function Wr(n, t) {
	      if (n !== t) {
	        var r = n !== T,
	            e = null === n,
	            u = n === n,
	            i = wu(n),
	            o = t !== T,
	            f = null === t,
	            c = t === t,
	            a = wu(t);
	        if (!f && !a && !i && n > t || i && o && c && !f && !a || e && o && c || !r && c || !u) return 1;
	        if (!e && !i && !a && n < t || a && r && u && !e && !i || f && r && u || !o && u || !c) return -1;
	      }

	      return 0;
	    }

	    function Ur(n, t, r, e) {
	      var u = -1,
	          i = n.length,
	          o = r.length,
	          f = -1,
	          c = t.length,
	          a = Li(i - o, 0),
	          l = Ku(c + a);

	      for (e = !e; ++f < c;) {
	        l[f] = t[f];
	      }

	      for (; ++u < o;) {
	        (e || u < i) && (l[r[u]] = n[u]);
	      }

	      for (; a--;) {
	        l[f++] = n[u++];
	      }

	      return l;
	    }

	    function Br(n, t, r, e) {
	      var u = -1,
	          i = n.length,
	          o = -1,
	          f = r.length,
	          c = -1,
	          a = t.length,
	          l = Li(i - f, 0),
	          s = Ku(l + a);

	      for (e = !e; ++u < l;) {
	        s[u] = n[u];
	      }

	      for (l = u; ++c < a;) {
	        s[l + c] = t[c];
	      }

	      for (; ++o < f;) {
	        (e || u < i) && (s[l + r[o]] = n[u++]);
	      }

	      return s;
	    }

	    function Lr(n, t) {
	      var r = -1,
	          e = n.length;

	      for (t || (t = Ku(e)); ++r < e;) {
	        t[r] = n[r];
	      }

	      return t;
	    }

	    function Cr(n, t, r, e) {
	      var u = !r;
	      r || (r = {});

	      for (var i = -1, o = t.length; ++i < o;) {
	        var f = t[i],
	            c = e ? e(r[f], n[f], f, r, n) : T;
	        c === T && (c = n[f]), u ? st(r, f, c) : ot(r, f, c);
	      }

	      return r;
	    }

	    function Dr(n, t) {
	      return Cr(n, po(n), t);
	    }

	    function Mr(n, t) {
	      return Cr(n, _o(n), t);
	    }

	    function Tr(n, r) {
	      return function (e, u) {
	        var i = ff(e) ? t : ct,
	            o = r ? r() : {};
	        return i(e, n, ye(u, 2), o);
	      };
	    }

	    function $r(n) {
	      return fr(function (t, r) {
	        var e = -1,
	            u = r.length,
	            i = 1 < u ? r[u - 1] : T,
	            o = 2 < u ? r[2] : T,
	            i = 3 < n.length && typeof i == "function" ? (u--, i) : T;

	        for (o && Oe(r[0], r[1], o) && (i = 3 > u ? T : i, u = 1), t = Qu(t); ++e < u;) {
	          (o = r[e]) && n(t, o, e, i);
	        }

	        return t;
	      });
	    }

	    function Fr(n, t) {
	      return function (r, e) {
	        if (null == r) return r;
	        if (!su(r)) return n(r, e);

	        for (var u = r.length, i = t ? u : -1, o = Qu(r); (t ? i-- : ++i < u) && false !== e(o[i], i, o);) {
	        }

	        return r;
	      };
	    }

	    function Nr(n) {
	      return function (t, r, e) {
	        var u = -1,
	            i = Qu(t);
	        e = e(t);

	        for (var o = e.length; o--;) {
	          var f = e[n ? o : ++u];
	          if (false === r(i[f], f, i)) break;
	        }

	        return t;
	      };
	    }

	    function Pr(n, t, r) {
	      function e() {
	        return (this && this !== $n && this instanceof e ? i : n).apply(u ? r : this, arguments);
	      }

	      var u = 1 & t,
	          i = Vr(n);
	      return e;
	    }

	    function Zr(n) {
	      return function (t) {
	        t = Iu(t);
	        var r = Rn.test(t) ? M(t) : T,
	            e = r ? r[0] : t.charAt(0);
	        return t = r ? Or(r, 1).join("") : t.slice(1), e[n]() + t;
	      };
	    }

	    function qr(n) {
	      return function (t) {
	        return l(Mu(Du(t).replace(En, "")), n, "");
	      };
	    }

	    function Vr(n) {
	      return function () {
	        var t = arguments;

	        switch (t.length) {
	          case 0:
	            return new n();

	          case 1:
	            return new n(t[0]);

	          case 2:
	            return new n(t[0], t[1]);

	          case 3:
	            return new n(t[0], t[1], t[2]);

	          case 4:
	            return new n(t[0], t[1], t[2], t[3]);

	          case 5:
	            return new n(t[0], t[1], t[2], t[3], t[4]);

	          case 6:
	            return new n(t[0], t[1], t[2], t[3], t[4], t[5]);

	          case 7:
	            return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
	        }

	        var r = eo(n.prototype),
	            t = n.apply(r, t);
	        return du(t) ? t : r;
	      };
	    }

	    function Kr(t, r, e) {
	      function u() {
	        for (var o = arguments.length, f = Ku(o), c = o, a = de(u); c--;) {
	          f[c] = arguments[c];
	        }

	        return c = 3 > o && f[0] !== a && f[o - 1] !== a ? [] : B(f, a), o -= c.length, o < e ? ue(t, r, Jr, u.placeholder, T, f, c, T, T, e - o) : n(this && this !== $n && this instanceof u ? i : t, this, f);
	      }

	      var i = Vr(t);
	      return u;
	    }

	    function Gr(n) {
	      return function (t, r, e) {
	        var u = Qu(t);

	        if (!su(t)) {
	          var i = ye(r, 3);
	          t = Wu(t), r = function r(n) {
	            return i(u[n], n, u);
	          };
	        }

	        return r = n(t, r, e), -1 < r ? u[i ? t[r] : r] : T;
	      };
	    }

	    function Hr(n) {
	      return pe(function (t) {
	        var r = t.length,
	            e = r,
	            u = On.prototype.thru;

	        for (n && t.reverse(); e--;) {
	          var i = t[e];
	          if (typeof i != "function") throw new ti("Expected a function");
	          if (u && !o && "wrapper" == ge(i)) var o = new On([], true);
	        }

	        for (e = o ? e : r; ++e < r;) {
	          var i = t[e],
	              u = ge(i),
	              f = "wrapper" == u ? ho(i) : T,
	              o = f && Re(f[0]) && 424 == f[1] && !f[4].length && 1 == f[9] ? o[ge(f[0])].apply(o, f[3]) : 1 == i.length && Re(i) ? o[u]() : o.thru(i);
	        }

	        return function () {
	          var n = arguments,
	              e = n[0];
	          if (o && 1 == n.length && ff(e)) return o.plant(e).value();

	          for (var u = 0, n = r ? t[u].apply(this, n) : e; ++u < r;) {
	            n = t[u].call(this, n);
	          }

	          return n;
	        };
	      });
	    }

	    function Jr(n, t, r, e, u, i, o, f, c, a) {
	      function l() {
	        for (var d = arguments.length, y = Ku(d), b = d; b--;) {
	          y[b] = arguments[b];
	        }

	        if (_) {
	          var x,
	              j = de(l),
	              b = y.length;

	          for (x = 0; b--;) {
	            y[b] === j && ++x;
	          }
	        }

	        if (e && (y = Ur(y, e, u, _)), i && (y = Br(y, i, o, _)), d -= x, _ && d < a) return j = B(y, j), ue(n, t, Jr, l.placeholder, r, y, j, f, c, a - d);

	        if (j = h ? r : this, b = p ? j[n] : n, d = y.length, f) {
	          x = y.length;

	          for (var w = Ci(f.length, x), m = Lr(y); w--;) {
	            var A = f[w];
	            y[w] = Se(A, x) ? m[A] : T;
	          }
	        } else v && 1 < d && y.reverse();

	        return s && c < d && (y.length = c), this && this !== $n && this instanceof l && (b = g || Vr(b)), b.apply(j, y);
	      }

	      var s = 128 & t,
	          h = 1 & t,
	          p = 2 & t,
	          _ = 24 & t,
	          v = 512 & t,
	          g = p ? T : Vr(n);

	      return l;
	    }

	    function Yr(n, t) {
	      return function (r, e) {
	        return Ut(r, n, t(e), {});
	      };
	    }

	    function Qr(n, t) {
	      return function (r, e) {
	        var u;
	        if (r === T && e === T) return t;

	        if (r !== T && (u = r), e !== T) {
	          if (u === T) return e;
	          typeof r == "string" || typeof e == "string" ? (r = yr(r), e = yr(e)) : (r = dr(r), e = dr(e)), u = n(r, e);
	        }

	        return u;
	      };
	    }

	    function Xr(t) {
	      return pe(function (r) {
	        return r = c(r, E(ye())), fr(function (e) {
	          var u = this;
	          return t(r, function (t) {
	            return n(t, u, e);
	          });
	        });
	      });
	    }

	    function ne(n, t) {
	      t = t === T ? " " : yr(t);
	      var r = t.length;
	      return 2 > r ? r ? or(t, n) : t : (r = or(t, Oi(n / D(t))), Rn.test(t) ? Or(M(r), 0, n).join("") : r.slice(0, n));
	    }

	    function te(t, r, e, u) {
	      function i() {
	        for (var r = -1, c = arguments.length, a = -1, l = u.length, s = Ku(l + c), h = this && this !== $n && this instanceof i ? f : t; ++a < l;) {
	          s[a] = u[a];
	        }

	        for (; c--;) {
	          s[a++] = arguments[++r];
	        }

	        return n(h, o ? e : this, s);
	      }

	      var o = 1 & r,
	          f = Vr(t);
	      return i;
	    }

	    function re(n) {
	      return function (t, r, e) {
	        e && typeof e != "number" && Oe(t, r, e) && (r = e = T), t = Au(t), r === T ? (r = t, t = 0) : r = Au(r), e = e === T ? t < r ? 1 : -1 : Au(e);
	        var u = -1;
	        r = Li(Oi((r - t) / (e || 1)), 0);

	        for (var i = Ku(r); r--;) {
	          i[n ? r : ++u] = t, t += e;
	        }

	        return i;
	      };
	    }

	    function ee(n) {
	      return function (t, r) {
	        return typeof t == "string" && typeof r == "string" || (t = Su(t), r = Su(r)), n(t, r);
	      };
	    }

	    function ue(n, t, r, e, u, i, o, f, c, a) {
	      var l = 8 & t,
	          s = l ? o : T;
	      o = l ? T : o;
	      var h = l ? i : T;
	      return i = l ? T : i, t = (t | (l ? 32 : 64)) & ~(l ? 64 : 32), 4 & t || (t &= -4), u = [n, t, u, h, s, i, o, f, c, a], r = r.apply(T, u), Re(n) && yo(r, u), r.placeholder = e, Le(r, n, t);
	    }

	    function ie(n) {
	      var t = Yu[n];
	      return function (n, r) {
	        if (n = Su(n), r = null == r ? 0 : Ci(ku(r), 292)) {
	          var e = (Iu(n) + "e").split("e"),
	              e = t(e[0] + "e" + (+e[1] + r)),
	              e = (Iu(e) + "e").split("e");
	          return +(e[0] + "e" + (+e[1] - r));
	        }

	        return t(n);
	      };
	    }

	    function oe(n) {
	      return function (t) {
	        var r = vo(t);
	        return "[object Map]" == r ? W(t) : "[object Set]" == r ? C(t) : k(t, n(t));
	      };
	    }

	    function fe(n, t, r, e, u, i, o, f) {
	      var c = 2 & t;
	      if (!c && typeof n != "function") throw new ti("Expected a function");
	      var a = e ? e.length : 0;

	      if (a || (t &= -97, e = u = T), o = o === T ? o : Li(ku(o), 0), f = f === T ? f : ku(f), a -= u ? u.length : 0, 64 & t) {
	        var l = e,
	            s = u;
	        e = u = T;
	      }

	      var h = c ? T : ho(n);
	      return i = [n, t, r, e, u, l, s, i, o, f], h && (r = i[1], n = h[1], t = r | n, e = 128 == n && 8 == r || 128 == n && 256 == r && i[7].length <= h[8] || 384 == n && h[7].length <= h[8] && 8 == r, 131 > t || e) && (1 & n && (i[2] = h[2], t |= 1 & r ? 0 : 4), (r = h[3]) && (e = i[3], i[3] = e ? Ur(e, r, h[4]) : r, i[4] = e ? B(i[3], "__lodash_placeholder__") : h[4]), (r = h[5]) && (e = i[5], i[5] = e ? Br(e, r, h[6]) : r, i[6] = e ? B(i[5], "__lodash_placeholder__") : h[6]), (r = h[7]) && (i[7] = r), 128 & n && (i[8] = null == i[8] ? h[8] : Ci(i[8], h[8])), null == i[9] && (i[9] = h[9]), i[0] = h[0], i[1] = t), n = i[0], t = i[1], r = i[2], e = i[3], u = i[4], f = i[9] = i[9] === T ? c ? 0 : n.length : Li(i[9] - a, 0), !f && 24 & t && (t &= -25), c = t && 1 != t ? 8 == t || 16 == t ? Kr(n, t, f) : 32 != t && 33 != t || u.length ? Jr.apply(T, i) : te(n, t, r, e) : Pr(n, t, r), Le((h ? co : yo)(c, i), n, t);
	    }

	    function ce(n, t, r, e) {
	      return n === T || lu(n, ei[r]) && !oi.call(e, r) ? t : n;
	    }

	    function ae(n, t, r, e, u, i) {
	      return du(n) && du(t) && (i.set(t, n), Yt(n, t, T, ae, i), i.delete(t)), n;
	    }

	    function le(n) {
	      return xu(n) ? T : n;
	    }

	    function se(n, t, r, e, u, i) {
	      var o = 1 & r,
	          f = n.length,
	          c = t.length;
	      if (f != c && !(o && c > f)) return false;
	      if ((c = i.get(n)) && i.get(t)) return c == t;
	      var c = -1,
	          a = true,
	          l = 2 & r ? new Nn() : T;

	      for (i.set(n, t), i.set(t, n); ++c < f;) {
	        var s = n[c],
	            p = t[c];
	        if (e) var _ = o ? e(p, s, c, t, n, i) : e(s, p, c, n, t, i);

	        if (_ !== T) {
	          if (_) continue;
	          a = false;
	          break;
	        }

	        if (l) {
	          if (!h(t, function (n, t) {
	            if (!O(l, t) && (s === n || u(s, n, r, e, i))) return l.push(t);
	          })) {
	            a = false;
	            break;
	          }
	        } else if (s !== p && !u(s, p, r, e, i)) {
	          a = false;
	          break;
	        }
	      }

	      return i.delete(n), i.delete(t), a;
	    }

	    function he(n, t, r, e, u, i, o) {
	      switch (r) {
	        case "[object DataView]":
	          if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) break;
	          n = n.buffer, t = t.buffer;

	        case "[object ArrayBuffer]":
	          if (n.byteLength != t.byteLength || !i(new vi(n), new vi(t))) break;
	          return true;

	        case "[object Boolean]":
	        case "[object Date]":
	        case "[object Number]":
	          return lu(+n, +t);

	        case "[object Error]":
	          return n.name == t.name && n.message == t.message;

	        case "[object RegExp]":
	        case "[object String]":
	          return n == t + "";

	        case "[object Map]":
	          var f = W;

	        case "[object Set]":
	          if (f || (f = L), n.size != t.size && !(1 & e)) break;
	          return (r = o.get(n)) ? r == t : (e |= 2, o.set(n, t), t = se(f(n), f(t), e, u, i, o), o.delete(n), t);

	        case "[object Symbol]":
	          if (to) return to.call(n) == to.call(t);
	      }

	      return false;
	    }

	    function pe(n) {
	      return xo(Ue(n, T, Ze), n + "");
	    }

	    function _e(n) {
	      return St(n, Wu, po);
	    }

	    function ve(n) {
	      return St(n, Uu, _o);
	    }

	    function ge(n) {
	      for (var t = n.name + "", r = Gi[t], e = oi.call(Gi, t) ? r.length : 0; e--;) {
	        var u = r[e],
	            i = u.func;
	        if (null == i || i == n) return u.name;
	      }

	      return t;
	    }

	    function de(n) {
	      return (oi.call(An, "placeholder") ? An : n).placeholder;
	    }

	    function ye() {
	      var n = An.iteratee || Fu,
	          n = n === Fu ? qt : n;
	      return arguments.length ? n(arguments[0], arguments[1]) : n;
	    }

	    function be(n, t) {
	      var r = n.__data__,
	          e = _typeof_1$1(t);

	      return ("string" == e || "number" == e || "symbol" == e || "boolean" == e ? "__proto__" !== t : null === t) ? r[typeof t == "string" ? "string" : "hash"] : r.map;
	    }

	    function xe(n) {
	      for (var t = Wu(n), r = t.length; r--;) {
	        var e = t[r],
	            u = n[e];
	        t[r] = [e, u, u === u && !du(u)];
	      }

	      return t;
	    }

	    function je(n, t) {
	      var r = null == n ? T : n[t];
	      return Ft(r) ? r : T;
	    }

	    function we(n, t, r) {
	      t = Sr(t, n);

	      for (var e = -1, u = t.length, i = false; ++e < u;) {
	        var o = Me(t[e]);
	        if (!(i = null != n && r(n, o))) break;
	        n = n[o];
	      }

	      return i || ++e != u ? i : (u = null == n ? 0 : n.length, !!u && gu(u) && Se(o, u) && (ff(n) || of(n)));
	    }

	    function me(n) {
	      var t = n.length,
	          r = new n.constructor(t);
	      return t && "string" == typeof n[0] && oi.call(n, "index") && (r.index = n.index, r.input = n.input), r;
	    }

	    function Ae(n) {
	      return typeof n.constructor != "function" || ze(n) ? {} : eo(di(n));
	    }

	    function ke(n, t, r) {
	      var e = n.constructor;

	      switch (t) {
	        case "[object ArrayBuffer]":
	          return Rr(n);

	        case "[object Boolean]":
	        case "[object Date]":
	          return new e(+n);

	        case "[object DataView]":
	          return t = r ? Rr(n.buffer) : n.buffer, new n.constructor(t, n.byteOffset, n.byteLength);

	        case "[object Float32Array]":
	        case "[object Float64Array]":
	        case "[object Int8Array]":
	        case "[object Int16Array]":
	        case "[object Int32Array]":
	        case "[object Uint8Array]":
	        case "[object Uint8ClampedArray]":
	        case "[object Uint16Array]":
	        case "[object Uint32Array]":
	          return zr(n, r);

	        case "[object Map]":
	          return new e();

	        case "[object Number]":
	        case "[object String]":
	          return new e(n);

	        case "[object RegExp]":
	          return t = new n.constructor(n.source, _n.exec(n)), t.lastIndex = n.lastIndex, t;

	        case "[object Set]":
	          return new e();

	        case "[object Symbol]":
	          return to ? Qu(to.call(n)) : {};
	      }
	    }

	    function Ee(n) {
	      return ff(n) || of(n) || !!(ji && n && n[ji]);
	    }

	    function Se(n, t) {
	      var r = _typeof_1$1(n);

	      return t = null == t ? 9007199254740991 : t, !!t && ("number" == r || "symbol" != r && bn.test(n)) && -1 < n && 0 == n % 1 && n < t;
	    }

	    function Oe(n, t, r) {
	      if (!du(r)) return false;

	      var e = _typeof_1$1(t);

	      return !!("number" == e ? su(r) && Se(t, r.length) : "string" == e && t in r) && lu(r[t], n);
	    }

	    function Ie(n, t) {
	      if (ff(n)) return false;

	      var r = _typeof_1$1(n);

	      return !("number" != r && "symbol" != r && "boolean" != r && null != n && !wu(n)) || nn.test(n) || !X.test(n) || null != t && n in Qu(t);
	    }

	    function Re(n) {
	      var t = ge(n),
	          r = An[t];
	      return typeof r == "function" && t in Ln.prototype && (n === r || (t = ho(r), !!t && n === t[0]));
	    }

	    function ze(n) {
	      var t = n && n.constructor;
	      return n === (typeof t == "function" && t.prototype || ei);
	    }

	    function We(n, t) {
	      return function (r) {
	        return null != r && r[n] === t && (t !== T || n in Qu(r));
	      };
	    }

	    function Ue(t, r, e) {
	      return r = Li(r === T ? t.length - 1 : r, 0), function () {
	        for (var u = arguments, i = -1, o = Li(u.length - r, 0), f = Ku(o); ++i < o;) {
	          f[i] = u[r + i];
	        }

	        for (i = -1, o = Ku(r + 1); ++i < r;) {
	          o[i] = u[i];
	        }

	        return o[r] = e(f), n(t, this, o);
	      };
	    }

	    function Be(n, t) {
	      if ("__proto__" != t) return n[t];
	    }

	    function Le(n, t, r) {
	      var e = t + "";
	      t = xo;
	      var u,
	          i = $e;
	      return u = (u = e.match(an)) ? u[1].split(ln) : [], r = i(u, r), (i = r.length) && (u = i - 1, r[u] = (1 < i ? "& " : "") + r[u], r = r.join(2 < i ? ", " : " "), e = e.replace(cn, "{\n/* [wrapped with " + r + "] */\n")), t(n, e);
	    }

	    function Ce(n) {
	      var t = 0,
	          r = 0;
	      return function () {
	        var e = Di(),
	            u = 16 - (e - r);

	        if (r = e, 0 < u) {
	          if (800 <= ++t) return arguments[0];
	        } else t = 0;

	        return n.apply(T, arguments);
	      };
	    }

	    function De(n, t) {
	      var r = -1,
	          e = n.length,
	          u = e - 1;

	      for (t = t === T ? e : t; ++r < t;) {
	        var e = ir(r, u),
	            i = n[e];
	        n[e] = n[r], n[r] = i;
	      }

	      return n.length = t, n;
	    }

	    function Me(n) {
	      if (typeof n == "string" || wu(n)) return n;
	      var t = n + "";
	      return "0" == t && 1 / n == -$ ? "-0" : t;
	    }

	    function Te(n) {
	      if (null != n) {
	        try {
	          return ii.call(n);
	        } catch (n) {}

	        return n + "";
	      }

	      return "";
	    }

	    function $e(n, t) {
	      return r(N, function (r) {
	        var e = "_." + r[0];
	        t & r[1] && !o(n, e) && n.push(e);
	      }), n.sort();
	    }

	    function Fe(n) {
	      if (n instanceof Ln) return n.clone();
	      var t = new On(n.__wrapped__, n.__chain__);
	      return t.__actions__ = Lr(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;
	    }

	    function Ne(n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (r = null == r ? 0 : ku(r), 0 > r && (r = Li(e + r, 0)), _(n, ye(t, 3), r)) : -1;
	    }

	    function Pe(n, t, r) {
	      var e = null == n ? 0 : n.length;
	      if (!e) return -1;
	      var u = e - 1;
	      return r !== T && (u = ku(r), u = 0 > r ? Li(e + u, 0) : Ci(u, e - 1)), _(n, ye(t, 3), u, true);
	    }

	    function Ze(n) {
	      return (null == n ? 0 : n.length) ? wt(n, 1) : [];
	    }

	    function qe(n) {
	      return n && n.length ? n[0] : T;
	    }

	    function Ve(n) {
	      var t = null == n ? 0 : n.length;
	      return t ? n[t - 1] : T;
	    }

	    function Ke(n, t) {
	      return n && n.length && t && t.length ? er(n, t) : n;
	    }

	    function Ge(n) {
	      return null == n ? n : $i.call(n);
	    }

	    function He(n) {
	      if (!n || !n.length) return [];
	      var t = 0;
	      return n = i(n, function (n) {
	        if (hu(n)) return t = Li(n.length, t), true;
	      }), A(t, function (t) {
	        return c(n, b(t));
	      });
	    }

	    function Je(t, r) {
	      if (!t || !t.length) return [];
	      var e = He(t);
	      return null == r ? e : c(e, function (t) {
	        return n(r, T, t);
	      });
	    }

	    function Ye(n) {
	      return n = An(n), n.__chain__ = true, n;
	    }

	    function Qe(n, t) {
	      return t(n);
	    }

	    function Xe() {
	      return this;
	    }

	    function nu(n, t) {
	      return (ff(n) ? r : uo)(n, ye(t, 3));
	    }

	    function tu(n, t) {
	      return (ff(n) ? e : io)(n, ye(t, 3));
	    }

	    function ru(n, t) {
	      return (ff(n) ? c : Gt)(n, ye(t, 3));
	    }

	    function eu(n, t, r) {
	      return t = r ? T : t, t = n && null == t ? n.length : t, fe(n, 128, T, T, T, T, t);
	    }

	    function uu(n, t) {
	      var r;
	      if (typeof t != "function") throw new ti("Expected a function");
	      return n = ku(n), function () {
	        return 0 < --n && (r = t.apply(this, arguments)), 1 >= n && (t = T), r;
	      };
	    }

	    function iu(n, t, r) {
	      return t = r ? T : t, n = fe(n, 8, T, T, T, T, T, t), n.placeholder = iu.placeholder, n;
	    }

	    function ou(n, t, r) {
	      return t = r ? T : t, n = fe(n, 16, T, T, T, T, T, t), n.placeholder = ou.placeholder, n;
	    }

	    function fu(n, t, r) {
	      function e(t) {
	        var r = c,
	            e = a;
	        return c = a = T, _ = t, s = n.apply(e, r);
	      }

	      function u(n) {
	        var r = n - p;
	        return n -= _, p === T || r >= t || 0 > r || g && n >= l;
	      }

	      function i() {
	        var n = Go();
	        if (u(n)) return o(n);
	        var r,
	            e = bo;
	        r = n - _, n = t - (n - p), r = g ? Ci(n, l - r) : n, h = e(i, r);
	      }

	      function o(n) {
	        return h = T, d && c ? e(n) : (c = a = T, s);
	      }

	      function f() {
	        var n = Go(),
	            r = u(n);

	        if (c = arguments, a = this, p = n, r) {
	          if (h === T) return _ = n = p, h = bo(i, t), v ? e(n) : s;
	          if (g) return h = bo(i, t), e(p);
	        }

	        return h === T && (h = bo(i, t)), s;
	      }

	      var c,
	          a,
	          l,
	          s,
	          h,
	          p,
	          _ = 0,
	          v = false,
	          g = false,
	          d = true;
	      if (typeof n != "function") throw new ti("Expected a function");
	      return t = Su(t) || 0, du(r) && (v = !!r.leading, l = (g = "maxWait" in r) ? Li(Su(r.maxWait) || 0, t) : l, d = "trailing" in r ? !!r.trailing : d), f.cancel = function () {
	        h !== T && lo(h), _ = 0, c = p = a = h = T;
	      }, f.flush = function () {
	        return h === T ? s : o(Go());
	      }, f;
	    }

	    function cu(n, t) {
	      if (typeof n != "function" || null != t && typeof t != "function") throw new ti("Expected a function");

	      var r = function r() {
	        var e = arguments,
	            u = t ? t.apply(this, e) : e[0],
	            i = r.cache;
	        return i.has(u) ? i.get(u) : (e = n.apply(this, e), r.cache = i.set(u, e) || i, e);
	      };

	      return r.cache = new (cu.Cache || Fn)(), r;
	    }

	    function au(n) {
	      if (typeof n != "function") throw new ti("Expected a function");
	      return function () {
	        var t = arguments;

	        switch (t.length) {
	          case 0:
	            return !n.call(this);

	          case 1:
	            return !n.call(this, t[0]);

	          case 2:
	            return !n.call(this, t[0], t[1]);

	          case 3:
	            return !n.call(this, t[0], t[1], t[2]);
	        }

	        return !n.apply(this, t);
	      };
	    }

	    function lu(n, t) {
	      return n === t || n !== n && t !== t;
	    }

	    function su(n) {
	      return null != n && gu(n.length) && !_u(n);
	    }

	    function hu(n) {
	      return yu(n) && su(n);
	    }

	    function pu(n) {
	      if (!yu(n)) return false;
	      var t = Ot(n);
	      return "[object Error]" == t || "[object DOMException]" == t || typeof n.message == "string" && typeof n.name == "string" && !xu(n);
	    }

	    function _u(n) {
	      return !!du(n) && (n = Ot(n), "[object Function]" == n || "[object GeneratorFunction]" == n || "[object AsyncFunction]" == n || "[object Proxy]" == n);
	    }

	    function vu(n) {
	      return typeof n == "number" && n == ku(n);
	    }

	    function gu(n) {
	      return typeof n == "number" && -1 < n && 0 == n % 1 && 9007199254740991 >= n;
	    }

	    function du(n) {
	      var t = _typeof_1$1(n);

	      return null != n && ("object" == t || "function" == t);
	    }

	    function yu(n) {
	      return null != n && _typeof_1$1(n) == "object";
	    }

	    function bu(n) {
	      return typeof n == "number" || yu(n) && "[object Number]" == Ot(n);
	    }

	    function xu(n) {
	      return !(!yu(n) || "[object Object]" != Ot(n)) && (n = di(n), null === n || (n = oi.call(n, "constructor") && n.constructor, typeof n == "function" && n instanceof n && ii.call(n) == li));
	    }

	    function ju(n) {
	      return typeof n == "string" || !ff(n) && yu(n) && "[object String]" == Ot(n);
	    }

	    function wu(n) {
	      return _typeof_1$1(n) == "symbol" || yu(n) && "[object Symbol]" == Ot(n);
	    }

	    function mu(n) {
	      if (!n) return [];
	      if (su(n)) return ju(n) ? M(n) : Lr(n);

	      if (wi && n[wi]) {
	        n = n[wi]();

	        for (var t, r = []; !(t = n.next()).done;) {
	          r.push(t.value);
	        }

	        return r;
	      }

	      return t = vo(n), ("[object Map]" == t ? W : "[object Set]" == t ? L : Lu)(n);
	    }

	    function Au(n) {
	      return n ? (n = Su(n), n === $ || n === -$ ? 1.7976931348623157e308 * (0 > n ? -1 : 1) : n === n ? n : 0) : 0 === n ? n : 0;
	    }

	    function ku(n) {
	      n = Au(n);
	      var t = n % 1;
	      return n === n ? t ? n - t : n : 0;
	    }

	    function Eu(n) {
	      return n ? pt(ku(n), 0, 4294967295) : 0;
	    }

	    function Su(n) {
	      if (typeof n == "number") return n;
	      if (wu(n)) return F;
	      if (du(n) && (n = typeof n.valueOf == "function" ? n.valueOf() : n, n = du(n) ? n + "" : n), typeof n != "string") return 0 === n ? n : +n;
	      n = n.replace(un, "");
	      var t = gn.test(n);
	      return t || yn.test(n) ? Dn(n.slice(2), t ? 2 : 8) : vn.test(n) ? F : +n;
	    }

	    function Ou(n) {
	      return Cr(n, Uu(n));
	    }

	    function Iu(n) {
	      return null == n ? "" : yr(n);
	    }

	    function Ru(n, t, r) {
	      return n = null == n ? T : Et(n, t), n === T ? r : n;
	    }

	    function zu(n, t) {
	      return null != n && we(n, t, zt);
	    }

	    function Wu(n) {
	      return su(n) ? qn(n) : Vt(n);
	    }

	    function Uu(n) {
	      if (su(n)) n = qn(n, true);else if (du(n)) {
	        var t,
	            r = ze(n),
	            e = [];

	        for (t in n) {
	          ("constructor" != t || !r && oi.call(n, t)) && e.push(t);
	        }

	        n = e;
	      } else {
	        if (t = [], null != n) for (r in Qu(n)) {
	          t.push(r);
	        }
	        n = t;
	      }
	      return n;
	    }

	    function Bu(n, t) {
	      if (null == n) return {};
	      var r = c(ve(n), function (n) {
	        return [n];
	      });
	      return t = ye(t), tr(n, r, function (n, r) {
	        return t(n, r[0]);
	      });
	    }

	    function Lu(n) {
	      return null == n ? [] : S(n, Wu(n));
	    }

	    function Cu(n) {
	      return $f(Iu(n).toLowerCase());
	    }

	    function Du(n) {
	      return (n = Iu(n)) && n.replace(xn, Xn).replace(Sn, "");
	    }

	    function Mu(n, t, r) {
	      return n = Iu(n), t = r ? T : t, t === T ? zn.test(n) ? n.match(In) || [] : n.match(sn) || [] : n.match(t) || [];
	    }

	    function Tu(n) {
	      return function () {
	        return n;
	      };
	    }

	    function $u(n) {
	      return n;
	    }

	    function Fu(n) {
	      return qt(typeof n == "function" ? n : _t(n, 1));
	    }

	    function Nu(n, t, e) {
	      var u = Wu(t),
	          i = kt(t, u);
	      null != e || du(t) && (i.length || !u.length) || (e = t, t = n, n = this, i = kt(t, Wu(t)));

	      var o = !(du(e) && "chain" in e && !e.chain),
	          f = _u(n);

	      return r(i, function (r) {
	        var e = t[r];
	        n[r] = e, f && (n.prototype[r] = function () {
	          var t = this.__chain__;

	          if (o || t) {
	            var r = n(this.__wrapped__);
	            return (r.__actions__ = Lr(this.__actions__)).push({
	              func: e,
	              args: arguments,
	              thisArg: n
	            }), r.__chain__ = t, r;
	          }

	          return e.apply(n, a([this.value()], arguments));
	        });
	      }), n;
	    }

	    function Pu() {}

	    function Zu(n) {
	      return Ie(n) ? b(Me(n)) : rr(n);
	    }

	    function qu() {
	      return [];
	    }

	    function Vu() {
	      return false;
	    }

	    mn = null == mn ? $n : rt.defaults($n.Object(), mn, rt.pick($n, Wn));

	    var Ku = mn.Array,
	        Gu = mn.Date,
	        Hu = mn.Error,
	        Ju = mn.Function,
	        Yu = mn.Math,
	        Qu = mn.Object,
	        Xu = mn.RegExp,
	        ni = mn.String,
	        ti = mn.TypeError,
	        ri = Ku.prototype,
	        ei = Qu.prototype,
	        ui = mn["__core-js_shared__"],
	        ii = Ju.prototype.toString,
	        oi = ei.hasOwnProperty,
	        fi = 0,
	        ci = function () {
	      var n = /[^.]+$/.exec(ui && ui.keys && ui.keys.IE_PROTO || "");
	      return n ? "Symbol(src)_1." + n : "";
	    }(),
	        ai = ei.toString,
	        li = ii.call(Qu),
	        si = $n._,
	        hi = Xu("^" + ii.call(oi).replace(rn, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
	        pi = Pn ? mn.Buffer : T,
	        _i = mn.Symbol,
	        vi = mn.Uint8Array,
	        gi = pi ? pi.allocUnsafe : T,
	        di = U(Qu.getPrototypeOf, Qu),
	        yi = Qu.create,
	        bi = ei.propertyIsEnumerable,
	        xi = ri.splice,
	        ji = _i ? _i.isConcatSpreadable : T,
	        wi = _i ? _i.iterator : T,
	        mi = _i ? _i.toStringTag : T,
	        Ai = function () {
	      try {
	        var n = je(Qu, "defineProperty");
	        return n({}, "", {}), n;
	      } catch (n) {}
	    }(),
	        ki = mn.clearTimeout !== $n.clearTimeout && mn.clearTimeout,
	        Ei = Gu && Gu.now !== $n.Date.now && Gu.now,
	        Si = mn.setTimeout !== $n.setTimeout && mn.setTimeout,
	        Oi = Yu.ceil,
	        Ii = Yu.floor,
	        Ri = Qu.getOwnPropertySymbols,
	        zi = pi ? pi.isBuffer : T,
	        Wi = mn.isFinite,
	        Ui = ri.join,
	        Bi = U(Qu.keys, Qu),
	        Li = Yu.max,
	        Ci = Yu.min,
	        Di = Gu.now,
	        Mi = mn.parseInt,
	        Ti = Yu.random,
	        $i = ri.reverse,
	        Fi = je(mn, "DataView"),
	        Ni = je(mn, "Map"),
	        Pi = je(mn, "Promise"),
	        Zi = je(mn, "Set"),
	        qi = je(mn, "WeakMap"),
	        Vi = je(Qu, "create"),
	        Ki = qi && new qi(),
	        Gi = {},
	        Hi = Te(Fi),
	        Ji = Te(Ni),
	        Yi = Te(Pi),
	        Qi = Te(Zi),
	        Xi = Te(qi),
	        no = _i ? _i.prototype : T,
	        to = no ? no.valueOf : T,
	        ro = no ? no.toString : T,
	        eo = function () {
	      function n() {}

	      return function (t) {
	        return du(t) ? yi ? yi(t) : (n.prototype = t, t = new n(), n.prototype = T, t) : {};
	      };
	    }();

	    An.templateSettings = {
	      escape: J,
	      evaluate: Y,
	      interpolate: Q,
	      variable: "",
	      imports: {
	        _: An
	      }
	    }, An.prototype = kn.prototype, An.prototype.constructor = An, On.prototype = eo(kn.prototype), On.prototype.constructor = On, Ln.prototype = eo(kn.prototype), Ln.prototype.constructor = Ln, Mn.prototype.clear = function () {
	      this.__data__ = Vi ? Vi(null) : {}, this.size = 0;
	    }, Mn.prototype.delete = function (n) {
	      return n = this.has(n) && delete this.__data__[n], this.size -= n ? 1 : 0, n;
	    }, Mn.prototype.get = function (n) {
	      var t = this.__data__;
	      return Vi ? (n = t[n], "__lodash_hash_undefined__" === n ? T : n) : oi.call(t, n) ? t[n] : T;
	    }, Mn.prototype.has = function (n) {
	      var t = this.__data__;
	      return Vi ? t[n] !== T : oi.call(t, n);
	    }, Mn.prototype.set = function (n, t) {
	      var r = this.__data__;
	      return this.size += this.has(n) ? 0 : 1, r[n] = Vi && t === T ? "__lodash_hash_undefined__" : t, this;
	    }, Tn.prototype.clear = function () {
	      this.__data__ = [], this.size = 0;
	    }, Tn.prototype.delete = function (n) {
	      var t = this.__data__;
	      return n = ft(t, n), !(0 > n) && (n == t.length - 1 ? t.pop() : xi.call(t, n, 1), --this.size, true);
	    }, Tn.prototype.get = function (n) {
	      var t = this.__data__;
	      return n = ft(t, n), 0 > n ? T : t[n][1];
	    }, Tn.prototype.has = function (n) {
	      return -1 < ft(this.__data__, n);
	    }, Tn.prototype.set = function (n, t) {
	      var r = this.__data__,
	          e = ft(r, n);
	      return 0 > e ? (++this.size, r.push([n, t])) : r[e][1] = t, this;
	    }, Fn.prototype.clear = function () {
	      this.size = 0, this.__data__ = {
	        hash: new Mn(),
	        map: new (Ni || Tn)(),
	        string: new Mn()
	      };
	    }, Fn.prototype.delete = function (n) {
	      return n = be(this, n).delete(n), this.size -= n ? 1 : 0, n;
	    }, Fn.prototype.get = function (n) {
	      return be(this, n).get(n);
	    }, Fn.prototype.has = function (n) {
	      return be(this, n).has(n);
	    }, Fn.prototype.set = function (n, t) {
	      var r = be(this, n),
	          e = r.size;
	      return r.set(n, t), this.size += r.size == e ? 0 : 1, this;
	    }, Nn.prototype.add = Nn.prototype.push = function (n) {
	      return this.__data__.set(n, "__lodash_hash_undefined__"), this;
	    }, Nn.prototype.has = function (n) {
	      return this.__data__.has(n);
	    }, Zn.prototype.clear = function () {
	      this.__data__ = new Tn(), this.size = 0;
	    }, Zn.prototype.delete = function (n) {
	      var t = this.__data__;
	      return n = t.delete(n), this.size = t.size, n;
	    }, Zn.prototype.get = function (n) {
	      return this.__data__.get(n);
	    }, Zn.prototype.has = function (n) {
	      return this.__data__.has(n);
	    }, Zn.prototype.set = function (n, t) {
	      var r = this.__data__;

	      if (r instanceof Tn) {
	        var e = r.__data__;
	        if (!Ni || 199 > e.length) return e.push([n, t]), this.size = ++r.size, this;
	        r = this.__data__ = new Fn(e);
	      }

	      return r.set(n, t), this.size = r.size, this;
	    };

	    var uo = Fr(mt),
	        io = Fr(At, true),
	        oo = Nr(),
	        fo = Nr(true),
	        co = Ki ? function (n, t) {
	      return Ki.set(n, t), n;
	    } : $u,
	        ao = Ai ? function (n, t) {
	      return Ai(n, "toString", {
	        configurable: true,
	        enumerable: false,
	        value: Tu(t),
	        writable: true
	      });
	    } : $u,
	        lo = ki || function (n) {
	      return $n.clearTimeout(n);
	    },
	        so = Zi && 1 / L(new Zi([, -0]))[1] == $ ? function (n) {
	      return new Zi(n);
	    } : Pu,
	        ho = Ki ? function (n) {
	      return Ki.get(n);
	    } : Pu,
	        po = Ri ? function (n) {
	      return null == n ? [] : (n = Qu(n), i(Ri(n), function (t) {
	        return bi.call(n, t);
	      }));
	    } : qu,
	        _o = Ri ? function (n) {
	      for (var t = []; n;) {
	        a(t, po(n)), n = di(n);
	      }

	      return t;
	    } : qu,
	        vo = Ot;

	    (Fi && "[object DataView]" != vo(new Fi(new ArrayBuffer(1))) || Ni && "[object Map]" != vo(new Ni()) || Pi && "[object Promise]" != vo(Pi.resolve()) || Zi && "[object Set]" != vo(new Zi()) || qi && "[object WeakMap]" != vo(new qi())) && (vo = function vo(n) {
	      var t = Ot(n);
	      if (n = (n = "[object Object]" == t ? n.constructor : T) ? Te(n) : "") switch (n) {
	        case Hi:
	          return "[object DataView]";

	        case Ji:
	          return "[object Map]";

	        case Yi:
	          return "[object Promise]";

	        case Qi:
	          return "[object Set]";

	        case Xi:
	          return "[object WeakMap]";
	      }
	      return t;
	    });

	    var go = ui ? _u : Vu,
	        yo = Ce(co),
	        bo = Si || function (n, t) {
	      return $n.setTimeout(n, t);
	    },
	        xo = Ce(ao),
	        jo = function (n) {
	      n = cu(n, function (n) {
	        return 500 === t.size && t.clear(), n;
	      });
	      var t = n.cache;
	      return n;
	    }(function (n) {
	      var t = [];
	      return 46 === n.charCodeAt(0) && t.push(""), n.replace(tn, function (n, r, e, u) {
	        t.push(e ? u.replace(hn, "$1") : r || n);
	      }), t;
	    }),
	        wo = fr(function (n, t) {
	      return hu(n) ? yt(n, wt(t, 1, hu, true)) : [];
	    }),
	        mo = fr(function (n, t) {
	      var r = Ve(t);
	      return hu(r) && (r = T), hu(n) ? yt(n, wt(t, 1, hu, true), ye(r, 2)) : [];
	    }),
	        Ao = fr(function (n, t) {
	      var r = Ve(t);
	      return hu(r) && (r = T), hu(n) ? yt(n, wt(t, 1, hu, true), T, r) : [];
	    }),
	        ko = fr(function (n) {
	      var t = c(n, kr);
	      return t.length && t[0] === n[0] ? Wt(t) : [];
	    }),
	        Eo = fr(function (n) {
	      var t = Ve(n),
	          r = c(n, kr);
	      return t === Ve(r) ? t = T : r.pop(), r.length && r[0] === n[0] ? Wt(r, ye(t, 2)) : [];
	    }),
	        So = fr(function (n) {
	      var t = Ve(n),
	          r = c(n, kr);
	      return (t = typeof t == "function" ? t : T) && r.pop(), r.length && r[0] === n[0] ? Wt(r, T, t) : [];
	    }),
	        Oo = fr(Ke),
	        Io = pe(function (n, t) {
	      var r = null == n ? 0 : n.length,
	          e = ht(n, t);
	      return ur(n, c(t, function (n) {
	        return Se(n, r) ? +n : n;
	      }).sort(Wr)), e;
	    }),
	        Ro = fr(function (n) {
	      return br(wt(n, 1, hu, true));
	    }),
	        zo = fr(function (n) {
	      var t = Ve(n);
	      return hu(t) && (t = T), br(wt(n, 1, hu, true), ye(t, 2));
	    }),
	        Wo = fr(function (n) {
	      var t = Ve(n),
	          t = typeof t == "function" ? t : T;
	      return br(wt(n, 1, hu, true), T, t);
	    }),
	        Uo = fr(function (n, t) {
	      return hu(n) ? yt(n, t) : [];
	    }),
	        Bo = fr(function (n) {
	      return mr(i(n, hu));
	    }),
	        Lo = fr(function (n) {
	      var t = Ve(n);
	      return hu(t) && (t = T), mr(i(n, hu), ye(t, 2));
	    }),
	        Co = fr(function (n) {
	      var t = Ve(n),
	          t = typeof t == "function" ? t : T;
	      return mr(i(n, hu), T, t);
	    }),
	        Do = fr(He),
	        Mo = fr(function (n) {
	      var t = n.length,
	          t = 1 < t ? n[t - 1] : T,
	          t = typeof t == "function" ? (n.pop(), t) : T;
	      return Je(n, t);
	    }),
	        To = pe(function (n) {
	      var t = n.length,
	          r = t ? n[0] : 0,
	          e = this.__wrapped__,
	          u = function u(t) {
	        return ht(t, n);
	      };

	      return !(1 < t || this.__actions__.length) && e instanceof Ln && Se(r) ? (e = e.slice(r, +r + (t ? 1 : 0)), e.__actions__.push({
	        func: Qe,
	        args: [u],
	        thisArg: T
	      }), new On(e, this.__chain__).thru(function (n) {
	        return t && !n.length && n.push(T), n;
	      })) : this.thru(u);
	    }),
	        $o = Tr(function (n, t, r) {
	      oi.call(n, r) ? ++n[r] : st(n, r, 1);
	    }),
	        Fo = Gr(Ne),
	        No = Gr(Pe),
	        Po = Tr(function (n, t, r) {
	      oi.call(n, r) ? n[r].push(t) : st(n, r, [t]);
	    }),
	        Zo = fr(function (t, r, e) {
	      var u = -1,
	          i = typeof r == "function",
	          o = su(t) ? Ku(t.length) : [];
	      return uo(t, function (t) {
	        o[++u] = i ? n(r, t, e) : Bt(t, r, e);
	      }), o;
	    }),
	        qo = Tr(function (n, t, r) {
	      st(n, r, t);
	    }),
	        Vo = Tr(function (n, t, r) {
	      n[r ? 0 : 1].push(t);
	    }, function () {
	      return [[], []];
	    }),
	        Ko = fr(function (n, t) {
	      if (null == n) return [];
	      var r = t.length;
	      return 1 < r && Oe(n, t[0], t[1]) ? t = [] : 2 < r && Oe(t[0], t[1], t[2]) && (t = [t[0]]), Xt(n, wt(t, 1), []);
	    }),
	        Go = Ei || function () {
	      return $n.Date.now();
	    },
	        Ho = fr(function (n, t, r) {
	      var e = 1;
	      if (r.length) var u = B(r, de(Ho)),
	          e = 32 | e;
	      return fe(n, e, t, r, u);
	    }),
	        Jo = fr(function (n, t, r) {
	      var e = 3;
	      if (r.length) var u = B(r, de(Jo)),
	          e = 32 | e;
	      return fe(t, e, n, r, u);
	    }),
	        Yo = fr(function (n, t) {
	      return dt(n, 1, t);
	    }),
	        Qo = fr(function (n, t, r) {
	      return dt(n, Su(t) || 0, r);
	    });

	    cu.Cache = Fn;

	    var Xo = fr(function (t, r) {
	      r = 1 == r.length && ff(r[0]) ? c(r[0], E(ye())) : c(wt(r, 1), E(ye()));
	      var e = r.length;
	      return fr(function (u) {
	        for (var i = -1, o = Ci(u.length, e); ++i < o;) {
	          u[i] = r[i].call(this, u[i]);
	        }

	        return n(t, this, u);
	      });
	    }),
	        nf = fr(function (n, t) {
	      return fe(n, 32, T, t, B(t, de(nf)));
	    }),
	        tf = fr(function (n, t) {
	      return fe(n, 64, T, t, B(t, de(tf)));
	    }),
	        rf = pe(function (n, t) {
	      return fe(n, 256, T, T, T, t);
	    }),
	        ef = ee(It),
	        uf = ee(function (n, t) {
	      return n >= t;
	    }),
	        of = Lt(function () {
	      return arguments;
	    }()) ? Lt : function (n) {
	      return yu(n) && oi.call(n, "callee") && !bi.call(n, "callee");
	    },
	        ff = Ku.isArray,
	        cf = Vn ? E(Vn) : Ct,
	        af = zi || Vu,
	        lf = Kn ? E(Kn) : Dt,
	        sf = Gn ? E(Gn) : Tt,
	        hf = Hn ? E(Hn) : Nt,
	        pf = Jn ? E(Jn) : Pt,
	        _f = Yn ? E(Yn) : Zt,
	        vf = ee(Kt),
	        gf = ee(function (n, t) {
	      return n <= t;
	    }),
	        df = $r(function (n, t) {
	      if (ze(t) || su(t)) Cr(t, Wu(t), n);else for (var r in t) {
	        oi.call(t, r) && ot(n, r, t[r]);
	      }
	    }),
	        yf = $r(function (n, t) {
	      Cr(t, Uu(t), n);
	    }),
	        bf = $r(function (n, t, r, e) {
	      Cr(t, Uu(t), n, e);
	    }),
	        xf = $r(function (n, t, r, e) {
	      Cr(t, Wu(t), n, e);
	    }),
	        jf = pe(ht),
	        wf = fr(function (n, t) {
	      n = Qu(n);
	      var r = -1,
	          e = t.length,
	          u = 2 < e ? t[2] : T;

	      for (u && Oe(t[0], t[1], u) && (e = 1); ++r < e;) {
	        for (var u = t[r], i = Uu(u), o = -1, f = i.length; ++o < f;) {
	          var c = i[o],
	              a = n[c];
	          (a === T || lu(a, ei[c]) && !oi.call(n, c)) && (n[c] = u[c]);
	        }
	      }

	      return n;
	    }),
	        mf = fr(function (t) {
	      return t.push(T, ae), n(Of, T, t);
	    }),
	        Af = Yr(function (n, t, r) {
	      null != t && typeof t.toString != "function" && (t = ai.call(t)), n[t] = r;
	    }, Tu($u)),
	        kf = Yr(function (n, t, r) {
	      null != t && typeof t.toString != "function" && (t = ai.call(t)), oi.call(n, t) ? n[t].push(r) : n[t] = [r];
	    }, ye),
	        Ef = fr(Bt),
	        Sf = $r(function (n, t, r) {
	      Yt(n, t, r);
	    }),
	        Of = $r(function (n, t, r, e) {
	      Yt(n, t, r, e);
	    }),
	        If = pe(function (n, t) {
	      var r = {};
	      if (null == n) return r;
	      var e = false;
	      t = c(t, function (t) {
	        return t = Sr(t, n), e || (e = 1 < t.length), t;
	      }), Cr(n, ve(n), r), e && (r = _t(r, 7, le));

	      for (var u = t.length; u--;) {
	        xr(r, t[u]);
	      }

	      return r;
	    }),
	        Rf = pe(function (n, t) {
	      return null == n ? {} : nr(n, t);
	    }),
	        zf = oe(Wu),
	        Wf = oe(Uu),
	        Uf = qr(function (n, t, r) {
	      return t = t.toLowerCase(), n + (r ? Cu(t) : t);
	    }),
	        Bf = qr(function (n, t, r) {
	      return n + (r ? "-" : "") + t.toLowerCase();
	    }),
	        Lf = qr(function (n, t, r) {
	      return n + (r ? " " : "") + t.toLowerCase();
	    }),
	        Cf = Zr("toLowerCase"),
	        Df = qr(function (n, t, r) {
	      return n + (r ? "_" : "") + t.toLowerCase();
	    }),
	        Mf = qr(function (n, t, r) {
	      return n + (r ? " " : "") + $f(t);
	    }),
	        Tf = qr(function (n, t, r) {
	      return n + (r ? " " : "") + t.toUpperCase();
	    }),
	        $f = Zr("toUpperCase"),
	        Ff = fr(function (t, r) {
	      try {
	        return n(t, T, r);
	      } catch (n) {
	        return pu(n) ? n : new Hu(n);
	      }
	    }),
	        Nf = pe(function (n, t) {
	      return r(t, function (t) {
	        t = Me(t), st(n, t, Ho(n[t], n));
	      }), n;
	    }),
	        Pf = Hr(),
	        Zf = Hr(true),
	        qf = fr(function (n, t) {
	      return function (r) {
	        return Bt(r, n, t);
	      };
	    }),
	        Vf = fr(function (n, t) {
	      return function (r) {
	        return Bt(n, r, t);
	      };
	    }),
	        Kf = Xr(c),
	        Gf = Xr(u),
	        Hf = Xr(h),
	        Jf = re(),
	        Yf = re(true),
	        Qf = Qr(function (n, t) {
	      return n + t;
	    }, 0),
	        Xf = ie("ceil"),
	        nc = Qr(function (n, t) {
	      return n / t;
	    }, 1),
	        tc = ie("floor"),
	        rc = Qr(function (n, t) {
	      return n * t;
	    }, 1),
	        ec = ie("round"),
	        uc = Qr(function (n, t) {
	      return n - t;
	    }, 0);

	    return An.after = function (n, t) {
	      if (typeof t != "function") throw new ti("Expected a function");
	      return n = ku(n), function () {
	        if (1 > --n) return t.apply(this, arguments);
	      };
	    }, An.ary = eu, An.assign = df, An.assignIn = yf, An.assignInWith = bf, An.assignWith = xf, An.at = jf, An.before = uu, An.bind = Ho, An.bindAll = Nf, An.bindKey = Jo, An.castArray = function () {
	      if (!arguments.length) return [];
	      var n = arguments[0];
	      return ff(n) ? n : [n];
	    }, An.chain = Ye, An.chunk = function (n, t, r) {
	      if (t = (r ? Oe(n, t, r) : t === T) ? 1 : Li(ku(t), 0), r = null == n ? 0 : n.length, !r || 1 > t) return [];

	      for (var e = 0, u = 0, i = Ku(Oi(r / t)); e < r;) {
	        i[u++] = hr(n, e, e += t);
	      }

	      return i;
	    }, An.compact = function (n) {
	      for (var t = -1, r = null == n ? 0 : n.length, e = 0, u = []; ++t < r;) {
	        var i = n[t];
	        i && (u[e++] = i);
	      }

	      return u;
	    }, An.concat = function () {
	      var n = arguments.length;
	      if (!n) return [];

	      for (var t = Ku(n - 1), r = arguments[0]; n--;) {
	        t[n - 1] = arguments[n];
	      }

	      return a(ff(r) ? Lr(r) : [r], wt(t, 1));
	    }, An.cond = function (t) {
	      var r = null == t ? 0 : t.length,
	          e = ye();
	      return t = r ? c(t, function (n) {
	        if ("function" != typeof n[1]) throw new ti("Expected a function");
	        return [e(n[0]), n[1]];
	      }) : [], fr(function (e) {
	        for (var u = -1; ++u < r;) {
	          var i = t[u];
	          if (n(i[0], this, e)) return n(i[1], this, e);
	        }
	      });
	    }, An.conforms = function (n) {
	      return vt(_t(n, 1));
	    }, An.constant = Tu, An.countBy = $o, An.create = function (n, t) {
	      var r = eo(n);
	      return null == t ? r : at(r, t);
	    }, An.curry = iu, An.curryRight = ou, An.debounce = fu, An.defaults = wf, An.defaultsDeep = mf, An.defer = Yo, An.delay = Qo, An.difference = wo, An.differenceBy = mo, An.differenceWith = Ao, An.drop = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (t = r || t === T ? 1 : ku(t), hr(n, 0 > t ? 0 : t, e)) : [];
	    }, An.dropRight = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (t = r || t === T ? 1 : ku(t), t = e - t, hr(n, 0, 0 > t ? 0 : t)) : [];
	    }, An.dropRightWhile = function (n, t) {
	      return n && n.length ? jr(n, ye(t, 3), true, true) : [];
	    }, An.dropWhile = function (n, t) {
	      return n && n.length ? jr(n, ye(t, 3), true) : [];
	    }, An.fill = function (n, t, r, e) {
	      var u = null == n ? 0 : n.length;
	      if (!u) return [];

	      for (r && typeof r != "number" && Oe(n, t, r) && (r = 0, e = u), u = n.length, r = ku(r), 0 > r && (r = -r > u ? 0 : u + r), e = e === T || e > u ? u : ku(e), 0 > e && (e += u), e = r > e ? 0 : Eu(e); r < e;) {
	        n[r++] = t;
	      }

	      return n;
	    }, An.filter = function (n, t) {
	      return (ff(n) ? i : jt)(n, ye(t, 3));
	    }, An.flatMap = function (n, t) {
	      return wt(ru(n, t), 1);
	    }, An.flatMapDeep = function (n, t) {
	      return wt(ru(n, t), $);
	    }, An.flatMapDepth = function (n, t, r) {
	      return r = r === T ? 1 : ku(r), wt(ru(n, t), r);
	    }, An.flatten = Ze, An.flattenDeep = function (n) {
	      return (null == n ? 0 : n.length) ? wt(n, $) : [];
	    }, An.flattenDepth = function (n, t) {
	      return null != n && n.length ? (t = t === T ? 1 : ku(t), wt(n, t)) : [];
	    }, An.flip = function (n) {
	      return fe(n, 512);
	    }, An.flow = Pf, An.flowRight = Zf, An.fromPairs = function (n) {
	      for (var t = -1, r = null == n ? 0 : n.length, e = {}; ++t < r;) {
	        var u = n[t];
	        e[u[0]] = u[1];
	      }

	      return e;
	    }, An.functions = function (n) {
	      return null == n ? [] : kt(n, Wu(n));
	    }, An.functionsIn = function (n) {
	      return null == n ? [] : kt(n, Uu(n));
	    }, An.groupBy = Po, An.initial = function (n) {
	      return (null == n ? 0 : n.length) ? hr(n, 0, -1) : [];
	    }, An.intersection = ko, An.intersectionBy = Eo, An.intersectionWith = So, An.invert = Af, An.invertBy = kf, An.invokeMap = Zo, An.iteratee = Fu, An.keyBy = qo, An.keys = Wu, An.keysIn = Uu, An.map = ru, An.mapKeys = function (n, t) {
	      var r = {};
	      return t = ye(t, 3), mt(n, function (n, e, u) {
	        st(r, t(n, e, u), n);
	      }), r;
	    }, An.mapValues = function (n, t) {
	      var r = {};
	      return t = ye(t, 3), mt(n, function (n, e, u) {
	        st(r, e, t(n, e, u));
	      }), r;
	    }, An.matches = function (n) {
	      return Ht(_t(n, 1));
	    }, An.matchesProperty = function (n, t) {
	      return Jt(n, _t(t, 1));
	    }, An.memoize = cu, An.merge = Sf, An.mergeWith = Of, An.method = qf, An.methodOf = Vf, An.mixin = Nu, An.negate = au, An.nthArg = function (n) {
	      return n = ku(n), fr(function (t) {
	        return Qt(t, n);
	      });
	    }, An.omit = If, An.omitBy = function (n, t) {
	      return Bu(n, au(ye(t)));
	    }, An.once = function (n) {
	      return uu(2, n);
	    }, An.orderBy = function (n, t, r, e) {
	      return null == n ? [] : (ff(t) || (t = null == t ? [] : [t]), r = e ? T : r, ff(r) || (r = null == r ? [] : [r]), Xt(n, t, r));
	    }, An.over = Kf, An.overArgs = Xo, An.overEvery = Gf, An.overSome = Hf, An.partial = nf, An.partialRight = tf, An.partition = Vo, An.pick = Rf, An.pickBy = Bu, An.property = Zu, An.propertyOf = function (n) {
	      return function (t) {
	        return null == n ? T : Et(n, t);
	      };
	    }, An.pull = Oo, An.pullAll = Ke, An.pullAllBy = function (n, t, r) {
	      return n && n.length && t && t.length ? er(n, t, ye(r, 2)) : n;
	    }, An.pullAllWith = function (n, t, r) {
	      return n && n.length && t && t.length ? er(n, t, T, r) : n;
	    }, An.pullAt = Io, An.range = Jf, An.rangeRight = Yf, An.rearg = rf, An.reject = function (n, t) {
	      return (ff(n) ? i : jt)(n, au(ye(t, 3)));
	    }, An.remove = function (n, t) {
	      var r = [];
	      if (!n || !n.length) return r;
	      var e = -1,
	          u = [],
	          i = n.length;

	      for (t = ye(t, 3); ++e < i;) {
	        var o = n[e];
	        t(o, e, n) && (r.push(o), u.push(e));
	      }

	      return ur(n, u), r;
	    }, An.rest = function (n, t) {
	      if (typeof n != "function") throw new ti("Expected a function");
	      return t = t === T ? t : ku(t), fr(n, t);
	    }, An.reverse = Ge, An.sampleSize = function (n, t, r) {
	      return t = (r ? Oe(n, t, r) : t === T) ? 1 : ku(t), (ff(n) ? et : ar)(n, t);
	    }, An.set = function (n, t, r) {
	      return null == n ? n : lr(n, t, r);
	    }, An.setWith = function (n, t, r, e) {
	      return e = typeof e == "function" ? e : T, null == n ? n : lr(n, t, r, e);
	    }, An.shuffle = function (n) {
	      return (ff(n) ? ut : sr)(n);
	    }, An.slice = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (r && typeof r != "number" && Oe(n, t, r) ? (t = 0, r = e) : (t = null == t ? 0 : ku(t), r = r === T ? e : ku(r)), hr(n, t, r)) : [];
	    }, An.sortBy = Ko, An.sortedUniq = function (n) {
	      return n && n.length ? gr(n) : [];
	    }, An.sortedUniqBy = function (n, t) {
	      return n && n.length ? gr(n, ye(t, 2)) : [];
	    }, An.split = function (n, t, r) {
	      return r && typeof r != "number" && Oe(n, t, r) && (t = r = T), r = r === T ? 4294967295 : r >>> 0, r ? (n = Iu(n)) && (typeof t == "string" || null != t && !hf(t)) && (t = yr(t), !t && Rn.test(n)) ? Or(M(n), 0, r) : n.split(t, r) : [];
	    }, An.spread = function (t, r) {
	      if (typeof t != "function") throw new ti("Expected a function");
	      return r = null == r ? 0 : Li(ku(r), 0), fr(function (e) {
	        var u = e[r];
	        return e = Or(e, 0, r), u && a(e, u), n(t, this, e);
	      });
	    }, An.tail = function (n) {
	      var t = null == n ? 0 : n.length;
	      return t ? hr(n, 1, t) : [];
	    }, An.take = function (n, t, r) {
	      return n && n.length ? (t = r || t === T ? 1 : ku(t), hr(n, 0, 0 > t ? 0 : t)) : [];
	    }, An.takeRight = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (t = r || t === T ? 1 : ku(t), t = e - t, hr(n, 0 > t ? 0 : t, e)) : [];
	    }, An.takeRightWhile = function (n, t) {
	      return n && n.length ? jr(n, ye(t, 3), false, true) : [];
	    }, An.takeWhile = function (n, t) {
	      return n && n.length ? jr(n, ye(t, 3)) : [];
	    }, An.tap = function (n, t) {
	      return t(n), n;
	    }, An.throttle = function (n, t, r) {
	      var e = true,
	          u = true;
	      if (typeof n != "function") throw new ti("Expected a function");
	      return du(r) && (e = "leading" in r ? !!r.leading : e, u = "trailing" in r ? !!r.trailing : u), fu(n, t, {
	        leading: e,
	        maxWait: t,
	        trailing: u
	      });
	    }, An.thru = Qe, An.toArray = mu, An.toPairs = zf, An.toPairsIn = Wf, An.toPath = function (n) {
	      return ff(n) ? c(n, Me) : wu(n) ? [n] : Lr(jo(Iu(n)));
	    }, An.toPlainObject = Ou, An.transform = function (n, t, e) {
	      var u = ff(n),
	          i = u || af(n) || _f(n);

	      if (t = ye(t, 4), null == e) {
	        var o = n && n.constructor;
	        e = i ? u ? new o() : [] : du(n) && _u(o) ? eo(di(n)) : {};
	      }

	      return (i ? r : mt)(n, function (n, r, u) {
	        return t(e, n, r, u);
	      }), e;
	    }, An.unary = function (n) {
	      return eu(n, 1);
	    }, An.union = Ro, An.unionBy = zo, An.unionWith = Wo, An.uniq = function (n) {
	      return n && n.length ? br(n) : [];
	    }, An.uniqBy = function (n, t) {
	      return n && n.length ? br(n, ye(t, 2)) : [];
	    }, An.uniqWith = function (n, t) {
	      return t = typeof t == "function" ? t : T, n && n.length ? br(n, T, t) : [];
	    }, An.unset = function (n, t) {
	      return null == n || xr(n, t);
	    }, An.unzip = He, An.unzipWith = Je, An.update = function (n, t, r) {
	      return null != n && (r = Er(r), n = lr(n, t, r(Et(n, t)), void 0)), n;
	    }, An.updateWith = function (n, t, r, e) {
	      return e = typeof e == "function" ? e : T, null != n && (r = Er(r), n = lr(n, t, r(Et(n, t)), e)), n;
	    }, An.values = Lu, An.valuesIn = function (n) {
	      return null == n ? [] : S(n, Uu(n));
	    }, An.without = Uo, An.words = Mu, An.wrap = function (n, t) {
	      return nf(Er(t), n);
	    }, An.xor = Bo, An.xorBy = Lo, An.xorWith = Co, An.zip = Do, An.zipObject = function (n, t) {
	      return Ar(n || [], t || [], ot);
	    }, An.zipObjectDeep = function (n, t) {
	      return Ar(n || [], t || [], lr);
	    }, An.zipWith = Mo, An.entries = zf, An.entriesIn = Wf, An.extend = yf, An.extendWith = bf, Nu(An, An), An.add = Qf, An.attempt = Ff, An.camelCase = Uf, An.capitalize = Cu, An.ceil = Xf, An.clamp = function (n, t, r) {
	      return r === T && (r = t, t = T), r !== T && (r = Su(r), r = r === r ? r : 0), t !== T && (t = Su(t), t = t === t ? t : 0), pt(Su(n), t, r);
	    }, An.clone = function (n) {
	      return _t(n, 4);
	    }, An.cloneDeep = function (n) {
	      return _t(n, 5);
	    }, An.cloneDeepWith = function (n, t) {
	      return t = typeof t == "function" ? t : T, _t(n, 5, t);
	    }, An.cloneWith = function (n, t) {
	      return t = typeof t == "function" ? t : T, _t(n, 4, t);
	    }, An.conformsTo = function (n, t) {
	      return null == t || gt(n, t, Wu(t));
	    }, An.deburr = Du, An.defaultTo = function (n, t) {
	      return null == n || n !== n ? t : n;
	    }, An.divide = nc, An.endsWith = function (n, t, r) {
	      n = Iu(n), t = yr(t);
	      var e = n.length,
	          e = r = r === T ? e : pt(ku(r), 0, e);
	      return r -= t.length, 0 <= r && n.slice(r, e) == t;
	    }, An.eq = lu, An.escape = function (n) {
	      return (n = Iu(n)) && H.test(n) ? n.replace(K, nt) : n;
	    }, An.escapeRegExp = function (n) {
	      return (n = Iu(n)) && en.test(n) ? n.replace(rn, "\\$&") : n;
	    }, An.every = function (n, t, r) {
	      var e = ff(n) ? u : bt;
	      return r && Oe(n, t, r) && (t = T), e(n, ye(t, 3));
	    }, An.find = Fo, An.findIndex = Ne, An.findKey = function (n, t) {
	      return p(n, ye(t, 3), mt);
	    }, An.findLast = No, An.findLastIndex = Pe, An.findLastKey = function (n, t) {
	      return p(n, ye(t, 3), At);
	    }, An.floor = tc, An.forEach = nu, An.forEachRight = tu, An.forIn = function (n, t) {
	      return null == n ? n : oo(n, ye(t, 3), Uu);
	    }, An.forInRight = function (n, t) {
	      return null == n ? n : fo(n, ye(t, 3), Uu);
	    }, An.forOwn = function (n, t) {
	      return n && mt(n, ye(t, 3));
	    }, An.forOwnRight = function (n, t) {
	      return n && At(n, ye(t, 3));
	    }, An.get = Ru, An.gt = ef, An.gte = uf, An.has = function (n, t) {
	      return null != n && we(n, t, Rt);
	    }, An.hasIn = zu, An.head = qe, An.identity = $u, An.includes = function (n, t, r, e) {
	      return n = su(n) ? n : Lu(n), r = r && !e ? ku(r) : 0, e = n.length, 0 > r && (r = Li(e + r, 0)), ju(n) ? r <= e && -1 < n.indexOf(t, r) : !!e && -1 < v(n, t, r);
	    }, An.indexOf = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      return e ? (r = null == r ? 0 : ku(r), 0 > r && (r = Li(e + r, 0)), v(n, t, r)) : -1;
	    }, An.inRange = function (n, t, r) {
	      return t = Au(t), r === T ? (r = t, t = 0) : r = Au(r), n = Su(n), n >= Ci(t, r) && n < Li(t, r);
	    }, An.invoke = Ef, An.isArguments = of, An.isArray = ff, An.isArrayBuffer = cf, An.isArrayLike = su, An.isArrayLikeObject = hu, An.isBoolean = function (n) {
	      return true === n || false === n || yu(n) && "[object Boolean]" == Ot(n);
	    }, An.isBuffer = af, An.isDate = lf, An.isElement = function (n) {
	      return yu(n) && 1 === n.nodeType && !xu(n);
	    }, An.isEmpty = function (n) {
	      if (null == n) return true;
	      if (su(n) && (ff(n) || typeof n == "string" || typeof n.splice == "function" || af(n) || _f(n) || of(n))) return !n.length;
	      var t = vo(n);
	      if ("[object Map]" == t || "[object Set]" == t) return !n.size;
	      if (ze(n)) return !Vt(n).length;

	      for (var r in n) {
	        if (oi.call(n, r)) return false;
	      }

	      return true;
	    }, An.isEqual = function (n, t) {
	      return Mt(n, t);
	    }, An.isEqualWith = function (n, t, r) {
	      var e = (r = typeof r == "function" ? r : T) ? r(n, t) : T;
	      return e === T ? Mt(n, t, T, r) : !!e;
	    }, An.isError = pu, An.isFinite = function (n) {
	      return typeof n == "number" && Wi(n);
	    }, An.isFunction = _u, An.isInteger = vu, An.isLength = gu, An.isMap = sf, An.isMatch = function (n, t) {
	      return n === t || $t(n, t, xe(t));
	    }, An.isMatchWith = function (n, t, r) {
	      return r = typeof r == "function" ? r : T, $t(n, t, xe(t), r);
	    }, An.isNaN = function (n) {
	      return bu(n) && n != +n;
	    }, An.isNative = function (n) {
	      if (go(n)) throw new Hu("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");
	      return Ft(n);
	    }, An.isNil = function (n) {
	      return null == n;
	    }, An.isNull = function (n) {
	      return null === n;
	    }, An.isNumber = bu, An.isObject = du, An.isObjectLike = yu, An.isPlainObject = xu, An.isRegExp = hf, An.isSafeInteger = function (n) {
	      return vu(n) && -9007199254740991 <= n && 9007199254740991 >= n;
	    }, An.isSet = pf, An.isString = ju, An.isSymbol = wu, An.isTypedArray = _f, An.isUndefined = function (n) {
	      return n === T;
	    }, An.isWeakMap = function (n) {
	      return yu(n) && "[object WeakMap]" == vo(n);
	    }, An.isWeakSet = function (n) {
	      return yu(n) && "[object WeakSet]" == Ot(n);
	    }, An.join = function (n, t) {
	      return null == n ? "" : Ui.call(n, t);
	    }, An.kebabCase = Bf, An.last = Ve, An.lastIndexOf = function (n, t, r) {
	      var e = null == n ? 0 : n.length;
	      if (!e) return -1;
	      var u = e;
	      if (r !== T && (u = ku(r), u = 0 > u ? Li(e + u, 0) : Ci(u, e - 1)), t === t) n: {
	        for (r = u + 1; r--;) {
	          if (n[r] === t) {
	            n = r;
	            break n;
	          }
	        }

	        n = r;
	      } else n = _(n, d, u, true);
	      return n;
	    }, An.lowerCase = Lf, An.lowerFirst = Cf, An.lt = vf, An.lte = gf, An.max = function (n) {
	      return n && n.length ? xt(n, $u, It) : T;
	    }, An.maxBy = function (n, t) {
	      return n && n.length ? xt(n, ye(t, 2), It) : T;
	    }, An.mean = function (n) {
	      return y(n, $u);
	    }, An.meanBy = function (n, t) {
	      return y(n, ye(t, 2));
	    }, An.min = function (n) {
	      return n && n.length ? xt(n, $u, Kt) : T;
	    }, An.minBy = function (n, t) {
	      return n && n.length ? xt(n, ye(t, 2), Kt) : T;
	    }, An.stubArray = qu, An.stubFalse = Vu, An.stubObject = function () {
	      return {};
	    }, An.stubString = function () {
	      return "";
	    }, An.stubTrue = function () {
	      return true;
	    }, An.multiply = rc, An.nth = function (n, t) {
	      return n && n.length ? Qt(n, ku(t)) : T;
	    }, An.noConflict = function () {
	      return $n._ === this && ($n._ = si), this;
	    }, An.noop = Pu, An.now = Go, An.pad = function (n, t, r) {
	      n = Iu(n);
	      var e = (t = ku(t)) ? D(n) : 0;
	      return !t || e >= t ? n : (t = (t - e) / 2, ne(Ii(t), r) + n + ne(Oi(t), r));
	    }, An.padEnd = function (n, t, r) {
	      n = Iu(n);
	      var e = (t = ku(t)) ? D(n) : 0;
	      return t && e < t ? n + ne(t - e, r) : n;
	    }, An.padStart = function (n, t, r) {
	      n = Iu(n);
	      var e = (t = ku(t)) ? D(n) : 0;
	      return t && e < t ? ne(t - e, r) + n : n;
	    }, An.parseInt = function (n, t, r) {
	      return r || null == t ? t = 0 : t && (t = +t), Mi(Iu(n).replace(on, ""), t || 0);
	    }, An.random = function (n, t, r) {
	      if (r && typeof r != "boolean" && Oe(n, t, r) && (t = r = T), r === T && (typeof t == "boolean" ? (r = t, t = T) : typeof n == "boolean" && (r = n, n = T)), n === T && t === T ? (n = 0, t = 1) : (n = Au(n), t === T ? (t = n, n = 0) : t = Au(t)), n > t) {
	        var e = n;
	        n = t, t = e;
	      }

	      return r || n % 1 || t % 1 ? (r = Ti(), Ci(n + r * (t - n + Cn("1e-" + ((r + "").length - 1))), t)) : ir(n, t);
	    }, An.reduce = function (n, t, r) {
	      var e = ff(n) ? l : j,
	          u = 3 > arguments.length;
	      return e(n, ye(t, 4), r, u, uo);
	    }, An.reduceRight = function (n, t, r) {
	      var e = ff(n) ? s : j,
	          u = 3 > arguments.length;
	      return e(n, ye(t, 4), r, u, io);
	    }, An.repeat = function (n, t, r) {
	      return t = (r ? Oe(n, t, r) : t === T) ? 1 : ku(t), or(Iu(n), t);
	    }, An.replace = function () {
	      var n = arguments,
	          t = Iu(n[0]);
	      return 3 > n.length ? t : t.replace(n[1], n[2]);
	    }, An.result = function (n, t, r) {
	      t = Sr(t, n);
	      var e = -1,
	          u = t.length;

	      for (u || (u = 1, n = T); ++e < u;) {
	        var i = null == n ? T : n[Me(t[e])];
	        i === T && (e = u, i = r), n = _u(i) ? i.call(n) : i;
	      }

	      return n;
	    }, An.round = ec, An.runInContext = x, An.sample = function (n) {
	      return (ff(n) ? Qn : cr)(n);
	    }, An.size = function (n) {
	      if (null == n) return 0;
	      if (su(n)) return ju(n) ? D(n) : n.length;
	      var t = vo(n);
	      return "[object Map]" == t || "[object Set]" == t ? n.size : Vt(n).length;
	    }, An.snakeCase = Df, An.some = function (n, t, r) {
	      var e = ff(n) ? h : pr;
	      return r && Oe(n, t, r) && (t = T), e(n, ye(t, 3));
	    }, An.sortedIndex = function (n, t) {
	      return _r(n, t);
	    }, An.sortedIndexBy = function (n, t, r) {
	      return vr(n, t, ye(r, 2));
	    }, An.sortedIndexOf = function (n, t) {
	      var r = null == n ? 0 : n.length;

	      if (r) {
	        var e = _r(n, t);

	        if (e < r && lu(n[e], t)) return e;
	      }

	      return -1;
	    }, An.sortedLastIndex = function (n, t) {
	      return _r(n, t, true);
	    }, An.sortedLastIndexBy = function (n, t, r) {
	      return vr(n, t, ye(r, 2), true);
	    }, An.sortedLastIndexOf = function (n, t) {
	      if (null == n ? 0 : n.length) {
	        var r = _r(n, t, true) - 1;
	        if (lu(n[r], t)) return r;
	      }

	      return -1;
	    }, An.startCase = Mf, An.startsWith = function (n, t, r) {
	      return n = Iu(n), r = null == r ? 0 : pt(ku(r), 0, n.length), t = yr(t), n.slice(r, r + t.length) == t;
	    }, An.subtract = uc, An.sum = function (n) {
	      return n && n.length ? m(n, $u) : 0;
	    }, An.sumBy = function (n, t) {
	      return n && n.length ? m(n, ye(t, 2)) : 0;
	    }, An.template = function (n, t, r) {
	      var e = An.templateSettings;
	      r && Oe(n, t, r) && (t = T), n = Iu(n), t = bf({}, t, e, ce), r = bf({}, t.imports, e.imports, ce);
	      var u,
	          i,
	          o = Wu(r),
	          f = S(r, o),
	          c = 0;
	      r = t.interpolate || jn;
	      var a = "__p+='";
	      r = Xu((t.escape || jn).source + "|" + r.source + "|" + (r === Q ? pn : jn).source + "|" + (t.evaluate || jn).source + "|$", "g");
	      var l = "sourceURL" in t ? "//# sourceURL=" + t.sourceURL + "\n" : "";
	      if (n.replace(r, function (t, r, e, o, f, l) {
	        return e || (e = o), a += n.slice(c, l).replace(wn, z), r && (u = true, a += "'+__e(" + r + ")+'"), f && (i = true, a += "';" + f + ";\n__p+='"), e && (a += "'+((__t=(" + e + "))==null?'':__t)+'"), c = l + t.length, t;
	      }), a += "';", (t = t.variable) || (a = "with(obj){" + a + "}"), a = (i ? a.replace(P, "") : a).replace(Z, "$1").replace(q, "$1;"), a = "function(" + (t || "obj") + "){" + (t ? "" : "obj||(obj={});") + "var __t,__p=''" + (u ? ",__e=_.escape" : "") + (i ? ",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}" : ";") + a + "return __p}", t = Ff(function () {
	        return Ju(o, l + "return " + a).apply(T, f);
	      }), t.source = a, pu(t)) throw t;
	      return t;
	    }, An.times = function (n, t) {
	      if (n = ku(n), 1 > n || 9007199254740991 < n) return [];
	      var r = 4294967295,
	          e = Ci(n, 4294967295);

	      for (t = ye(t), n -= 4294967295, e = A(e, t); ++r < n;) {
	        t(r);
	      }

	      return e;
	    }, An.toFinite = Au, An.toInteger = ku, An.toLength = Eu, An.toLower = function (n) {
	      return Iu(n).toLowerCase();
	    }, An.toNumber = Su, An.toSafeInteger = function (n) {
	      return n ? pt(ku(n), -9007199254740991, 9007199254740991) : 0 === n ? n : 0;
	    }, An.toString = Iu, An.toUpper = function (n) {
	      return Iu(n).toUpperCase();
	    }, An.trim = function (n, t, r) {
	      return (n = Iu(n)) && (r || t === T) ? n.replace(un, "") : n && (t = yr(t)) ? (n = M(n), r = M(t), t = I(n, r), r = R(n, r) + 1, Or(n, t, r).join("")) : n;
	    }, An.trimEnd = function (n, t, r) {
	      return (n = Iu(n)) && (r || t === T) ? n.replace(fn, "") : n && (t = yr(t)) ? (n = M(n), t = R(n, M(t)) + 1, Or(n, 0, t).join("")) : n;
	    }, An.trimStart = function (n, t, r) {
	      return (n = Iu(n)) && (r || t === T) ? n.replace(on, "") : n && (t = yr(t)) ? (n = M(n), t = I(n, M(t)), Or(n, t).join("")) : n;
	    }, An.truncate = function (n, t) {
	      var r = 30,
	          e = "...";
	      if (du(t)) var u = "separator" in t ? t.separator : u,
	          r = "length" in t ? ku(t.length) : r,
	          e = "omission" in t ? yr(t.omission) : e;
	      n = Iu(n);
	      var i = n.length;
	      if (Rn.test(n)) var o = M(n),
	          i = o.length;
	      if (r >= i) return n;
	      if (i = r - D(e), 1 > i) return e;
	      if (r = o ? Or(o, 0, i).join("") : n.slice(0, i), u === T) return r + e;

	      if (o && (i += r.length - i), hf(u)) {
	        if (n.slice(i).search(u)) {
	          var f = r;

	          for (u.global || (u = Xu(u.source, Iu(_n.exec(u)) + "g")), u.lastIndex = 0; o = u.exec(f);) {
	            var c = o.index;
	          }

	          r = r.slice(0, c === T ? i : c);
	        }
	      } else n.indexOf(yr(u), i) != i && (u = r.lastIndexOf(u), -1 < u && (r = r.slice(0, u)));

	      return r + e;
	    }, An.unescape = function (n) {
	      return (n = Iu(n)) && G.test(n) ? n.replace(V, tt) : n;
	    }, An.uniqueId = function (n) {
	      var t = ++fi;
	      return Iu(n) + t;
	    }, An.upperCase = Tf, An.upperFirst = $f, An.each = nu, An.eachRight = tu, An.first = qe, Nu(An, function () {
	      var n = {};
	      return mt(An, function (t, r) {
	        oi.call(An.prototype, r) || (n[r] = t);
	      }), n;
	    }(), {
	      chain: false
	    }), An.VERSION = "4.17.11", r("bind bindKey curry curryRight partial partialRight".split(" "), function (n) {
	      An[n].placeholder = An;
	    }), r(["drop", "take"], function (n, t) {
	      Ln.prototype[n] = function (r) {
	        r = r === T ? 1 : Li(ku(r), 0);
	        var e = this.__filtered__ && !t ? new Ln(this) : this.clone();
	        return e.__filtered__ ? e.__takeCount__ = Ci(r, e.__takeCount__) : e.__views__.push({
	          size: Ci(r, 4294967295),
	          type: n + (0 > e.__dir__ ? "Right" : "")
	        }), e;
	      }, Ln.prototype[n + "Right"] = function (t) {
	        return this.reverse()[n](t).reverse();
	      };
	    }), r(["filter", "map", "takeWhile"], function (n, t) {
	      var r = t + 1,
	          e = 1 == r || 3 == r;

	      Ln.prototype[n] = function (n) {
	        var t = this.clone();
	        return t.__iteratees__.push({
	          iteratee: ye(n, 3),
	          type: r
	        }), t.__filtered__ = t.__filtered__ || e, t;
	      };
	    }), r(["head", "last"], function (n, t) {
	      var r = "take" + (t ? "Right" : "");

	      Ln.prototype[n] = function () {
	        return this[r](1).value()[0];
	      };
	    }), r(["initial", "tail"], function (n, t) {
	      var r = "drop" + (t ? "" : "Right");

	      Ln.prototype[n] = function () {
	        return this.__filtered__ ? new Ln(this) : this[r](1);
	      };
	    }), Ln.prototype.compact = function () {
	      return this.filter($u);
	    }, Ln.prototype.find = function (n) {
	      return this.filter(n).head();
	    }, Ln.prototype.findLast = function (n) {
	      return this.reverse().find(n);
	    }, Ln.prototype.invokeMap = fr(function (n, t) {
	      return typeof n == "function" ? new Ln(this) : this.map(function (r) {
	        return Bt(r, n, t);
	      });
	    }), Ln.prototype.reject = function (n) {
	      return this.filter(au(ye(n)));
	    }, Ln.prototype.slice = function (n, t) {
	      n = ku(n);
	      var r = this;
	      return r.__filtered__ && (0 < n || 0 > t) ? new Ln(r) : (0 > n ? r = r.takeRight(-n) : n && (r = r.drop(n)), t !== T && (t = ku(t), r = 0 > t ? r.dropRight(-t) : r.take(t - n)), r);
	    }, Ln.prototype.takeRightWhile = function (n) {
	      return this.reverse().takeWhile(n).reverse();
	    }, Ln.prototype.toArray = function () {
	      return this.take(4294967295);
	    }, mt(Ln.prototype, function (n, t) {
	      var r = /^(?:filter|find|map|reject)|While$/.test(t),
	          e = /^(?:head|last)$/.test(t),
	          u = An[e ? "take" + ("last" == t ? "Right" : "") : t],
	          i = e || /^find/.test(t);
	      u && (An.prototype[t] = function () {
	        var t = this.__wrapped__,
	            o = e ? [1] : arguments,
	            f = t instanceof Ln,
	            c = o[0],
	            l = f || ff(t),
	            s = function s(n) {
	          return n = u.apply(An, a([n], o)), e && h ? n[0] : n;
	        };

	        l && r && typeof c == "function" && 1 != c.length && (f = l = false);
	        var h = this.__chain__,
	            p = !!this.__actions__.length,
	            c = i && !h,
	            f = f && !p;
	        return !i && l ? (t = f ? t : new Ln(this), t = n.apply(t, o), t.__actions__.push({
	          func: Qe,
	          args: [s],
	          thisArg: T
	        }), new On(t, h)) : c && f ? n.apply(this, o) : (t = this.thru(s), c ? e ? t.value()[0] : t.value() : t);
	      });
	    }), r("pop push shift sort splice unshift".split(" "), function (n) {
	      var t = ri[n],
	          r = /^(?:push|sort|unshift)$/.test(n) ? "tap" : "thru",
	          e = /^(?:pop|shift)$/.test(n);

	      An.prototype[n] = function () {
	        var n = arguments;

	        if (e && !this.__chain__) {
	          var u = this.value();
	          return t.apply(ff(u) ? u : [], n);
	        }

	        return this[r](function (r) {
	          return t.apply(ff(r) ? r : [], n);
	        });
	      };
	    }), mt(Ln.prototype, function (n, t) {
	      var r = An[t];

	      if (r) {
	        var e = r.name + "";
	        (Gi[e] || (Gi[e] = [])).push({
	          name: t,
	          func: r
	        });
	      }
	    }), Gi[Jr(T, 2).name] = [{
	      name: "wrapper",
	      func: T
	    }], Ln.prototype.clone = function () {
	      var n = new Ln(this.__wrapped__);
	      return n.__actions__ = Lr(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = Lr(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = Lr(this.__views__), n;
	    }, Ln.prototype.reverse = function () {
	      if (this.__filtered__) {
	        var n = new Ln(this);
	        n.__dir__ = -1, n.__filtered__ = true;
	      } else n = this.clone(), n.__dir__ *= -1;

	      return n;
	    }, Ln.prototype.value = function () {
	      var n,
	          t = this.__wrapped__.value(),
	          r = this.__dir__,
	          e = ff(t),
	          u = 0 > r,
	          i = e ? t.length : 0;

	      n = 0;

	      for (var o = i, f = this.__views__, c = -1, a = f.length; ++c < a;) {
	        var l = f[c],
	            s = l.size;

	        switch (l.type) {
	          case "drop":
	            n += s;
	            break;

	          case "dropRight":
	            o -= s;
	            break;

	          case "take":
	            o = Ci(o, n + s);
	            break;

	          case "takeRight":
	            n = Li(n, o - s);
	        }
	      }

	      if (n = {
	        start: n,
	        end: o
	      }, o = n.start, f = n.end, n = f - o, o = u ? f : o - 1, f = this.__iteratees__, c = f.length, a = 0, l = Ci(n, this.__takeCount__), !e || !u && i == n && l == n) return wr(t, this.__actions__);
	      e = [];

	      n: for (; n-- && a < l;) {
	        for (o += r, u = -1, i = t[o]; ++u < c;) {
	          var h = f[u],
	              s = h.type,
	              h = (0, h.iteratee)(i);
	          if (2 == s) i = h;else if (!h) {
	            if (1 == s) continue n;
	            break n;
	          }
	        }

	        e[a++] = i;
	      }

	      return e;
	    }, An.prototype.at = To, An.prototype.chain = function () {
	      return Ye(this);
	    }, An.prototype.commit = function () {
	      return new On(this.value(), this.__chain__);
	    }, An.prototype.next = function () {
	      this.__values__ === T && (this.__values__ = mu(this.value()));
	      var n = this.__index__ >= this.__values__.length;
	      return {
	        done: n,
	        value: n ? T : this.__values__[this.__index__++]
	      };
	    }, An.prototype.plant = function (n) {
	      for (var t, r = this; r instanceof kn;) {
	        var e = Fe(r);
	        e.__index__ = 0, e.__values__ = T, t ? u.__wrapped__ = e : t = e;
	        var u = e,
	            r = r.__wrapped__;
	      }

	      return u.__wrapped__ = n, t;
	    }, An.prototype.reverse = function () {
	      var n = this.__wrapped__;
	      return n instanceof Ln ? (this.__actions__.length && (n = new Ln(this)), n = n.reverse(), n.__actions__.push({
	        func: Qe,
	        args: [Ge],
	        thisArg: T
	      }), new On(n, this.__chain__)) : this.thru(Ge);
	    }, An.prototype.toJSON = An.prototype.valueOf = An.prototype.value = function () {
	      return wr(this.__wrapped__, this.__actions__);
	    }, An.prototype.first = An.prototype.head, wi && (An.prototype[wi] = Xe), An;
	  }();

	  typeof define == "function" && _typeof_1$1(define.amd) == "object" && define.amd ? ($n._ = rt, define(function () {
	    return rt;
	  })) : Nn ? ((Nn.exports = rt)._ = rt, Fn._ = rt) : $n._ = rt;
	}).call(undefined);

	var lodash_min = /*#__PURE__*/Object.freeze({

	});

	var _mapping = createCommonjsModule(function (module, exports) {
	/** Used to map aliases to their real names. */
	exports.aliasToReal = {
	  // Lodash aliases.
	  'each': 'forEach',
	  'eachRight': 'forEachRight',
	  'entries': 'toPairs',
	  'entriesIn': 'toPairsIn',
	  'extend': 'assignIn',
	  'extendAll': 'assignInAll',
	  'extendAllWith': 'assignInAllWith',
	  'extendWith': 'assignInWith',
	  'first': 'head',
	  // Methods that are curried variants of others.
	  'conforms': 'conformsTo',
	  'matches': 'isMatch',
	  'property': 'get',
	  // Ramda aliases.
	  '__': 'placeholder',
	  'F': 'stubFalse',
	  'T': 'stubTrue',
	  'all': 'every',
	  'allPass': 'overEvery',
	  'always': 'constant',
	  'any': 'some',
	  'anyPass': 'overSome',
	  'apply': 'spread',
	  'assoc': 'set',
	  'assocPath': 'set',
	  'complement': 'negate',
	  'compose': 'flowRight',
	  'contains': 'includes',
	  'dissoc': 'unset',
	  'dissocPath': 'unset',
	  'dropLast': 'dropRight',
	  'dropLastWhile': 'dropRightWhile',
	  'equals': 'isEqual',
	  'identical': 'eq',
	  'indexBy': 'keyBy',
	  'init': 'initial',
	  'invertObj': 'invert',
	  'juxt': 'over',
	  'omitAll': 'omit',
	  'nAry': 'ary',
	  'path': 'get',
	  'pathEq': 'matchesProperty',
	  'pathOr': 'getOr',
	  'paths': 'at',
	  'pickAll': 'pick',
	  'pipe': 'flow',
	  'pluck': 'map',
	  'prop': 'get',
	  'propEq': 'matchesProperty',
	  'propOr': 'getOr',
	  'props': 'at',
	  'symmetricDifference': 'xor',
	  'symmetricDifferenceBy': 'xorBy',
	  'symmetricDifferenceWith': 'xorWith',
	  'takeLast': 'takeRight',
	  'takeLastWhile': 'takeRightWhile',
	  'unapply': 'rest',
	  'unnest': 'flatten',
	  'useWith': 'overArgs',
	  'where': 'conformsTo',
	  'whereEq': 'isMatch',
	  'zipObj': 'zipObject'
	};
	/** Used to map ary to method names. */

	exports.aryMethod = {
	  '1': ['assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create', 'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow', 'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll', 'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome', 'rest', 'reverse', 'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart', 'uniqueId', 'words', 'zipAll'],
	  '2': ['add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith', 'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith', 'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN', 'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference', 'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq', 'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex', 'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach', 'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get', 'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection', 'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy', 'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty', 'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit', 'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial', 'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll', 'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove', 'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex', 'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy', 'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight', 'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars', 'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith', 'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject', 'zipObjectDeep'],
	  '3': ['assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith', 'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr', 'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith', 'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth', 'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd', 'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight', 'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy', 'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy', 'xorWith', 'zipWith'],
	  '4': ['fill', 'setWith', 'updateWith']
	};
	/** Used to map ary to rearg configs. */

	exports.aryRearg = {
	  '2': [1, 0],
	  '3': [2, 0, 1],
	  '4': [3, 2, 0, 1]
	};
	/** Used to map method names to their iteratee ary. */

	exports.iterateeAry = {
	  'dropRightWhile': 1,
	  'dropWhile': 1,
	  'every': 1,
	  'filter': 1,
	  'find': 1,
	  'findFrom': 1,
	  'findIndex': 1,
	  'findIndexFrom': 1,
	  'findKey': 1,
	  'findLast': 1,
	  'findLastFrom': 1,
	  'findLastIndex': 1,
	  'findLastIndexFrom': 1,
	  'findLastKey': 1,
	  'flatMap': 1,
	  'flatMapDeep': 1,
	  'flatMapDepth': 1,
	  'forEach': 1,
	  'forEachRight': 1,
	  'forIn': 1,
	  'forInRight': 1,
	  'forOwn': 1,
	  'forOwnRight': 1,
	  'map': 1,
	  'mapKeys': 1,
	  'mapValues': 1,
	  'partition': 1,
	  'reduce': 2,
	  'reduceRight': 2,
	  'reject': 1,
	  'remove': 1,
	  'some': 1,
	  'takeRightWhile': 1,
	  'takeWhile': 1,
	  'times': 1,
	  'transform': 2
	};
	/** Used to map method names to iteratee rearg configs. */

	exports.iterateeRearg = {
	  'mapKeys': [1],
	  'reduceRight': [1, 0]
	};
	/** Used to map method names to rearg configs. */

	exports.methodRearg = {
	  'assignInAllWith': [1, 0],
	  'assignInWith': [1, 2, 0],
	  'assignAllWith': [1, 0],
	  'assignWith': [1, 2, 0],
	  'differenceBy': [1, 2, 0],
	  'differenceWith': [1, 2, 0],
	  'getOr': [2, 1, 0],
	  'intersectionBy': [1, 2, 0],
	  'intersectionWith': [1, 2, 0],
	  'isEqualWith': [1, 2, 0],
	  'isMatchWith': [2, 1, 0],
	  'mergeAllWith': [1, 0],
	  'mergeWith': [1, 2, 0],
	  'padChars': [2, 1, 0],
	  'padCharsEnd': [2, 1, 0],
	  'padCharsStart': [2, 1, 0],
	  'pullAllBy': [2, 1, 0],
	  'pullAllWith': [2, 1, 0],
	  'rangeStep': [1, 2, 0],
	  'rangeStepRight': [1, 2, 0],
	  'setWith': [3, 1, 2, 0],
	  'sortedIndexBy': [2, 1, 0],
	  'sortedLastIndexBy': [2, 1, 0],
	  'unionBy': [1, 2, 0],
	  'unionWith': [1, 2, 0],
	  'updateWith': [3, 1, 2, 0],
	  'xorBy': [1, 2, 0],
	  'xorWith': [1, 2, 0],
	  'zipWith': [1, 2, 0]
	};
	/** Used to map method names to spread configs. */

	exports.methodSpread = {
	  'assignAll': {
	    'start': 0
	  },
	  'assignAllWith': {
	    'start': 0
	  },
	  'assignInAll': {
	    'start': 0
	  },
	  'assignInAllWith': {
	    'start': 0
	  },
	  'defaultsAll': {
	    'start': 0
	  },
	  'defaultsDeepAll': {
	    'start': 0
	  },
	  'invokeArgs': {
	    'start': 2
	  },
	  'invokeArgsMap': {
	    'start': 2
	  },
	  'mergeAll': {
	    'start': 0
	  },
	  'mergeAllWith': {
	    'start': 0
	  },
	  'partial': {
	    'start': 1
	  },
	  'partialRight': {
	    'start': 1
	  },
	  'without': {
	    'start': 1
	  },
	  'zipAll': {
	    'start': 0
	  }
	};
	/** Used to identify methods which mutate arrays or objects. */

	exports.mutate = {
	  'array': {
	    'fill': true,
	    'pull': true,
	    'pullAll': true,
	    'pullAllBy': true,
	    'pullAllWith': true,
	    'pullAt': true,
	    'remove': true,
	    'reverse': true
	  },
	  'object': {
	    'assign': true,
	    'assignAll': true,
	    'assignAllWith': true,
	    'assignIn': true,
	    'assignInAll': true,
	    'assignInAllWith': true,
	    'assignInWith': true,
	    'assignWith': true,
	    'defaults': true,
	    'defaultsAll': true,
	    'defaultsDeep': true,
	    'defaultsDeepAll': true,
	    'merge': true,
	    'mergeAll': true,
	    'mergeAllWith': true,
	    'mergeWith': true
	  },
	  'set': {
	    'set': true,
	    'setWith': true,
	    'unset': true,
	    'update': true,
	    'updateWith': true
	  }
	};
	/** Used to map real names to their aliases. */

	exports.realToAlias = function () {
	  var hasOwnProperty = Object.prototype.hasOwnProperty,
	      object = exports.aliasToReal,
	      result = {};

	  for (var key in object) {
	    var value = object[key];

	    if (hasOwnProperty.call(result, value)) {
	      result[value].push(key);
	    } else {
	      result[value] = [key];
	    }
	  }

	  return result;
	}();
	/** Used to map method names to other names. */


	exports.remap = {
	  'assignAll': 'assign',
	  'assignAllWith': 'assignWith',
	  'assignInAll': 'assignIn',
	  'assignInAllWith': 'assignInWith',
	  'curryN': 'curry',
	  'curryRightN': 'curryRight',
	  'defaultsAll': 'defaults',
	  'defaultsDeepAll': 'defaultsDeep',
	  'findFrom': 'find',
	  'findIndexFrom': 'findIndex',
	  'findLastFrom': 'findLast',
	  'findLastIndexFrom': 'findLastIndex',
	  'getOr': 'get',
	  'includesFrom': 'includes',
	  'indexOfFrom': 'indexOf',
	  'invokeArgs': 'invoke',
	  'invokeArgsMap': 'invokeMap',
	  'lastIndexOfFrom': 'lastIndexOf',
	  'mergeAll': 'merge',
	  'mergeAllWith': 'mergeWith',
	  'padChars': 'pad',
	  'padCharsEnd': 'padEnd',
	  'padCharsStart': 'padStart',
	  'propertyOf': 'get',
	  'rangeStep': 'range',
	  'rangeStepRight': 'rangeRight',
	  'restFrom': 'rest',
	  'spreadFrom': 'spread',
	  'trimChars': 'trim',
	  'trimCharsEnd': 'trimEnd',
	  'trimCharsStart': 'trimStart',
	  'zipAll': 'zip'
	};
	/** Used to track methods that skip fixing their arity. */

	exports.skipFixed = {
	  'castArray': true,
	  'flow': true,
	  'flowRight': true,
	  'iteratee': true,
	  'mixin': true,
	  'rearg': true,
	  'runInContext': true
	};
	/** Used to track methods that skip rearranging arguments. */

	exports.skipRearg = {
	  'add': true,
	  'assign': true,
	  'assignIn': true,
	  'bind': true,
	  'bindKey': true,
	  'concat': true,
	  'difference': true,
	  'divide': true,
	  'eq': true,
	  'gt': true,
	  'gte': true,
	  'isEqual': true,
	  'lt': true,
	  'lte': true,
	  'matchesProperty': true,
	  'merge': true,
	  'multiply': true,
	  'overArgs': true,
	  'partial': true,
	  'partialRight': true,
	  'propertyOf': true,
	  'random': true,
	  'range': true,
	  'rangeRight': true,
	  'subtract': true,
	  'zip': true,
	  'zipObject': true,
	  'zipObjectDeep': true
	};
	});
	var _mapping_1 = _mapping.aliasToReal;
	var _mapping_2 = _mapping.aryMethod;
	var _mapping_3 = _mapping.aryRearg;
	var _mapping_4 = _mapping.iterateeAry;
	var _mapping_5 = _mapping.iterateeRearg;
	var _mapping_6 = _mapping.methodRearg;
	var _mapping_7 = _mapping.methodSpread;
	var _mapping_8 = _mapping.mutate;
	var _mapping_9 = _mapping.realToAlias;
	var _mapping_10 = _mapping.remap;
	var _mapping_11 = _mapping.skipFixed;
	var _mapping_12 = _mapping.skipRearg;

	/**
	 * The default argument placeholder value for methods.
	 *
	 * @type {Object}
	 */
	var placeholder = {};

	/** Built-in value reference. */


	var push = Array.prototype.push;
	/**
	 * Creates a function, with an arity of `n`, that invokes `func` with the
	 * arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} n The arity of the new function.
	 * @returns {Function} Returns the new function.
	 */

	function baseArity(func, n) {
	  return n == 2 ? function (a, b) {
	    return func.apply(undefined, arguments);
	  } : function (a) {
	    return func.apply(undefined, arguments);
	  };
	}
	/**
	 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
	 * any additional arguments.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} n The arity cap.
	 * @returns {Function} Returns the new function.
	 */


	function baseAry(func, n) {
	  return n == 2 ? function (a, b) {
	    return func(a, b);
	  } : function (a) {
	    return func(a);
	  };
	}
	/**
	 * Creates a clone of `array`.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the cloned array.
	 */


	function cloneArray(array) {
	  var length = array ? array.length : 0,
	      result = Array(length);

	  while (length--) {
	    result[length] = array[length];
	  }

	  return result;
	}
	/**
	 * Creates a function that clones a given object using the assignment `func`.
	 *
	 * @private
	 * @param {Function} func The assignment function.
	 * @returns {Function} Returns the new cloner function.
	 */


	function createCloner(func) {
	  return function (object) {
	    return func({}, object);
	  };
	}
	/**
	 * A specialized version of `_.spread` which flattens the spread array into
	 * the arguments of the invoked `func`.
	 *
	 * @private
	 * @param {Function} func The function to spread arguments over.
	 * @param {number} start The start position of the spread.
	 * @returns {Function} Returns the new function.
	 */


	function flatSpread(func, start) {
	  return function () {
	    var length = arguments.length,
	        lastIndex = length - 1,
	        args = Array(length);

	    while (length--) {
	      args[length] = arguments[length];
	    }

	    var array = args[start],
	        otherArgs = args.slice(0, start);

	    if (array) {
	      push.apply(otherArgs, array);
	    }

	    if (start != lastIndex) {
	      push.apply(otherArgs, args.slice(start + 1));
	    }

	    return func.apply(this, otherArgs);
	  };
	}
	/**
	 * Creates a function that wraps `func` and uses `cloner` to clone the first
	 * argument it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} cloner The function to clone arguments.
	 * @returns {Function} Returns the new immutable function.
	 */


	function wrapImmutable(func, cloner) {
	  return function () {
	    var length = arguments.length;

	    if (!length) {
	      return;
	    }

	    var args = Array(length);

	    while (length--) {
	      args[length] = arguments[length];
	    }

	    var result = args[0] = cloner.apply(undefined, args);
	    func.apply(undefined, args);
	    return result;
	  };
	}
	/**
	 * The base implementation of `convert` which accepts a `util` object of methods
	 * required to perform conversions.
	 *
	 * @param {Object} util The util object.
	 * @param {string} name The name of the function to convert.
	 * @param {Function} func The function to convert.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
	 * @param {boolean} [options.curry=true] Specify currying.
	 * @param {boolean} [options.fixed=true] Specify fixed arity.
	 * @param {boolean} [options.immutable=true] Specify immutable operations.
	 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
	 * @returns {Function|Object} Returns the converted function or object.
	 */


	function baseConvert(util, name, func, options) {
	  var isLib = typeof name == 'function',
	      isObj = name === Object(name);

	  if (isObj) {
	    options = func;
	    func = name;
	    name = undefined;
	  }

	  if (func == null) {
	    throw new TypeError();
	  }

	  options || (options = {});
	  var config = {
	    'cap': 'cap' in options ? options.cap : true,
	    'curry': 'curry' in options ? options.curry : true,
	    'fixed': 'fixed' in options ? options.fixed : true,
	    'immutable': 'immutable' in options ? options.immutable : true,
	    'rearg': 'rearg' in options ? options.rearg : true
	  };
	  var defaultHolder = isLib ? func : placeholder,
	      forceCurry = 'curry' in options && options.curry,
	      forceFixed = 'fixed' in options && options.fixed,
	      forceRearg = 'rearg' in options && options.rearg,
	      pristine = isLib ? func.runInContext() : undefined;
	  var helpers = isLib ? func : {
	    'ary': util.ary,
	    'assign': util.assign,
	    'clone': util.clone,
	    'curry': util.curry,
	    'forEach': util.forEach,
	    'isArray': util.isArray,
	    'isError': util.isError,
	    'isFunction': util.isFunction,
	    'isWeakMap': util.isWeakMap,
	    'iteratee': util.iteratee,
	    'keys': util.keys,
	    'rearg': util.rearg,
	    'toInteger': util.toInteger,
	    'toPath': util.toPath
	  };
	  var ary = helpers.ary,
	      assign = helpers.assign,
	      clone = helpers.clone,
	      curry = helpers.curry,
	      each = helpers.forEach,
	      isArray = helpers.isArray,
	      isError = helpers.isError,
	      isFunction = helpers.isFunction,
	      isWeakMap = helpers.isWeakMap,
	      keys = helpers.keys,
	      rearg = helpers.rearg,
	      toInteger = helpers.toInteger,
	      toPath = helpers.toPath;
	  var aryMethodKeys = keys(_mapping.aryMethod);
	  var wrappers = {
	    'castArray': function castArray(_castArray) {
	      return function () {
	        var value = arguments[0];
	        return isArray(value) ? _castArray(cloneArray(value)) : _castArray.apply(undefined, arguments);
	      };
	    },
	    'iteratee': function iteratee(_iteratee) {
	      return function () {
	        var func = arguments[0],
	            arity = arguments[1],
	            result = _iteratee(func, arity),
	            length = result.length;

	        if (config.cap && typeof arity == 'number') {
	          arity = arity > 2 ? arity - 2 : 1;
	          return length && length <= arity ? result : baseAry(result, arity);
	        }

	        return result;
	      };
	    },
	    'mixin': function mixin(_mixin) {
	      return function (source) {
	        var func = this;

	        if (!isFunction(func)) {
	          return _mixin(func, Object(source));
	        }

	        var pairs = [];
	        each(keys(source), function (key) {
	          if (isFunction(source[key])) {
	            pairs.push([key, func.prototype[key]]);
	          }
	        });

	        _mixin(func, Object(source));

	        each(pairs, function (pair) {
	          var value = pair[1];

	          if (isFunction(value)) {
	            func.prototype[pair[0]] = value;
	          } else {
	            delete func.prototype[pair[0]];
	          }
	        });
	        return func;
	      };
	    },
	    'nthArg': function nthArg(_nthArg) {
	      return function (n) {
	        var arity = n < 0 ? 1 : toInteger(n) + 1;
	        return curry(_nthArg(n), arity);
	      };
	    },
	    'rearg': function rearg(_rearg) {
	      return function (func, indexes) {
	        var arity = indexes ? indexes.length : 0;
	        return curry(_rearg(func, indexes), arity);
	      };
	    },
	    'runInContext': function runInContext(_runInContext) {
	      return function (context) {
	        return baseConvert(util, _runInContext(context), options);
	      };
	    }
	  };
	  /*--------------------------------------------------------------------------*/

	  /**
	   * Casts `func` to a function with an arity capped iteratee if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @returns {Function} Returns the cast function.
	   */

	  function castCap(name, func) {
	    if (config.cap) {
	      var indexes = _mapping.iterateeRearg[name];

	      if (indexes) {
	        return iterateeRearg(func, indexes);
	      }

	      var n = !isLib && _mapping.iterateeAry[name];

	      if (n) {
	        return iterateeAry(func, n);
	      }
	    }

	    return func;
	  }
	  /**
	   * Casts `func` to a curried function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */


	  function castCurry(name, func, n) {
	    return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
	  }
	  /**
	   * Casts `func` to a fixed arity function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the cast function.
	   */


	  function castFixed(name, func, n) {
	    if (config.fixed && (forceFixed || !_mapping.skipFixed[name])) {
	      var data = _mapping.methodSpread[name],
	          start = data && data.start;
	      return start === undefined ? ary(func, n) : flatSpread(func, start);
	    }

	    return func;
	  }
	  /**
	   * Casts `func` to an rearged function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */


	  function castRearg(name, func, n) {
	    return config.rearg && n > 1 && (forceRearg || !_mapping.skipRearg[name]) ? rearg(func, _mapping.methodRearg[name] || _mapping.aryRearg[n]) : func;
	  }
	  /**
	   * Creates a clone of `object` by `path`.
	   *
	   * @private
	   * @param {Object} object The object to clone.
	   * @param {Array|string} path The path to clone by.
	   * @returns {Object} Returns the cloned object.
	   */


	  function cloneByPath(object, path) {
	    path = toPath(path);
	    var index = -1,
	        length = path.length,
	        lastIndex = length - 1,
	        result = clone(Object(object)),
	        nested = result;

	    while (nested != null && ++index < length) {
	      var key = path[index],
	          value = nested[key];

	      if (value != null && !(isFunction(value) || isError(value) || isWeakMap(value))) {
	        nested[key] = clone(index == lastIndex ? value : Object(value));
	      }

	      nested = nested[key];
	    }

	    return result;
	  }
	  /**
	   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
	   * version with conversion `options` applied.
	   *
	   * @param {Object} [options] The options object. See `baseConvert` for more details.
	   * @returns {Function} Returns the converted `lodash`.
	   */


	  function convertLib(options) {
	    return _.runInContext.convert(options)(undefined);
	  }
	  /**
	   * Create a converter function for `func` of `name`.
	   *
	   * @param {string} name The name of the function to convert.
	   * @param {Function} func The function to convert.
	   * @returns {Function} Returns the new converter function.
	   */


	  function createConverter(name, func) {
	    var realName = _mapping.aliasToReal[name] || name,
	        methodName = _mapping.remap[realName] || realName,
	        oldOptions = options;
	    return function (options) {
	      var newUtil = isLib ? pristine : helpers,
	          newFunc = isLib ? pristine[methodName] : func,
	          newOptions = assign(assign({}, oldOptions), options);
	      return baseConvert(newUtil, realName, newFunc, newOptions);
	    };
	  }
	  /**
	   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
	   * arguments, ignoring any additional arguments.
	   *
	   * @private
	   * @param {Function} func The function to cap iteratee arguments for.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the new function.
	   */


	  function iterateeAry(func, n) {
	    return overArg(func, function (func) {
	      return typeof func == 'function' ? baseAry(func, n) : func;
	    });
	  }
	  /**
	   * Creates a function that wraps `func` to invoke its iteratee with arguments
	   * arranged according to the specified `indexes` where the argument value at
	   * the first index is provided as the first argument, the argument value at
	   * the second index is provided as the second argument, and so on.
	   *
	   * @private
	   * @param {Function} func The function to rearrange iteratee arguments for.
	   * @param {number[]} indexes The arranged argument indexes.
	   * @returns {Function} Returns the new function.
	   */


	  function iterateeRearg(func, indexes) {
	    return overArg(func, function (func) {
	      var n = indexes.length;
	      return baseArity(rearg(baseAry(func, n), indexes), n);
	    });
	  }
	  /**
	   * Creates a function that invokes `func` with its first argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */


	  function overArg(func, transform) {
	    return function () {
	      var length = arguments.length;

	      if (!length) {
	        return func();
	      }

	      var args = Array(length);

	      while (length--) {
	        args[length] = arguments[length];
	      }

	      var index = config.rearg ? 0 : length - 1;
	      args[index] = transform(args[index]);
	      return func.apply(undefined, args);
	    };
	  }
	  /**
	   * Creates a function that wraps `func` and applys the conversions
	   * rules by `name`.
	   *
	   * @private
	   * @param {string} name The name of the function to wrap.
	   * @param {Function} func The function to wrap.
	   * @returns {Function} Returns the converted function.
	   */


	  function wrap(name, func, placeholder$$1) {
	    var result,
	        realName = _mapping.aliasToReal[name] || name,
	        wrapped = func,
	        wrapper = wrappers[realName];

	    if (wrapper) {
	      wrapped = wrapper(func);
	    } else if (config.immutable) {
	      if (_mapping.mutate.array[realName]) {
	        wrapped = wrapImmutable(func, cloneArray);
	      } else if (_mapping.mutate.object[realName]) {
	        wrapped = wrapImmutable(func, createCloner(func));
	      } else if (_mapping.mutate.set[realName]) {
	        wrapped = wrapImmutable(func, cloneByPath);
	      }
	    }

	    each(aryMethodKeys, function (aryKey) {
	      each(_mapping.aryMethod[aryKey], function (otherName) {
	        if (realName == otherName) {
	          var data = _mapping.methodSpread[realName],
	              afterRearg = data && data.afterRearg;
	          result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
	          result = castCap(realName, result);
	          result = castCurry(realName, result, aryKey);
	          return false;
	        }
	      });
	      return !result;
	    });
	    result || (result = wrapped);

	    if (result == func) {
	      result = forceCurry ? curry(result, 1) : function () {
	        return func.apply(this, arguments);
	      };
	    }

	    result.convert = createConverter(realName, func);
	    result.placeholder = func.placeholder = placeholder$$1;
	    return result;
	  }
	  /*--------------------------------------------------------------------------*/


	  if (!isObj) {
	    return wrap(name, func, defaultHolder);
	  }

	  var _ = func; // Convert methods by ary cap.

	  var pairs = [];
	  each(aryMethodKeys, function (aryKey) {
	    each(_mapping.aryMethod[aryKey], function (key) {
	      var func = _[_mapping.remap[key] || key];

	      if (func) {
	        pairs.push([key, wrap(key, func, _)]);
	      }
	    });
	  }); // Convert remaining methods.

	  each(keys(_), function (key) {
	    var func = _[key];

	    if (typeof func == 'function') {
	      var length = pairs.length;

	      while (length--) {
	        if (pairs[length][0] == key) {
	          return;
	        }
	      }

	      func.convert = createConverter(key, func);
	      pairs.push([key, func]);
	    }
	  }); // Assign to `_` leaving `_.prototype` unchanged to allow chaining.

	  each(pairs, function (pair) {
	    _[pair[0]] = pair[1];
	  });
	  _.convert = convertLib;
	  _.placeholder = _; // Assign aliases.

	  each(keys(_), function (key) {
	    each(_mapping.realToAlias[key] || [], function (alias) {
	      _[alias] = _[key];
	    });
	  });
	  return _;
	}

	var _baseConvert = baseConvert;

	var _ = lodash_min.runInContext();

	var fp = _baseConvert(_, _);

	// Copy of sindre's leven, wrapped in dead code elimination for production
	// https://github.com/sindresorhus/leven/blob/master/index.js

	/* eslint-disable complexity, import/no-mutable-exports, no-multi-assign, no-nested-ternary, no-plusplus */
	var leven = function leven() {
	  return 0;
	};

	var leven$1 = leven;

	var typeOf = function typeOf() {
	  var _Object$prototype$toS;

	  return (_Object$prototype$toS = Object.prototype.toString).call.apply(_Object$prototype$toS, arguments);
	};
	/**
	 * Ensure a component can render as a give prop value.
	 */


	var as = function as() {
	  return propTypes.oneOfType([propTypes.func, propTypes.object, propTypes.string, propTypes.symbol]).apply(void 0, arguments);
	};
	/**
	 * Ensure a prop is a valid DOM node.
	 */

	var domNode = function domNode(props, propName) {
	  // skip if prop is undefined
	  if (props[propName] === undefined) return; // skip if prop is valid

	  if (props[propName] instanceof Element) return;
	  return new Error("Invalid prop \"".concat(propName, "\" supplied, expected a DOM node."));
	};
	/**
	 * Similar to PropTypes.oneOf but shows closest matches.
	 * Word order is ignored allowing `left chevron` to match `chevron left`.
	 * Useful for very large lists of options (e.g. Icon name, Flag name, etc.)
	 * @param {string[]} suggestions An array of allowed values.
	 */

	var suggest = function suggest(suggestions) {
	  if (!Array.isArray(suggestions)) {
	    throw new Error('Invalid argument supplied to suggest, expected an instance of array.');
	  }
	  /* eslint-disable max-nested-callbacks */


	  var findBestSuggestions = fp.memoize(function (str) {
	    var propValueWords = str.split(' ');
	    return fp.flow(fp.map(function (suggestion) {
	      var suggestionWords = suggestion.split(' ');

	      var propValueScore = fp.flow(fp.map(function (x) {
	        return fp.map(function (y) {
	          return leven$1(x, y);
	        }, suggestionWords);
	      }), fp.map(fp.min), fp.sum)(propValueWords);

	      var suggestionScore = fp.flow(fp.map(function (x) {
	        return fp.map(function (y) {
	          return leven$1(x, y);
	        }, propValueWords);
	      }), fp.map(fp.min), fp.sum)(suggestionWords);

	      return {
	        suggestion: suggestion,
	        score: propValueScore + suggestionScore
	      };
	    }), fp.sortBy(['score', 'suggestion']), fp.take(3))(suggestions);
	  });
	  /* eslint-enable max-nested-callbacks */
	  // Convert the suggestions list into a hash map for O(n) lookup times. Ensure
	  // the words in each key are sorted alphabetically so that we have a consistent
	  // way of looking up a value in the map, i.e. we can sort the words in the
	  // incoming propValue and look that up without having to check all permutations.


	  var suggestionsLookup = suggestions.reduce(function (acc, key) {
	    acc[key.split(' ').sort().join(' ')] = true;
	    return acc;
	  }, {});
	  return function (props, propName, componentName) {
	    var propValue = props[propName]; // skip if prop is undefined or is included in the suggestions

	    if (!propValue || suggestionsLookup[propValue]) return; // check if the words were correct but ordered differently.
	    // Since we're matching for classNames we need to allow any word order
	    // to pass validation, e.g. `left chevron` vs `chevron left`.

	    var propValueSorted = propValue.split(' ').sort().join(' ');
	    if (suggestionsLookup[propValueSorted]) return; // find best suggestions

	    var bestMatches = findBestSuggestions(propValue); // skip if a match scored 0

	    if (bestMatches.some(function (x) {
	      return x.score === 0;
	    })) return;
	    return new Error(["Invalid prop `".concat(propName, "` of value `").concat(propValue, "` supplied to `").concat(componentName, "`."), "\n\nInstead of `".concat(propValue, "`, did you mean:"), bestMatches.map(function (x) {
	      return "\n  - ".concat(x.suggestion);
	    }).join(''), '\n'].join(''));
	  };
	};
	/**
	 * Disallow other props from being defined with this prop.
	 * @param {string[]} disallowedProps An array of props that cannot be used with this prop.
	 */

	var disallow = function disallow(disallowedProps) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(disallowedProps)) {
	      throw new Error(['Invalid argument supplied to disallow, expected an instance of array.', " See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(''));
	    } // skip if prop is undefined


	    if (fp.isNil(props[propName]) || props[propName] === false) return; // find disallowed props with values

	    var disallowed = disallowedProps.reduce(function (acc, disallowedProp) {
	      if (!fp.isNil(props[disallowedProp]) && props[disallowedProp] !== false) {
	        return [].concat(toConsumableArray$1(acc), [disallowedProp]);
	      }

	      return acc;
	    }, []);

	    if (disallowed.length > 0) {
	      return new Error(["Prop `".concat(propName, "` in `").concat(componentName, "` conflicts with props: `").concat(disallowed.join('`, `'), "`."), 'They cannot be defined together, choose one or the other.'].join(' '));
	    }
	  };
	};
	/**
	 * Ensure a prop adherers to multiple prop type validators.
	 * @param {function[]} validators An array of propType functions.
	 */

	var every$1 = function every(validators) {
	  return function (props, propName, componentName) {
	    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      rest[_key - 3] = arguments[_key];
	    }

	    if (!Array.isArray(validators)) {
	      throw new Error(['Invalid argument supplied to every, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var errors = fp.flow(fp.map(function (validator) {
	      if (typeof validator !== 'function') {
	        throw new Error("every() argument \"validators\" should contain functions, found: ".concat(typeOf(validator), "."));
	      }

	      return validator.apply(void 0, [props, propName, componentName].concat(rest));
	    }), fp.compact)(validators); // we can only return one error at a time


	    return errors[0];
	  };
	};
	/**
	 * Ensure a prop adherers to at least one of the given prop type validators.
	 * @param {function[]} validators An array of propType functions.
	 */

	var some$1 = function some(validators) {
	  return function (props, propName, componentName) {
	    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      rest[_key2 - 3] = arguments[_key2];
	    }

	    if (!Array.isArray(validators)) {
	      throw new Error(['Invalid argument supplied to some, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var errors = fp.compact(fp.map(validators, function (validator) {
	      if (!fp.isFunction(validator)) {
	        throw new Error("some() argument \"validators\" should contain functions, found: ".concat(typeOf(validator), "."));
	      }

	      return validator.apply(void 0, [props, propName, componentName].concat(rest));
	    })); // fail only if all validators failed


	    if (errors.length === validators.length) {
	      var error = new Error('One of these validators must pass:');
	      error.message += "\n".concat(fp.map(errors, function (err, i) {
	        return "[".concat(i + 1, "]: ").concat(err.message);
	      }).join('\n'));
	      return error;
	    }
	  };
	};
	/**
	 * Ensure a validator passes only when a component has a given propsShape.
	 * @param {object} propsShape An object describing the prop shape.
	 * @param {function} validator A propType function.
	 */

	var givenProps = function givenProps(propsShape, validator) {
	  return function (props, propName, componentName) {
	    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
	      rest[_key3 - 3] = arguments[_key3];
	    }

	    if (!fp.isPlainObject(propsShape)) {
	      throw new Error(['Invalid argument supplied to givenProps, expected an object.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    if (typeof validator !== 'function') {
	      throw new Error(['Invalid argument supplied to givenProps, expected a function.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var shouldValidate = fp.keys(propsShape).every(function (key) {
	      var val = propsShape[key]; // require propShape validators to pass or prop values to match

	      return typeof val === 'function' ? !val.apply(void 0, [props, key, componentName].concat(rest)) : val === props[propName];
	    });

	    if (!shouldValidate) return;
	    var error = validator.apply(void 0, [props, propName, componentName].concat(rest));

	    if (error) {
	      // poor mans shallow pretty print, prevents JSON circular reference errors
	      var prettyProps = "{ ".concat(fp.keys(fp.pick(fp.keys(propsShape), props)).map(function (key) {
	        var val = props[key];
	        var renderedValue = val;
	        if (typeof val === 'string') renderedValue = "\"".concat(val, "\"");else if (Array.isArray(val)) renderedValue = "[".concat(val.join(', '), "]");else if (fp.isObject(val)) renderedValue = '{...}';
	        return "".concat(key, ": ").concat(renderedValue);
	      }).join(', '), " }");
	      error.message = "Given props ".concat(prettyProps, ": ").concat(error.message);
	      return error;
	    }
	  };
	};
	/**
	 * Define prop dependencies by requiring other props.
	 * @param {string[]} requiredProps An array of required prop names.
	 */

	var demand = function demand(requiredProps) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(requiredProps)) {
	      throw new Error(['Invalid `requiredProps` argument supplied to require, expected an instance of array.', " See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(''));
	    } // skip if prop is undefined


	    if (props[propName] === undefined) return;
	    var missingRequired = requiredProps.filter(function (requiredProp) {
	      return props[requiredProp] === undefined;
	    });

	    if (missingRequired.length > 0) {
	      return new Error("`".concat(propName, "` prop in `").concat(componentName, "` requires props: `").concat(missingRequired.join('`, `'), "`."));
	    }
	  };
	};
	/**
	 * Ensure an multiple prop contains a string with only possible values.
	 * @param {string[]} possible An array of possible values to prop.
	 */

	var multipleProp = function multipleProp(possible) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(possible)) {
	      throw new Error(['Invalid argument supplied to some, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var propValue = props[propName]; // skip if prop is undefined

	    if (fp.isNil(propValue) || propValue === false) return;
	    var values = propValue.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (val) {
	      return fp.trim(val).replace('-', ' ');
	    });

	    var invalid = fp.difference(values, possible); // fail only if there are invalid values


	    if (invalid.length > 0) {
	      return new Error("`".concat(propName, "` prop in `").concat(componentName, "` has invalid values: `").concat(invalid.join('`, `'), "`."));
	    }
	  };
	};
	/**
	 * Ensure a component can render as a node passed as a prop value in place of children.
	 */

	var contentShorthand = function contentShorthand() {
	  return every$1([disallow(['children']), propTypes.node]).apply(void 0, arguments);
	};
	/**
	 * Item shorthand is a description of a component that can be a literal,
	 * a props object, or an element.
	 */

	var itemShorthand = function itemShorthand() {
	  return every$1([disallow(['children']), propTypes.oneOfType([propTypes.func, propTypes.node, propTypes.object, propTypes.arrayOf(propTypes.oneOfType([propTypes.node, propTypes.object]))])]).apply(void 0, arguments);
	};
	/**
	 * Collection shorthand ensures a prop is an array of item shorthand.
	 */

	var collectionShorthand = function collectionShorthand() {
	  return every$1([disallow(['children']), propTypes.arrayOf(itemShorthand)]).apply(void 0, arguments);
	};
	/** A checker that matches the React.RefObject type. */

	var refObject = propTypes.shape({
	  current: propTypes.object
	});
	/** A checker that matches the React.Ref type. */

	var ref = propTypes.oneOfType([propTypes.func, refObject]);

	Object.defineProperty(exports, "__esModule", {
	  value: !0
	});

	var env$2 = require("exenv");

	require("prop-types");

	var React$1 = require("react");

	function _typeof(e) {
	  return (_typeof = "function" == typeof Symbol && "symbol" == _typeof_1$1(Symbol.iterator) ? function (e) {
	    return _typeof_1$1(e);
	  } : function (e) {
	    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof_1$1(e);
	  })(e);
	}

	function _classCallCheck$1(e, t) {
	  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	}

	function _defineProperties$1(e, t) {
	  for (var n = 0; n < t.length; n++) {
	    var r = t[n];
	    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	  }
	}

	function _createClass$1(e, t, n) {
	  return t && _defineProperties$1(e.prototype, t), n && _defineProperties$1(e, n), e;
	}

	function _defineProperty$1(e, t, n) {
	  return t in e ? Object.defineProperty(e, t, {
	    value: n,
	    enumerable: !0,
	    configurable: !0,
	    writable: !0
	  }) : e[t] = n, e;
	}

	function _inherits$1(e, t) {
	  if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
	  e.prototype = Object.create(t && t.prototype, {
	    constructor: {
	      value: e,
	      writable: !0,
	      configurable: !0
	    }
	  }), t && _setPrototypeOf(e, t);
	}

	function _getPrototypeOf(e) {
	  return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
	    return e.__proto__ || Object.getPrototypeOf(e);
	  })(e);
	}

	function _setPrototypeOf(e, t) {
	  return (_setPrototypeOf = Object.setPrototypeOf || function (e, t) {
	    return e.__proto__ = t, e;
	  })(e, t);
	}

	function _assertThisInitialized$1(e) {
	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  return e;
	}

	function _possibleConstructorReturn$1(e, t) {
	  return !t || "object" != _typeof_1$1(t) && "function" != typeof t ? _assertThisInitialized$1(e) : t;
	}

	var EventSet = function () {
	  function e(t) {
	    _classCallCheck$1(this, e), _defineProperty$1(this, "handlers", void 0), this.handlers = t.slice(0);
	  }

	  return _createClass$1(e, [{
	    key: "addHandlers",
	    value: function value(t) {
	      for (var n = this.handlers.slice(0), r = t.length, o = 0; o < r; o += 1) {
	        n.push(t[o]);
	      }

	      return new e(n);
	    }
	  }, {
	    key: "dispatchEvent",
	    value: function value(e, t) {
	      var n = this.handlers.length - 1;

	      if (t) {
	        for (var r = n; r >= 0; r -= 1) {
	          this.handlers[r].called || (this.handlers[r].called = !0, this.handlers[r](e));
	        }

	        for (var o = n; o >= 0; o -= 1) {
	          this.handlers[o].called = !1;
	        }
	      } else {
	        (0, this.handlers[n])(e);
	      }
	    }
	  }, {
	    key: "hasHandlers",
	    value: function value() {
	      return this.handlers.length > 0;
	    }
	  }, {
	    key: "removeHandlers",
	    value: function value(t) {
	      for (var n = [], r = this.handlers.length, o = 0; o < r; o += 1) {
	        var a = this.handlers[o];
	        -1 === t.indexOf(a) && n.push(a);
	      }

	      return new e(n);
	    }
	  }]), e;
	}();

	function cloneMap(e) {
	  var t = new Map();
	  return e.forEach(function (e, n) {
	    t.set(n, e);
	  }), t;
	}

	function normalizeHandlers(e) {
	  return Array.isArray(e) ? e : [e];
	}

	var isRefObject = function isRefObject(e) {
	  return null !== e && "object" === _typeof(e) && e.hasOwnProperty("current");
	};

	function normalizeTarget(e) {
	  return "document" === e ? document : "window" === e ? window : isRefObject(e) ? e.current || document : e || document;
	}

	var EventPool = function () {
	  function e(t, n) {
	    _classCallCheck$1(this, e), _defineProperty$1(this, "handlerSets", void 0), _defineProperty$1(this, "poolName", void 0), this.handlerSets = n, this.poolName = t;
	  }

	  return _createClass$1(e, [{
	    key: "addHandlers",
	    value: function value(t, n) {
	      var r = cloneMap(this.handlerSets);

	      if (r.has(t)) {
	        var o = r.get(t);
	        r.set(t, o.addHandlers(n));
	      } else r.set(t, new EventSet(n));

	      return new e(this.poolName, r);
	    }
	  }, {
	    key: "dispatchEvent",
	    value: function value(e, t) {
	      var n = this.handlerSets.get(e),
	          r = "default" === this.poolName;
	      n && n.dispatchEvent(t, r);
	    }
	  }, {
	    key: "hasHandlers",
	    value: function value() {
	      return this.handlerSets.size > 0;
	    }
	  }, {
	    key: "removeHandlers",
	    value: function value(t, n) {
	      var r = cloneMap(this.handlerSets);
	      if (!r.has(t)) return new e(this.poolName, r);
	      var o = r.get(t).removeHandlers(n);
	      return o.hasHandlers() ? r.set(t, o) : r.delete(t), new e(this.poolName, r);
	    }
	  }]), e;
	}();

	_defineProperty$1(EventPool, "createByType", function (e, t, n) {
	  var r = new Map();
	  return r.set(t, new EventSet(n)), new EventPool(e, r);
	});

	var EventTarget = function () {
	  function e(t) {
	    var n = this;
	    _classCallCheck$1(this, e), _defineProperty$1(this, "handlers", new Map()), _defineProperty$1(this, "pools", new Map()), _defineProperty$1(this, "target", void 0), _defineProperty$1(this, "createEmitter", function (e) {
	      return function (t) {
	        n.pools.forEach(function (n) {
	          n.dispatchEvent(e, t);
	        });
	      };
	    }), this.target = t;
	  }

	  return _createClass$1(e, [{
	    key: "addHandlers",
	    value: function value(e, t, n) {
	      if (this.pools.has(e)) {
	        var r = this.pools.get(e);
	        this.pools.set(e, r.addHandlers(t, n));
	      } else this.pools.set(e, EventPool.createByType(e, t, n));

	      this.handlers.has(t) || this.addTargetHandler(t);
	    }
	  }, {
	    key: "hasHandlers",
	    value: function value() {
	      return this.handlers.size > 0;
	    }
	  }, {
	    key: "removeHandlers",
	    value: function value(e, t, n) {
	      if (this.pools.has(e)) {
	        var r = this.pools.get(e).removeHandlers(t, n);
	        r.hasHandlers() ? this.pools.set(e, r) : this.pools.delete(e), 0 === this.pools.size && this.removeTargetHandler(t);
	      }
	    }
	  }, {
	    key: "addTargetHandler",
	    value: function value(e) {
	      var t = this.createEmitter(e);
	      this.handlers.set(e, t), this.target.addEventListener(e, t, !0);
	    }
	  }, {
	    key: "removeTargetHandler",
	    value: function value(e) {
	      this.handlers.has(e) && (this.target.removeEventListener(e, this.handlers.get(e), !0), this.handlers.delete(e));
	    }
	  }]), e;
	}(),
	    EventStack = function () {
	  function e() {
	    var t = this;
	    _classCallCheck$1(this, e), _defineProperty$1(this, "targets", new Map()), _defineProperty$1(this, "getTarget", function (e) {
	      var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
	          r = normalizeTarget(e);
	      if (t.targets.has(r)) return t.targets.get(r);
	      if (!n) return null;
	      var o = new EventTarget(r);
	      return t.targets.set(r, o), o;
	    }), _defineProperty$1(this, "removeTarget", function (e) {
	      t.targets.delete(normalizeTarget(e));
	    });
	  }

	  return _createClass$1(e, [{
	    key: "sub",
	    value: function value(e, t) {
	      var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

	      if (env$2.canUseDOM) {
	        var r = n.target,
	            o = void 0 === r ? document : r,
	            a = n.pool,
	            s = void 0 === a ? "default" : a;
	        this.getTarget(o).addHandlers(s, e, normalizeHandlers(t));
	      }
	    }
	  }, {
	    key: "unsub",
	    value: function value(e, t) {
	      var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

	      if (env$2.canUseDOM) {
	        var r = n.target,
	            o = void 0 === r ? document : r,
	            a = n.pool,
	            s = void 0 === a ? "default" : a,
	            i = this.getTarget(o, !1);
	        i && (i.removeHandlers(s, e, normalizeHandlers(t)), i.hasHandlers() || this.removeTarget(o));
	      }
	    }
	  }]), e;
	}(),
	    instance = new EventStack(),
	    EventStack$1 = function (e) {
	  function t() {
	    return _classCallCheck$1(this, t), _possibleConstructorReturn$1(this, _getPrototypeOf(t).apply(this, arguments));
	  }

	  return _inherits$1(t, React$1.PureComponent), _createClass$1(t, [{
	    key: "componentDidMount",
	    value: function value() {
	      this.subscribe(this.props);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function value(e) {
	      this.unsubscribe(e), this.subscribe(this.props);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function value() {
	      this.unsubscribe(this.props);
	    }
	  }, {
	    key: "subscribe",
	    value: function value(e) {
	      var t = e.name,
	          n = e.on,
	          r = e.pool,
	          o = e.target;
	      instance.sub(t, n, {
	        pool: r,
	        target: o
	      });
	    }
	  }, {
	    key: "unsubscribe",
	    value: function value(e) {
	      var t = e.name,
	          n = e.on,
	          r = e.pool,
	          o = e.target;
	      instance.unsub(t, n, {
	        pool: r,
	        target: o
	      });
	    }
	  }, {
	    key: "render",
	    value: function value() {
	      return null;
	    }
	  }]), t;
	}();

	_defineProperty$1(EventStack$1, "defaultProps", {
	  pool: "default",
	  target: "document"
	}), EventStack$1.propTypes = {}, exports.instance = instance, exports.default = EventStack$1;

	var eventStack_production = /*#__PURE__*/Object.freeze({

	});

	var stack;

	{
	  stack = eventStack_production;
	}

	var lib = stack.default;
	var instance$1 = stack.instance;
	lib.instance = instance$1;

	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	/* global define */
	var hasOwn = {}.hasOwnProperty;

	function classNames() {
	  var classes = [];

	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i];
	    if (!arg) continue;

	    var argType = _typeof_1$1(arg);

	    if (argType === 'string' || argType === 'number') {
	      classes.push(arg);
	    } else if (Array.isArray(arg) && arg.length) {
	      var inner = classNames.apply(null, arg);

	      if (inner) {
	        classes.push(inner);
	      }
	    } else if (argType === 'object') {
	      for (var key in arg) {
	        if (hasOwn.call(arg, key) && arg[key]) {
	          classes.push(key);
	        }
	      }
	    }
	  }

	  return classes.join(' ');
	}

	// Factories
	// ============================================================

	/**
	 * A more robust React.createElement. It can create elements from primitive values.
	 *
	 * @param {function|string} Component A ReactClass or string
	 * @param {function} mapValueToProps A function that maps a primitive value to the Component props
	 * @param {string|object|function} val The value to create a ReactElement from
	 * @param {Object} [options={}]
	 * @param {object} [options.defaultProps={}] Default props object
	 * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)
	 * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed
	 * @returns {object|null}
	 */

	function createShorthand(Component, mapValueToProps, val) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  if (typeof Component !== 'function' && typeof Component !== 'string') {
	    throw new Error('createShorthand() Component must be a string or function.');
	  } // short circuit noop values


	  if (lodash.isNil(val) || lodash.isBoolean(val)) return null;

	  var valIsString = lodash.isString(val);

	  var valIsNumber = lodash.isNumber(val);

	  var valIsFunction = lodash.isFunction(val);

	  var valIsReactElement = React.isValidElement(val);

	  var valIsPropsObject = lodash.isPlainObject(val);

	  var valIsPrimitiveValue = valIsString || valIsNumber || lodash.isArray(val); // unhandled type return null

	  /* eslint-disable no-console */


	  if (!valIsFunction && !valIsReactElement && !valIsPropsObject && !valIsPrimitiveValue) {

	    return null;
	  }
	  /* eslint-enable no-console */
	  // ----------------------------------------
	  // Build up props
	  // ----------------------------------------


	  var _options$defaultProps = options.defaultProps,
	      defaultProps = _options$defaultProps === void 0 ? {} : _options$defaultProps; // User's props

	  var usersProps = valIsReactElement && val.props || valIsPropsObject && val || valIsPrimitiveValue && mapValueToProps(val); // Override props

	  var _options$overrideProp = options.overrideProps,
	      overrideProps = _options$overrideProp === void 0 ? {} : _options$overrideProp;
	  overrideProps = lodash.isFunction(overrideProps) ? overrideProps(objectSpread({}, defaultProps, usersProps)) : overrideProps; // Merge props

	  /* eslint-disable react/prop-types */

	  var props = objectSpread({}, defaultProps, usersProps, overrideProps); // Merge className


	  if (defaultProps.className || overrideProps.className || usersProps.className) {
	    var mergedClassesNames = classNames(defaultProps.className, overrideProps.className, usersProps.className);
	    props.className = lodash.uniq(mergedClassesNames.split(' ')).join(' ');
	  } // Merge style


	  if (defaultProps.style || overrideProps.style || usersProps.style) {
	    props.style = objectSpread({}, defaultProps.style, usersProps.style, overrideProps.style);
	  } // ----------------------------------------
	  // Get key
	  // ----------------------------------------
	  // Use key, childKey, or generate key


	  if (lodash.isNil(props.key)) {
	    var childKey = props.childKey;
	    var _options$autoGenerate = options.autoGenerateKey,
	        autoGenerateKey = _options$autoGenerate === void 0 ? true : _options$autoGenerate;

	    if (!lodash.isNil(childKey)) {
	      // apply and consume the childKey
	      props.key = typeof childKey === 'function' ? childKey(props) : childKey;
	      delete props.childKey;
	    } else if (autoGenerateKey && (valIsString || valIsNumber)) {
	      // use string/number shorthand values as the key
	      props.key = val;
	    }
	  } // ----------------------------------------
	  // Create Element
	  // ----------------------------------------
	  // Clone ReactElements


	  if (valIsReactElement) return React.cloneElement(val, props); // Create ReactElements from built up props

	  if (valIsPrimitiveValue || valIsPropsObject) return React__default.createElement(Component, props); // Call functions with args similar to createElement()

	  if (valIsFunction) return val(Component, props, props.children);
	  /* eslint-enable react/prop-types */
	} // ============================================================
	// Factory Creators
	// ============================================================

	/**
	 * Creates a `createShorthand` function that is waiting for a value and options.
	 *
	 * @param {function|string} Component A ReactClass or string
	 * @param {function} mapValueToProps A function that maps a primitive value to the Component props
	 * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.
	 */

	function createShorthandFactory(Component, mapValueToProps) {
	  if (typeof Component !== 'function' && typeof Component !== 'string') {
	    throw new Error('createShorthandFactory() Component must be a string or function.');
	  }

	  return function (val, options) {
	    return createShorthand(Component, mapValueToProps, val, options);
	  };
	} // ============================================================
	// HTML Factories
	// ============================================================

	var createHTMLDivision = createShorthandFactory('div', function (val) {
	  return {
	    children: val
	  };
	});
	var createHTMLIframe = createShorthandFactory('iframe', function (src) {
	  return {
	    src: src
	  };
	});
	var createHTMLImage = createShorthandFactory('img', function (val) {
	  return {
	    src: val
	  };
	});
	var createHTMLInput = createShorthandFactory('input', function (val) {
	  return {
	    type: val
	  };
	});
	var createHTMLLabel = createShorthandFactory('label', function (val) {
	  return {
	    children: val
	  };
	});
	var createHTMLParagraph = createShorthandFactory('p', function (val) {
	  return {
	    children: val
	  };
	});

	/**
	 * Returns an object consisting of props beyond the scope of the Component.
	 * Useful for getting and spreading unknown props from the user.
	 * @param {function} Component A function or ReactClass.
	 * @param {object} props A ReactElement props object
	 * @returns {{}} A shallow copy of the prop object
	 */
	var getUnhandledProps = function getUnhandledProps(Component, props) {
	  // Note that `handledProps` are generated automatically during build with `babel-plugin-transform-react-handled-props`
	  var _Component$handledPro = Component.handledProps,
	      handledProps = _Component$handledPro === void 0 ? [] : _Component$handledPro;
	  return Object.keys(props).reduce(function (acc, prop) {
	    if (prop === 'childKey') return acc;
	    if (handledProps.indexOf(prop) === -1) acc[prop] = props[prop];
	    return acc;
	  }, {});
	};

	/**
	 * Returns a createElement() type based on the props of the Component.
	 * Useful for calculating what type a component should render as.
	 *
	 * @param {function} Component A function or ReactClass.
	 * @param {object} props A ReactElement props object
	 * @param {function} [getDefault] A function that returns a default element type.
	 * @returns {string|function} A ReactElement type
	 */
	function getElementType(Component, props, getDefault) {
	  var _Component$defaultPro = Component.defaultProps,
	      defaultProps = _Component$defaultPro === void 0 ? {} : _Component$defaultPro; // ----------------------------------------
	  // user defined "as" element type

	  if (props.as && props.as !== defaultProps.as) return props.as; // ----------------------------------------
	  // computed default element type

	  if (getDefault) {
	    var computedDefault = getDefault();
	    if (computedDefault) return computedDefault;
	  } // ----------------------------------------
	  // infer anchor links


	  if (props.href) return 'a'; // ----------------------------------------
	  // use defaultProp or 'div'

	  return defaultProps.as || 'div';
	}

	var htmlInputAttrs = [// REACT
	'selected', 'defaultValue', 'defaultChecked', // LIMITED HTML PROPS
	'accept', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFocus', 'checked', 'disabled', 'form', 'id', 'lang', 'list', 'max', 'maxLength', 'min', 'minLength', 'multiple', 'name', 'pattern', 'placeholder', 'readOnly', 'required', 'step', 'title', 'type', 'value'];
	var htmlInputEvents = [// EVENTS
	// keyboard
	'onKeyDown', 'onKeyPress', 'onKeyUp', // focus
	'onFocus', 'onBlur', // form
	'onChange', 'onInput', // mouse
	'onClick', 'onContextMenu', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', // selection
	'onSelect', // touch
	'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart'];
	var htmlInputProps = [].concat(htmlInputAttrs, htmlInputEvents);
	var htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];
	/**
	 * Returns an array of objects consisting of: props of html input element and rest.
	 * @param {object} props A ReactElement props object
	 * @param {Object} [options={}]
	 * @param {Array} [options.htmlProps] An array of html input props
	 * @param {boolean} [options.includeAria] Includes all input props that starts with "aria-"
	 * @returns {[{}, {}]} An array of objects
	 */

	var partitionHTMLProps = function partitionHTMLProps(props) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _options$htmlProps = options.htmlProps,
	      htmlProps = _options$htmlProps === void 0 ? htmlInputProps : _options$htmlProps,
	      _options$includeAria = options.includeAria,
	      includeAria = _options$includeAria === void 0 ? true : _options$includeAria;
	  var inputProps = {};
	  var rest$$1 = {};

	  lodash.forEach(props, function (val, prop) {
	    var possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');
	    var target = lodash.includes(htmlProps, prop) || possibleAria ? inputProps : rest$$1;
	    target[prop] = val;
	  });

	  return [inputProps, rest$$1];
	};

	/**
	 * Determines if a click's coordinates are within the bounds of a node.
	 *
	 * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384
	 *
	 * @param {object} node - A DOM node.
	 * @param {object} e - A SyntheticEvent or DOM Event.
	 * @returns {boolean}
	 */

	var doesNodeContainClick = function doesNodeContainClick(node, e) {
	  if (lodash.some([e, node], lodash.isNil)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check

	  if (e.target) {
	    lodash.invoke(e.target, 'setAttribute', 'data-suir-click-target', true);

	    if (document.querySelector('[data-suir-click-target=true]')) {
	      lodash.invoke(e.target, 'removeAttribute', 'data-suir-click-target');

	      return node.contains(e.target);
	    }
	  } // Below logic handles cases where the e.target is no longer in the document.
	  // The result of the click likely has removed the e.target node.
	  // Instead of node.contains(), we'll identify the click by X/Y position.
	  // return early if the event properties aren't available
	  // prevent measuring the node and repainting if we don't need to


	  var clientX = e.clientX,
	      clientY = e.clientY;
	  if (lodash.some([clientX, clientY], lodash.isNil)) return false; // false if the node is not visible

	  var clientRects = node.getClientRects(); // Heads Up!
	  // getClientRects returns a DOMRectList, not an array nor a plain object
	  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes

	  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect

	  var _$first = lodash.first(clientRects),
	      top = _$first.top,
	      bottom = _$first.bottom,
	      left = _$first.left,
	      right = _$first.right;

	  if (lodash.some([top, bottom, left, right], lodash.isNil)) return false; // we add a small decimal to the upper bound just to make it inclusive
	  // don't add an whole pixel (1) as the event/node values may be decimal sensitive

	  return lodash.inRange(clientY, top, bottom + 0.001) && lodash.inRange(clientX, left, right + 0.001);
	};

	/**
	 * @param {number} pageNumber
	 * @return {Object}
	 */
	var createEllipsisItem = function createEllipsisItem(pageNumber) {
	  return {
	    active: false,
	    type: 'ellipsisItem',
	    value: pageNumber
	  };
	};
	/**
	 * @return {Object}
	 */

	var createFirstPage = function createFirstPage() {
	  return {
	    active: false,
	    type: 'firstItem',
	    value: 1
	  };
	};
	/**
	 * @param {number} activePage
	 * @return {Object}
	 */

	var createPrevItem = function createPrevItem(activePage) {
	  return {
	    active: false,
	    type: 'prevItem',
	    value: Math.max(1, activePage - 1)
	  };
	};
	/**
	 * @param {number} activePage
	 * @return {function}
	 */

	var createPageFactory = function createPageFactory(activePage) {
	  return function (pageNumber) {
	    return {
	      active: activePage === pageNumber,
	      type: 'pageItem',
	      value: pageNumber
	    };
	  };
	};
	/**
	 * @param {number} activePage
	 * @param {number} totalPages
	 * @return {Object}
	 */

	var createNextItem = function createNextItem(activePage, totalPages) {
	  return {
	    active: false,
	    type: 'nextItem',
	    value: Math.min(activePage + 1, totalPages)
	  };
	};
	/**
	 * @param {number} totalPages
	 * @return {Object}
	 */

	var createLastItem = function createLastItem(totalPages) {
	  return {
	    active: false,
	    type: 'lastItem',
	    value: totalPages
	  };
	};

	var createInnerPrefix = function createInnerPrefix(firstGroupEnd, innerGroupStart, pageFactory) {
	  var prefixPage = innerGroupStart - 1;
	  var showEllipsis = prefixPage !== firstGroupEnd + 1;
	  var prefixFactory = showEllipsis ? createEllipsisItem : pageFactory;
	  return prefixFactory(prefixPage);
	};
	var createInnerSuffix = function createInnerSuffix(innerGroupEnd, lastGroupStart, pageFactory) {
	  var suffixPage = innerGroupEnd + 1;
	  var showEllipsis = suffixPage !== lastGroupStart - 1;
	  var suffixFactory = showEllipsis ? createEllipsisItem : pageFactory;
	  return suffixFactory(suffixPage);
	};

	var createSimpleRange = function createSimpleRange(start, end, pageFactory) {
	  return lodash.map(lodash.range(start, end + 1), pageFactory);
	};
	var createComplexRange = function createComplexRange(options, pageFactory) {
	  var activePage = options.activePage,
	      boundaryRange = options.boundaryRange,
	      hideEllipsis = options.hideEllipsis,
	      siblingRange = options.siblingRange,
	      totalPages = options.totalPages;
	  var ellipsisSize = hideEllipsis ? 0 : 1;
	  var firstGroupEnd = boundaryRange;
	  var firstGroup = createSimpleRange(1, firstGroupEnd, pageFactory);
	  var lastGroupStart = totalPages + 1 - boundaryRange;
	  var lastGroup = createSimpleRange(lastGroupStart, totalPages, pageFactory);
	  var innerGroupStart = Math.min(Math.max(activePage - siblingRange, firstGroupEnd + ellipsisSize + 1), lastGroupStart - ellipsisSize - 2 * siblingRange - 1);
	  var innerGroupEnd = innerGroupStart + 2 * siblingRange;
	  var innerGroup = createSimpleRange(innerGroupStart, innerGroupEnd, pageFactory);
	  return [].concat(toConsumableArray$1(firstGroup), [!hideEllipsis && createInnerPrefix(firstGroupEnd, innerGroupStart, pageFactory)], toConsumableArray$1(innerGroup), [!hideEllipsis && createInnerSuffix(innerGroupEnd, lastGroupStart, pageFactory)], toConsumableArray$1(lastGroup)).filter(Boolean);
	};

	/**
	 * Checks the possibility of using simple range generation, if number of generated pages is equal
	 * or greater than total pages to show.
	 *
	 * @param {object} options
	 * @param {number} options.boundaryRange Number of always visible pages at the beginning and end.
	 * @param {number} options.siblingRange Number of always visible pages before and after the current one.
	 * @param {number} options.totalPages Total number of pages.
	 * @return {boolean}
	 */
	var isSimplePagination = function isSimplePagination(_ref) {
	  var boundaryRange = _ref.boundaryRange,
	      hideEllipsis = _ref.hideEllipsis,
	      siblingRange = _ref.siblingRange,
	      totalPages = _ref.totalPages;
	  var boundaryRangeSize = 2 * boundaryRange;
	  var ellipsisSize = hideEllipsis ? 0 : 2;
	  var siblingRangeSize = 2 * siblingRange;
	  return 1 + ellipsisSize + siblingRangeSize + boundaryRangeSize >= totalPages;
	};
	var typifyOptions = function typifyOptions(_ref2) {
	  var activePage = _ref2.activePage,
	      boundaryRange = _ref2.boundaryRange,
	      hideEllipsis = _ref2.hideEllipsis,
	      siblingRange = _ref2.siblingRange,
	      totalPages = _ref2.totalPages;
	  return {
	    activePage: +activePage,
	    boundaryRange: +boundaryRange,
	    hideEllipsis: !!hideEllipsis,
	    siblingRange: +siblingRange,
	    totalPages: +totalPages
	  };
	};

	/**
	 * @param {object} rawOptions
	 * @param {number|string} rawOptions.activePage
	 * @param {number|string} rawOptions.boundaryRange Number of always visible pages at the beginning and end.
	 * @param {boolean} rawOptions.hideEllipsis Marks if ellipsis should be hidden.
	 * @param {number|string} rawOptions.siblingRange Number of always visible pages before and after the current one.
	 * @param {number|string} rawOptions.totalPages Total number of pages.
	 */

	var createPaginationItems = function createPaginationItems(rawOptions) {
	  var options = typifyOptions(rawOptions);
	  var activePage = options.activePage,
	      totalPages = options.totalPages;
	  var pageFactory = createPageFactory(activePage);
	  var innerRange = isSimplePagination(options) ? createSimpleRange(1, totalPages, pageFactory) : createComplexRange(options, pageFactory);
	  return [createFirstPage(), createPrevItem(activePage)].concat(toConsumableArray$1(innerRange), [createNextItem(activePage, totalPages), createLastItem(totalPages)]);
	};

	var COLORS = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey', 'black'];
	var FLOATS = ['left', 'right'];
	var SIZES = ['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive'];
	var TEXT_ALIGNMENTS = ['left', 'center', 'right', 'justified'];
	var VERTICAL_ALIGNMENTS = ['bottom', 'middle', 'top'];
	var VISIBILITY = ['mobile', 'tablet', 'computer', 'large screen', 'widescreen'];
	var WIDTHS = [].concat(toConsumableArray$1(lodash.keys(numberToWordMap)), toConsumableArray$1(lodash.keys(numberToWordMap).map(Number)), toConsumableArray$1(lodash.values(numberToWordMap)));
	var DIRECTIONAL_TRANSITIONS = ['browse', 'browse right', 'drop', 'fade', 'fade up', 'fade down', 'fade left', 'fade right', 'fly up', 'fly down', 'fly left', 'fly right', 'horizontal flip', 'vertical flip', 'scale', 'slide up', 'slide down', 'slide left', 'slide right', 'swing up', 'swing down', 'swing left', 'swing right', 'zoom'];
	var STATIC_TRANSITIONS = ['jiggle', 'flash', 'shake', 'pulse', 'tada', 'bounce', 'glow'];
	var TRANSITIONS = [].concat(DIRECTIONAL_TRANSITIONS, STATIC_TRANSITIONS); // Generated from:
	// https://github.com/Semantic-Org/Semantic-UI/blob/master/dist/components/icon.css

	var ACCESSIBILITY = ['american sign language interpreting', 'assistive listening systems', 'audio description', 'blind', 'braille', 'closed captioning', 'closed captioning outline', 'deaf', 'low vision', 'phone volume', 'question circle', 'question circle outline', 'sign language', 'tty', 'universal access', 'wheelchair'];
	var ARROWS = ['angle double down', 'angle double left', 'angle double right', 'angle double up', 'angle down', 'angle left', 'angle right', 'angle up', 'arrow alternate circle down', 'arrow alternate circle down outline', 'arrow alternate circle left', 'arrow alternate circle left outline', 'arrow alternate circle right', 'arrow alternate circle right outline', 'arrow alternate circle up', 'arrow alternate circle up outline', 'arrow circle down', 'arrow circle left', 'arrow circle right', 'arrow circle up', 'arrow down', 'arrow left', 'arrow right', 'arrow up', 'arrows alternate', 'arrows alternate horizontal', 'arrows alternate vertical', 'caret down', 'caret left', 'caret right', 'caret square down', 'caret square down outline', 'caret square left', 'caret square left outline', 'caret square right', 'caret square right outline', 'caret square up', 'caret square up outline', 'caret up', 'cart arrow down', 'chart line', 'chevron circle down', 'chevron circle left', 'chevron circle right', 'chevron circle up', 'chevron down', 'chevron left', 'chevron right', 'chevron up', 'cloud download', 'cloud upload', 'download', 'exchange', 'expand arrows alternate', 'external alternate', 'external square alternate', 'hand point down', 'hand point down outline', 'hand point left', 'hand point left outline', 'hand point right', 'hand point right outline', 'hand point up', 'hand point up outline', 'hand pointer', 'hand pointer outline', 'history', 'level down alternate', 'level up alternate', 'location arrow', 'long arrow alternate down', 'long arrow alternate left', 'long arrow alternate right', 'long arrow alternate up', 'mouse pointer', 'play', 'random', 'recycle', 'redo', 'redo alternate', 'reply', 'reply all', 'retweet', 'share', 'share square', 'share square outline', 'sign-in', 'sign-out', 'sign-in alternate', 'sign-out alternate', 'sort', 'sort alphabet down', 'sort alphabet up', 'sort amount down', 'sort amount up', 'sort down', 'sort numeric down', 'sort numeric up', 'sort up', 'sync', 'sync alternate', 'text height', 'text width', 'undo', 'undo alternate', 'upload', 'zoom-in', 'zoom-out'];
	var AUDIO_VIDEO = ['audio description', 'backward', 'circle', 'circle outline', 'closed captioning', 'closed captioning outline', 'compress', 'eject', 'expand', 'expand arrows alternate', 'fast backward', 'fast forward', 'file audio', 'file audio outline', 'file video', 'file video outline', 'film', 'forward', 'headphones', 'microphone', 'microphone slash', 'music', 'pause', 'pause circle', 'pause circle outline', 'phone volume', 'play', 'play circle', 'play circle outline', 'podcast', 'random', 'redo', 'redo alternate', 'rss', 'rss square', 'step backward', 'step forward', 'stop', 'stop circle', 'stop circle outline', 'sync', 'sync alternate', 'undo', 'undo alternate', 'video', 'volume down', 'volume off', 'volume up'];
	var BUSINESS = ['address book', 'address book outline', 'address card', 'address card outline', 'archive', 'balance scale', 'birthday cake', 'book', 'briefcase', 'building', 'building outline', 'bullhorn', 'bullseye', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'certificate', 'chart area', 'chart bar', 'chart bar outline', 'chart line', 'chart pie', 'clipboard', 'clipboard outline', 'coffee', 'columns', 'compass', 'compass outline', 'copy', 'copy outline', 'copyright', 'copyright outline', 'cut', 'edit', 'edit outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'envelope square', 'eraser', 'fax', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'globe', 'industry', 'paperclip', 'paste', 'pen square', 'pencil alternate', 'percent', 'phone', 'phone square', 'phone volume', 'registered', 'registered outline', 'save', 'save outline', 'sitemap', 'sticky note', 'sticky note outline', 'suitcase', 'table', 'tag', 'tags', 'tasks', 'thumbtack', 'trademark'];
	var CHESS = ['chess', 'chess bishop', 'chess board', 'chess king', 'chess knight', 'chess pawn', 'chess queen', 'chess rook', 'square full'];
	var CODE = ['archive', 'barcode', 'bath', 'bug', 'code', 'code branch', 'coffee', 'file', 'file outline', 'file alternate', 'file alternate outline', 'file code', 'file code outline', 'filter', 'fire extinguisher', 'folder', 'folder outline', 'folder open', 'folder open outline', 'keyboard', 'keyboard outline', 'microchip', 'qrcode', 'shield alternate', 'sitemap', 'terminal', 'user secret', 'window close', 'window close outline', 'window maximize', 'window maximize outline', 'window minimize', 'window minimize outline', 'window restore', 'window restore outline'];
	var COMMUNICATION = ['address book', 'address book outline', 'address card', 'address card outline', 'american sign language interpreting', 'assistive listening systems', 'at', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bullhorn', 'comment', 'comment outline', 'comment alternate', 'comment alternate outline', 'comments', 'comments outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'envelope square', 'fax', 'inbox', 'language', 'microphone', 'microphone slash', 'mobile', 'mobile alternate', 'paper plane', 'paper plane outline', 'phone', 'phone square', 'phone volume', 'rss', 'rss square', 'tty', 'wifi'];
	var COMPUTERS = ['desktop', 'download', 'hdd', 'hdd outline', 'headphones', 'keyboard', 'keyboard outline', 'laptop', 'microchip', 'mobile', 'mobile alternate', 'plug', 'power off', 'print', 'save', 'save outline', 'server', 'tablet', 'tablet alternate', 'tv', 'upload'];
	var CURRENCY = ['dollar sign', 'euro sign', 'lira sign', 'money bill alternate', 'money bill alternate outline', 'pound sign', 'ruble sign', 'rupee sign', 'shekel sign', 'won sign', 'yen sign'];
	var DATE_TIME = ['bell', 'bell outline', 'bell slash', 'bell slash outline', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'clock', 'clock outline', 'hourglass', 'hourglass outline', 'hourglass end', 'hourglass half', 'hourglass start', 'stopwatch'];
	var DESIGN = ['adjust', 'clone', 'clone outline', 'copy', 'copy outline', 'crop', 'crosshairs', 'cut', 'edit', 'edit outline', 'eraser', 'eye', 'eye dropper', 'eye slash', 'eye slash outline', 'object group', 'object group outline', 'object ungroup', 'object ungroup outline', 'paint brush', 'paste', 'pencil alternate', 'save', 'save outline', 'tint'];
	var EDITORS = ['align center', 'align justify', 'align left', 'align right', 'bold', 'clipboard', 'clipboard outline', 'clone', 'clone outline', 'columns', 'copy', 'copy outline', 'cut', 'edit', 'edit outline', 'eraser', 'file', 'file outline', 'file alternate', 'file alternate outline', 'font', 'heading', 'i cursor', 'indent', 'italic', 'linkify', 'list', 'list alternate', 'list alternate outline', 'list ol', 'list ul', 'outdent', 'paper plane', 'paper plane outline', 'paperclip', 'paragraph', 'paste', 'pencil alternate', 'print', 'quote left', 'quote right', 'redo', 'redo alternate', 'reply', 'reply all', 'share', 'strikethrough', 'subscript', 'superscript', 'sync', 'sync alternate', 'table', 'tasks', 'text height', 'text width', 'th', 'th large', 'th list', 'trash', 'trash alternate', 'trash alternate outline', 'underline', 'undo', 'undo alternate', 'unlink'];
	var FILES = ['archive', 'clone', 'clone outline', 'copy', 'copy outline', 'cut', 'file', 'file outline', 'file alternate', 'file alternate outline', 'file archive', 'file archive outline', 'file audio', 'file audio outline', 'file code', 'file code outline', 'file excel', 'file excel outline', 'file image', 'file image outline', 'file pdf', 'file pdf outline', 'file powerpoint', 'file powerpoint outline', 'file video', 'file video outline', 'file word', 'file word outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'paste', 'save', 'save outline', 'sticky note', 'sticky note outline'];
	var GENDERS = ['genderless', 'mars', 'mars double', 'mars stroke', 'mars stroke horizontal', 'mars stroke vertical', 'mercury', 'neuter', 'transgender', 'transgender alternate', 'venus', 'venus double', 'venus mars'];
	var HANDS_GESTURES = ['hand lizard', 'hand lizard outline', 'hand paper', 'hand paper outline', 'hand peace', 'hand peace outline', 'hand point down', 'hand point down outline', 'hand point left', 'hand point left outline', 'hand point right', 'hand point right outline', 'hand point up', 'hand point up outline', 'hand pointer', 'hand pointer outline', 'hand rock', 'hand rock outline', 'hand scissors', 'hand scissors outline', 'hand spock', 'hand spock outline', 'handshake', 'handshake outline', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline'];
	var HEALTH = ['ambulance', 'h square', 'heart', 'heart outline', 'heartbeat', 'hospital', 'hospital outline', 'medkit', 'plus square', 'plus square outline', 'stethoscope', 'user md', 'wheelchair'];
	var IMAGES = ['adjust', 'bolt', 'camera', 'camera retro', 'clone', 'clone outline', 'compress', 'expand', 'eye', 'eye dropper', 'eye slash', 'eye slash outline', 'file image', 'file image outline', 'film', 'id badge', 'id badge outline', 'id card', 'id card outline', 'image', 'image outline', 'images', 'images outline', 'sliders horizontal', 'tint'];
	var INTERFACES = ['ban', 'barcode', 'bars', 'beer', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bug', 'bullhorn', 'bullseye', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'certificate', 'check', 'check circle', 'check circle outline', 'check square', 'check square outline', 'circle', 'circle outline', 'clipboard', 'clipboard outline', 'clone', 'clone outline', 'cloud', 'cloud download', 'cloud upload', 'coffee', 'cog', 'cogs', 'copy', 'copy outline', 'cut', 'database', 'dot circle', 'dot circle outline', 'download', 'edit', 'edit outline', 'ellipsis horizontal', 'ellipsis vertical', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'exclamation', 'exclamation circle', 'exclamation triangle', 'external alternate', 'external square alternate', 'eye', 'eye slash', 'eye slash outline', 'file', 'file outline', 'file alternate', 'file alternate outline', 'filter', 'flag', 'flag outline', 'flag checkered', 'folder', 'folder outline', 'folder open', 'folder open outline', 'frown', 'frown outline', 'hashtag', 'heart', 'heart outline', 'history', 'home', 'i cursor', 'info', 'info circle', 'language', 'magic', 'meh', 'meh outline', 'microphone', 'microphone slash', 'minus', 'minus circle', 'minus square', 'minus square outline', 'paste', 'pencil alternate', 'plus', 'plus circle', 'plus square', 'plus square outline', 'qrcode', 'question', 'question circle', 'question circle outline', 'quote left', 'quote right', 'redo', 'redo alternate', 'reply', 'reply all', 'rss', 'rss square', 'save', 'save outline', 'search', 'search minus', 'search plus', 'share', 'share alternate', 'share alternate square', 'share square', 'share square outline', 'shield alternate', 'sign-in', 'sign-out', 'signal', 'sitemap', 'sliders horizontal', 'smile', 'smile outline', 'sort', 'sort alphabet down', 'sort alphabet up', 'sort amount down', 'sort amount up', 'sort down', 'sort numeric down', 'sort numeric up', 'sort up', 'star', 'star outline', 'star half', 'star half outline', 'sync', 'sync alternate', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'times', 'times circle', 'times circle outline', 'toggle off', 'toggle on', 'trash', 'trash alternate', 'trash alternate outline', 'trophy', 'undo', 'undo alternate', 'upload', 'user', 'user outline', 'user circle', 'user circle outline', 'wifi'];
	var LOGISTICS = ['box', 'boxes', 'clipboard check', 'clipboard list', 'dolly', 'dolly flatbed', 'pallet', 'shipping fast', 'truck', 'warehouse'];
	var MAPS = ['ambulance', 'anchor', 'balance scale', 'bath', 'bed', 'beer', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bicycle', 'binoculars', 'birthday cake', 'blind', 'bomb', 'book', 'bookmark', 'bookmark outline', 'briefcase', 'building', 'building outline', 'car', 'coffee', 'crosshairs', 'dollar sign', 'eye', 'eye slash', 'eye slash outline', 'fighter jet', 'fire', 'fire extinguisher', 'flag', 'flag outline', 'flag checkered', 'flask', 'gamepad', 'gavel', 'gift', 'glass martini', 'globe', 'graduation cap', 'h square', 'heart', 'heart outline', 'heartbeat', 'home', 'hospital', 'hospital outline', 'image', 'image outline', 'images', 'images outline', 'industry', 'info', 'info circle', 'key', 'leaf', 'lemon', 'lemon outline', 'life ring', 'life ring outline', 'lightbulb', 'lightbulb outline', 'location arrow', 'low vision', 'magnet', 'male', 'map', 'map outline', 'map marker', 'map marker alternate', 'map pin', 'map signs', 'medkit', 'money bill alternate', 'money bill alternate outline', 'motorcycle', 'music', 'newspaper', 'newspaper outline', 'paw', 'phone', 'phone square', 'phone volume', 'plane', 'plug', 'plus', 'plus square', 'plus square outline', 'print', 'recycle', 'road', 'rocket', 'search', 'search minus', 'search plus', 'ship', 'shopping bag', 'shopping basket', 'shopping cart', 'shower', 'street view', 'subway', 'suitcase', 'tag', 'tags', 'taxi', 'thumbtack', 'ticket alternate', 'tint', 'train', 'tree', 'trophy', 'truck', 'tty', 'umbrella', 'university', 'utensil spoon', 'utensils', 'wheelchair', 'wifi', 'wrench'];
	var MEDICAL = ['ambulance', 'band aid', 'dna', 'first aid', 'heart', 'heart outline', 'heartbeat', 'hospital', 'hospital outline', 'hospital symbol', 'pills', 'plus', 'stethoscope', 'syringe', 'thermometer', 'user md', 'weight'];
	var OBJECTS = ['ambulance', 'anchor', 'archive', 'balance scale', 'bath', 'bed', 'beer', 'bell', 'bell outline', 'bicycle', 'binoculars', 'birthday cake', 'bomb', 'book', 'bookmark', 'bookmark outline', 'briefcase', 'bug', 'building', 'building outline', 'bullhorn', 'bullseye', 'bus', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'camera', 'camera retro', 'car', 'clipboard', 'clipboard outline', 'cloud', 'coffee', 'cog', 'cogs', 'compass', 'compass outline', 'copy', 'copy outline', 'cube', 'cubes', 'cut', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'eye', 'eye dropper', 'fax', 'fighter jet', 'file', 'file outline', 'file alternate', 'file alternate outline', 'film', 'fire', 'fire extinguisher', 'flag', 'flag outline', 'flag checkered', 'flask', 'futbol', 'futbol outline', 'gamepad', 'gavel', 'gem', 'gem outline', 'gift', 'glass martini', 'globe', 'graduation cap', 'hdd', 'hdd outline', 'headphones', 'heart', 'heart outline', 'home', 'hospital', 'hospital outline', 'hourglass', 'hourglass outline', 'image', 'image outline', 'images', 'images outline', 'industry', 'key', 'keyboard', 'keyboard outline', 'laptop', 'leaf', 'lemon', 'lemon outline', 'life ring', 'life ring outline', 'lightbulb', 'lightbulb outline', 'lock', 'lock open', 'magic', 'magnet', 'map', 'map outline', 'map marker', 'map marker alternate', 'map pin', 'map signs', 'medkit', 'microchip', 'microphone', 'mobile', 'mobile alternate', 'money bill alternate', 'money bill alternate outline', 'moon', 'moon outline', 'motorcycle', 'newspaper', 'newspaper outline', 'paint brush', 'paper plane', 'paper plane outline', 'paperclip', 'paste', 'paw', 'pencil alternate', 'phone', 'plane', 'plug', 'print', 'puzzle piece', 'road', 'rocket', 'save', 'save outline', 'search', 'shield alternate', 'shopping bag', 'shopping basket', 'shopping cart', 'shower', 'snowflake', 'snowflake outline', 'space shuttle', 'star', 'star outline', 'sticky note', 'sticky note outline', 'stopwatch', 'subway', 'suitcase', 'sun', 'sun outline', 'tablet', 'tablet alternate', 'tachometer alternate', 'tag', 'tags', 'taxi', 'thumbtack', 'ticket alternate', 'train', 'trash', 'trash alternate', 'trash alternate outline', 'tree', 'trophy', 'truck', 'tv', 'umbrella', 'university', 'unlock', 'unlock alternate', 'utensil spoon', 'utensils', 'wheelchair', 'wrench'];
	var PAYMENTS_SHOPPING = ['bell', 'bell outline', 'bookmark', 'bookmark outline', 'bullhorn', 'camera', 'camera retro', 'cart arrow down', 'cart plus', 'certificate', 'credit card', 'credit card outline', 'gem', 'gem outline', 'gift', 'handshake', 'handshake outline', 'heart', 'heart outline', 'key', 'shopping bag', 'shopping basket', 'shopping cart', 'star', 'star outline', 'tag', 'tags', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'trophy'];
	var SHAPES = ['bookmark', 'bookmark outline', 'calendar', 'calendar outline', 'certificate', 'circle', 'circle outline', 'cloud', 'comment', 'comment outline', 'file', 'file outline', 'folder', 'folder outline', 'heart', 'heart outline', 'map marker', 'play', 'square', 'square outline', 'star', 'star outline'];
	var SPINNERS = ['asterisk', 'certificate', 'circle notch', 'cog', 'compass', 'compass outline', 'crosshairs', 'life ring', 'life ring outline', 'snowflake', 'snowflake outline', 'spinner', 'sun', 'sun outline', 'sync'];
	var SPORTS = ['baseball ball', 'basketball ball', 'bowling ball', 'football ball', 'futbol', 'futbol outline', 'golf ball', 'hockey puck', 'quidditch', 'table tennis', 'volleyball ball'];
	var STATUS = ['ban', 'battery empty', 'battery full', 'battery half', 'battery quarter', 'battery three quarters', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'cart arrow down', 'cart plus', 'exclamation', 'exclamation circle', 'exclamation triangle', 'eye', 'eye slash', 'eye slash outline', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'info', 'info circle', 'lock', 'lock open', 'minus', 'minus circle', 'minus square', 'minus square outline', 'plus', 'plus circle', 'plus square', 'plus square outline', 'question', 'question circle', 'question circle outline', 'shield alternate', 'shopping cart', 'sign in alternate', 'sign out alternate', 'thermometer empty', 'thermometer full', 'thermometer half', 'thermometer quarter', 'thermometer three quarters', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'toggle off', 'toggle on', 'unlock', 'unlock alternate'];
	var USERS_PEOPLE = ['address book', 'address book outline', 'address card', 'address card outline', 'bed', 'blind', 'child', 'female', 'frown', 'frown outline', 'id badge', 'id badge outline', 'id card', 'id card outline', 'male', 'meh', 'meh outline', 'power off', 'smile', 'smile outline', 'street view', 'user', 'user outline', 'user circle', 'user circle outline', 'user md', 'user plus', 'user secret', 'user times', 'users', 'wheelchair'];
	var VEHICLES = ['ambulance', 'bicycle', 'bus', 'car', 'fighter jet', 'motorcycle', 'paper plane', 'paper plane outline', 'plane', 'rocket', 'ship', 'shopping cart', 'space shuttle', 'subway', 'taxi', 'train', 'truck', 'wheelchair'];
	var WRITING = ['archive', 'book', 'bookmark', 'bookmark outline', 'edit', 'edit outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'keyboard', 'keyboard outline', 'newspaper', 'newspaper outline', 'paper plane', 'paper plane outline', 'paperclip', 'paragraph', 'pen square', 'pencil alternate', 'quote left', 'quote right', 'sticky note', 'sticky note outline', 'thumbtack'];
	var BRANDS = ['500px', 'accessible', 'accusoft', 'adn', 'adversal', 'affiliatetheme', 'algolia', 'amazon', 'amazon pay', 'amilia', 'android', 'angellist', 'angrycreative', 'angular', 'app store', 'app store ios', 'apper', 'apple', 'apple pay', 'asymmetrik', 'audible', 'autoprefixer', 'avianex', 'aviato', 'aws', 'bandcamp', 'behance', 'behance square', 'bimobject', 'bitbucket', 'bitcoin', 'bity', 'black tie', 'blackberry', 'blogger', 'blogger b', 'bluetooth', 'bluetooth b', 'btc', 'buromobelexperte', 'buysellads', 'cc amazon pay', 'cc amex', 'cc apple pay', 'cc diners club', 'cc discover', 'cc jcb', 'cc mastercard', 'cc paypal', 'cc stripe', 'cc visa', 'centercode', 'chrome', 'cloudscale', 'cloudsmith', 'cloudversify', 'codepen', 'codiepie', 'connectdevelop', 'contao', 'cpanel', 'creative commons', 'css3', 'css3 alternate', 'cuttlefish', 'd and d', 'dashcube', 'delicious', 'deploydog', 'deskpro', 'deviantart', 'digg', 'digital ocean', 'discord', 'discourse', 'dochub', 'docker', 'draft2digital', 'dribbble', 'dribbble square', 'dropbox', 'drupal', 'dyalog', 'earlybirds', 'edge', 'elementor', 'ember', 'empire', 'envira', 'erlang', 'ethereum', 'etsy', 'expeditedssl', 'facebook', 'facebook f', 'facebook messenger', 'facebook square', 'firefox', 'first order', 'firstdraft', 'flickr', 'flipboard', 'fly', 'font awesome', 'font awesome alternate', 'font awesome flag', 'fonticons', 'fonticons fi', 'fort awesome', 'fort awesome alternate', 'forumbee', 'foursquare', 'free code camp', 'freebsd', 'get pocket', 'gg', 'gg circle', 'git', 'git square', 'github', 'github alternate', 'github square', 'gitkraken', 'gitlab', 'gitter', 'glide', 'glide g', 'gofore', 'goodreads', 'goodreads g', 'google', 'google drive', 'google play', 'google plus', 'google plus g', 'google plus square', 'google wallet', 'gratipay', 'grav', 'gripfire', 'grunt', 'gulp', 'hacker news', 'hacker news square', 'hips', 'hire a helper', 'hooli', 'hotjar', 'houzz', 'html5', 'hubspot', 'imdb', 'instagram', 'internet explorer', 'ioxhost', 'itunes', 'itunes note', 'jenkins', 'joget', 'joomla', 'js', 'js square', 'jsfiddle', 'keycdn', 'kickstarter', 'kickstarter k', 'korvue', 'laravel', 'lastfm', 'lastfm square', 'leanpub', 'less', 'linechat', 'linkedin', 'linkedin alternate', 'linode', 'linux', 'lyft', 'magento', 'maxcdn', 'medapps', 'medium', 'medium m', 'medrt', 'meetup', 'microsoft', 'mix', 'mixcloud', 'mizuni', 'modx', 'monero', 'napster', 'nintendo switch', 'node', 'node js', 'npm', 'ns8', 'nutritionix', 'odnoklassniki', 'odnoklassniki square', 'opencart', 'openid', 'opera', 'optin monster', 'osi', 'page4', 'pagelines', 'palfed', 'patreon', 'paypal', 'periscope', 'phabricator', 'phoenix framework', 'php', 'pied piper', 'pied piper alternate', 'pied piper pp', 'pinterest', 'pinterest p', 'pinterest square', 'playstation', 'product hunt', 'pushed', 'python', 'qq', 'quinscape', 'quora', 'ravelry', 'react', 'rebel', 'redriver', 'reddit', 'reddit alien', 'reddit square', 'rendact', 'renren', 'replyd', 'resolving', 'rocketchat', 'rockrms', 'safari', 'sass', 'schlix', 'scribd', 'searchengin', 'sellcast', 'sellsy', 'servicestack', 'shirtsinbulk', 'simplybuilt', 'sistrix', 'skyatlas', 'skype', 'slack', 'slack hash', 'slideshare', 'snapchat', 'snapchat ghost', 'snapchat square', 'soundcloud', 'speakap', 'spotify', 'stack exchange', 'stack overflow', 'staylinked', 'steam', 'steam square', 'steam symbol', 'sticker mule', 'strava', 'stripe', 'stripe s', 'studiovinari', 'stumbleupon', 'stumbleupon circle', 'superpowers', 'supple', 'telegram', 'telegram plane', 'tencent weibo', 'themeisle', 'trello', 'tripadvisor', 'tumblr', 'tumblr square', 'twitch', 'twitter', 'twitter square', 'typo3', 'uber', 'uikit', 'uniregistry', 'untappd', 'usb', 'ussunnah', 'vaadin', 'viacoin', 'viadeo', 'viadeo square', 'viber', 'vimeo', 'vimeo square', 'vimeo v', 'vine', 'vk', 'vnv', 'vuejs', 'wechat', 'weibo', 'weixin', 'whatsapp', 'whatsapp square', 'whmcs', 'wikipedia w', 'windows', 'wordpress', 'wordpress simple', 'wpbeginner', 'wpexplorer', 'wpforms', 'xbox', 'xing', 'xing square', 'y combinator', 'yahoo', 'yandex', 'yandex international', 'yelp', 'yoast', 'youtube', 'youtube square'];
	var ICONS = lodash.uniq([].concat(ACCESSIBILITY, ARROWS, AUDIO_VIDEO, BUSINESS, CHESS, CODE, COMMUNICATION, COMPUTERS, CURRENCY, DATE_TIME, DESIGN, EDITORS, FILES, GENDERS, HANDS_GESTURES, HEALTH, IMAGES, INTERFACES, LOGISTICS, MAPS, MEDICAL, OBJECTS, PAYMENTS_SHOPPING, SHAPES, SPINNERS, SPORTS, STATUS, USERS_PEOPLE, VEHICLES, WRITING, BRANDS));
	var ICON_ALIASES = ['chess rock', 'ordered list', 'unordered list', 'user doctor', 'shield', 'puzzle', 'add circle', 'add square', 'add to calendar', 'add to cart', 'add user', 'add', 'alarm mute', 'alarm', 'ald', 'als', 'announcement', 'area chart', 'area graph', 'arrow down cart', 'asexual', 'asl interpreting', 'asl', 'assistive listening devices', 'attach', 'attention', 'balance', 'bar', 'bathtub', 'battery four', 'battery high', 'battery low', 'battery one', 'battery three', 'battery two', 'battery zero', 'birthday', 'block layout', 'bluetooth alternative', 'broken chain', 'browser', 'call square', 'call', 'cancel', 'cart', 'cc', 'chain', 'chat', 'checked calendar', 'checkmark', 'circle notched', 'close', 'cny', 'cocktail', 'commenting', 'computer', 'configure', 'content', 'deafness', 'delete calendar', 'delete', 'detective', 'discussions', 'doctor', 'dollar', 'dont', 'drivers license', 'dropdown', 'emergency', 'envira gallery', 'erase', 'eur', 'euro', 'eyedropper', 'factory', 'favorite', 'feed', 'female homosexual', 'file text', 'file text outline', 'find', 'first aid', 'fork', 'game', 'gay', 'gbp', 'google plus circle', 'google plus official', 'grab', 'graduation', 'grid layout', 'group', 'h', 'hand victory', 'handicap', 'hard of hearing', 'header', 'help circle', 'help', 'heterosexual', 'hide', 'hotel', 'hourglass four', 'hourglass full', 'hourglass one', 'hourglass three', 'hourglass two', 'idea', 'ils', 'in cart', 'inr', 'intergender', 'intersex', 'jpy', 'krw', 'lab', 'law', 'legal', 'lesbian', 'lightning', 'like', 'line graph', 'linkedin square', 'linkify', 'lira', 'list layout', 'magnify', 'mail forward', 'mail outline', 'mail square', 'mail', 'male homosexual', 'man', 'marker', 'mars alternate', 'mars horizontal', 'mars vertical', 'microsoft edge', 'military', 'ms edge', 'mute', 'new pied piper', 'non binary transgender', 'numbered list', 'options', 'other gender horizontal', 'other gender vertical', 'other gender', 'payment', 'paypal card', 'pencil square', 'photo', 'picture', 'pie chart', 'pie graph', 'pied piper hat', 'pin', 'plus cart', 'point', 'pointing down', 'pointing left', 'pointing right', 'pointing up', 'pound', 'power cord', 'power', 'privacy', 'r circle', 'rain', 'record', 'refresh', 'remove circle', 'remove from calendar', 'remove user', 'remove', 'repeat', 'rmb', 'rouble', 'rub', 'ruble', 'rupee', 's15', 'selected radio', 'send', 'setting', 'settings', 'shekel', 'sheqel', 'shipping', 'shop', 'shuffle', 'shutdown', 'sidebar', 'signing', 'signup', 'sliders', 'soccer', 'sort alphabet ascending', 'sort alphabet descending', 'sort ascending', 'sort content ascending', 'sort content descending', 'sort descending', 'sort numeric ascending', 'sort numeric descending', 'sound', 'spy', 'stripe card', 'student', 'talk', 'target', 'teletype', 'television', 'text cursor', 'text telephone', 'theme', 'thermometer', 'thumb tack', 'time', 'tm', 'toggle down', 'toggle left', 'toggle right', 'toggle up', 'translate', 'travel', 'treatment', 'triangle down', 'triangle left', 'triangle right', 'triangle up', 'try', 'unhide', 'unlinkify', 'unmute', 'usd', 'user cancel', 'user close', 'user delete', 'user x', 'vcard', 'video camera', 'video play', 'volume control phone', 'wait', 'warning circle', 'warning sign', 'warning', 'wi-fi', 'winner', 'wizard', 'woman', 'won', 'wordpress beginner', 'wordpress forms', 'world', 'write square', 'x', 'yen', 'zip', 'zoom in', 'zoom out', 'zoom', 'bitbucket square', 'checkmark box', 'circle thin', 'cloud download', 'cloud upload', 'compose', 'conversation', 'credit card alternative', 'currency', 'dashboard', 'diamond', 'disk', 'exchange', 'external share', 'external square', 'external', 'facebook official', 'food', 'hourglass zero', 'level down', 'level up', 'log out', 'meanpath', 'money', 'move', 'pencil', 'protect', 'radio', 'remove bookmark', 'resize horizontal', 'resize vertical', 'sign in', 'sign out', 'spoon', 'star half empty', 'star half full', 'ticket', 'times rectangle', 'write', 'youtube play'];
	var ICONS_AND_ALIASES = lodash.uniq([].concat(toConsumableArray$1(ICONS), ICON_ALIASES)); // Some icon names are not part of icons.css.
	// These are only valid as children of other components.
	// Their CSS rules are defined by a specific component's CSS.
	// We don't want to show name warnings for those usages so we add them as valid names here.

	var COMPONENT_CONTEXT_SPECIFIC_ICONS = ['left dropdown'];
	var ALL_ICONS_IN_ALL_CONTEXTS = lodash.uniq([].concat(toConsumableArray$1(ICONS_AND_ALIASES), COMPONENT_CONTEXT_SPECIFIC_ICONS));

	/**
	 * Normalizes the offset value.
	 * @param {number|array} value The value to normalize.
	 * @returns {number}
	 */
	var normalizeOffset = (function (value) {
	  return typeof value === 'number' || typeof value === 'string' ? [value, value] : value;
	});

	/**
	 * Normalizes the duration of a transition.
	 * @param {number|object} duration The value to normalize.
	 * @param {'hide'|'show'} type The type of transition.
	 * @returns {number}
	 */
	var normalizeTransitionDuration = (function (duration, type) {
	  return typeof duration === 'number' || typeof duration === 'string' ? duration : duration[type];
	});

	/**
	 * Naive and inefficient object difference, intended for development / debugging use only.
	 * Deleted keys are shown as [DELETED].
	 * @param {{}} source The source object
	 * @param {{}} target The target object.
	 * @returns {{}} A new object containing new/modified/deleted keys.
	 * @example
	 * import { objectDiff } from 'src/lib'
	 *
	 * const a = { key: 'val', foo: 'bar' }
	 * const b = { key: 'val', foo: 'baz' }
	 *
	 * objectDiff(a, b)
	 * //=> { foo: 'baz' }
	 */

	var objectDiff = (function (source, target) {
	  return lodash.transform(source, function (res, val, key) {
	    // deleted keys
	    if (!lodash.has(target, key)) res[key] = '[DELETED]'; // new keys / changed values
	    // Note, we tolerate isEqual here as this is a dev only utility and not included in production code
	    else if (!lodash.isEqual(val, target[key])) res[key] = target[key];
	  }, {});
	});

	/**
	 * The function that correctly handles passing refs.
	 *
	 * @param {Function|Object} ref An ref object or function
	 * @param {HTMLElement} node A node that should be passed by ref
	 */
	var handleRef = function handleRef(ref, node) {

	  if (typeof ref === 'function') {
	    ref(node);
	    return;
	  }

	  if (ref !== null && _typeof_1(ref) === 'object') {
	    // The `current` property is defined as readonly, however it's a valid way because `ref` is a mutable object
	    // eslint-disable-next-line no-param-reassign
	    ref.current = node;
	  }
	};
	var isRefObject$1 = function isRefObject(ref) {
	  return (// https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665
	    // eslint-disable-next-line
	    ref !== null && _typeof_1(ref) === 'object' && ref.hasOwnProperty('current')
	  );
	};

	/** @license React v16.8.6
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	Object.defineProperty(exports, "__esModule", {
	  value: !0
	});
	var b = "function" === typeof Symbol && Symbol.for,
	    c = b ? Symbol.for("react.element") : 60103,
	    d = b ? Symbol.for("react.portal") : 60106,
	    e = b ? Symbol.for("react.fragment") : 60107,
	    f = b ? Symbol.for("react.strict_mode") : 60108,
	    g = b ? Symbol.for("react.profiler") : 60114,
	    h = b ? Symbol.for("react.provider") : 60109,
	    k = b ? Symbol.for("react.context") : 60110,
	    l = b ? Symbol.for("react.async_mode") : 60111,
	    m = b ? Symbol.for("react.concurrent_mode") : 60111,
	    n = b ? Symbol.for("react.forward_ref") : 60112,
	    p = b ? Symbol.for("react.suspense") : 60113,
	    q = b ? Symbol.for("react.memo") : 60115,
	    r = b ? Symbol.for("react.lazy") : 60116;

	function t(a) {
	  if ("object" === _typeof_1$1(a) && null !== a) {
	    var u = a.$$typeof;

	    switch (u) {
	      case c:
	        switch (a = a.type, a) {
	          case l:
	          case m:
	          case e:
	          case g:
	          case f:
	          case p:
	            return a;

	          default:
	            switch (a = a && a.$$typeof, a) {
	              case k:
	              case n:
	              case h:
	                return a;

	              default:
	                return u;
	            }

	        }

	      case r:
	      case q:
	      case d:
	        return u;
	    }
	  }
	}

	function v(a) {
	  return t(a) === m;
	}

	exports.typeOf = t;
	exports.AsyncMode = l;
	exports.ConcurrentMode = m;
	exports.ContextConsumer = k;
	exports.ContextProvider = h;
	exports.Element = c;
	exports.ForwardRef = n;
	exports.Fragment = e;
	exports.Lazy = r;
	exports.Memo = q;
	exports.Portal = d;
	exports.Profiler = g;
	exports.StrictMode = f;
	exports.Suspense = p;

	exports.isValidElementType = function (a) {
	  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === _typeof_1$1(a) && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
	};

	exports.isAsyncMode = function (a) {
	  return v(a) || t(a) === l;
	};

	exports.isConcurrentMode = v;

	exports.isContextConsumer = function (a) {
	  return t(a) === k;
	};

	exports.isContextProvider = function (a) {
	  return t(a) === h;
	};

	exports.isElement = function (a) {
	  return "object" === _typeof_1$1(a) && null !== a && a.$$typeof === c;
	};

	exports.isForwardRef = function (a) {
	  return t(a) === n;
	};

	exports.isFragment = function (a) {
	  return t(a) === e;
	};

	exports.isLazy = function (a) {
	  return t(a) === r;
	};

	exports.isMemo = function (a) {
	  return t(a) === q;
	};

	exports.isPortal = function (a) {
	  return t(a) === d;
	};

	exports.isProfiler = function (a) {
	  return t(a) === g;
	};

	exports.isStrictMode = function (a) {
	  return t(a) === f;
	};

	exports.isSuspense = function (a) {
	  return t(a) === p;
	};

	var reactIs_production_min = /*#__PURE__*/Object.freeze({

	});

	var reactIs = createCommonjsModule(function (module) {

	{
	  module.exports = reactIs_production_min;
	}
	});
	var reactIs_1 = reactIs.isForwardRef;

	var RefFindNode =
	/*#__PURE__*/
	function (_Component) {
	  inherits(RefFindNode, _Component);

	  function RefFindNode() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, RefFindNode);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(RefFindNode)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "prevNode", null);

	    return _this;
	  }

	  createClass(RefFindNode, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      // eslint-disable-next-line react/no-find-dom-node
	      this.prevNode = reactDom.findDOMNode(this);
	      handleRef(this.props.innerRef, this.prevNode);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      // eslint-disable-next-line react/no-find-dom-node
	      var currentNode = reactDom.findDOMNode(this);

	      if (this.prevNode !== currentNode) {
	        this.prevNode = currentNode;
	        handleRef(this.props.innerRef, currentNode);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      handleRef(this.props.innerRef, null);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return children;
	    }
	  }]);

	  return RefFindNode;
	}(React.Component);

	defineProperty(RefFindNode, "propTypes", {
	  /** Primary content. */
	  children: propTypes.element.isRequired,

	  /**
	   * Called when a child component will be mounted or updated.
	   *
	   * @param {HTMLElement} node - Referred node.
	   */
	  innerRef: propTypes.oneOfType([propTypes.func, propTypes.object])
	});

	var RefForward =
	/*#__PURE__*/
	function (_Component) {
	  inherits(RefForward, _Component);

	  function RefForward() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, RefForward);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(RefForward)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleRefOverride", function (node) {
	      var _this$props = _this.props,
	          children = _this$props.children,
	          innerRef = _this$props.innerRef;
	      handleRef(children.ref, node);
	      handleRef(innerRef, node);
	    });

	    return _this;
	  }

	  createClass(RefForward, [{
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return React.cloneElement(children, {
	        ref: this.handleRefOverride
	      });
	    }
	  }]);

	  return RefForward;
	}(React.Component);

	defineProperty(RefForward, "propTypes", {
	  /** Primary content. */
	  children: propTypes_4.isRequired,

	  /**
	   * Called when a child component will be mounted or updated.
	   *
	   * @param {HTMLElement} node - Referred node.
	   */
	  innerRef: propTypes_3([propTypes_1, propTypes_2])
	});

	/**
	 * This component exposes a prop that supports functional and createRef() API and returns the DOM
	 * node of both functional and class component children.
	 */

	function Ref(props) {
	  var children = props.children,
	      innerRef = props.innerRef;
	  var child = React__default.Children.only(children);
	  var ElementType = reactIs_1(child) ? RefForward : RefFindNode;
	  return React__default.createElement(ElementType, {
	    innerRef: innerRef
	  }, child);
	}

	Ref.propTypes = {
	  /** Primary content. */
	  children: propTypes.element.isRequired,

	  /**
	   * Called when a child component will be mounted or updated.
	   *
	   * @param {HTMLElement} node - Referred node.
	   */
	  innerRef: propTypes.oneOfType([propTypes.func, propTypes.object])
	};
	Ref.FindNode = RefFindNode;
	Ref.Forward = RefForward;

	/**
	 * Several icons can be used together as a group.
	 */

	function IconGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      size$$1 = props.size;
	  var classes = classNames(size$$1, 'icons', className);
	  var rest$$1 = getUnhandledProps(IconGroup, props);
	  var ElementType = getElementType(IconGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	IconGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Size of the icon group. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium'))
	};
	IconGroup.defaultProps = {
	  as: 'i'
	};

	/**
	 * An icon is a glyph used to represent something else.
	 * @see Image
	 */

	var Icon =
	/*#__PURE__*/
	function (_PureComponent) {
	  inherits(Icon, _PureComponent);

	  function Icon() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Icon);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var disabled = _this.props.disabled;

	      if (disabled) {
	        e.preventDefault();
	        return;
	      }

	      lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(Icon, [{
	    key: "getIconAriaOptions",
	    value: function getIconAriaOptions() {
	      var ariaOptions = {};
	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          ariaHidden = _this$props['aria-hidden'];

	      if (lodash.isNil(ariaLabel)) {
	        ariaOptions['aria-hidden'] = 'true';
	      } else {
	        ariaOptions['aria-label'] = ariaLabel;
	      }

	      if (!lodash.isNil(ariaHidden)) {
	        ariaOptions['aria-hidden'] = ariaHidden;
	      }

	      return ariaOptions;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          bordered = _this$props2.bordered,
	          circular = _this$props2.circular,
	          className = _this$props2.className,
	          color = _this$props2.color,
	          corner = _this$props2.corner,
	          disabled = _this$props2.disabled,
	          fitted = _this$props2.fitted,
	          flipped = _this$props2.flipped,
	          inverted = _this$props2.inverted,
	          link = _this$props2.link,
	          loading = _this$props2.loading,
	          name = _this$props2.name,
	          rotated = _this$props2.rotated,
	          size$$1 = _this$props2.size;
	      var classes = classNames(color, name, size$$1, useKeyOnly(bordered, 'bordered'), useKeyOnly(circular, 'circular'), useKeyOnly(disabled, 'disabled'), useKeyOnly(fitted, 'fitted'), useKeyOnly(inverted, 'inverted'), useKeyOnly(link, 'link'), useKeyOnly(loading, 'loading'), useKeyOrValueAndKey(corner, 'corner'), useValueAndKey(flipped, 'flipped'), useValueAndKey(rotated, 'rotated'), 'icon', className);
	      var rest$$1 = getUnhandledProps(Icon, this.props);
	      var ElementType = getElementType(Icon, this.props);
	      var ariaOptions = this.getIconAriaOptions();
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, ariaOptions, {
	        className: classes,
	        onClick: this.handleClick
	      }));
	    }
	  }]);

	  return Icon;
	}(React.PureComponent);

	defineProperty(Icon, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Formatted to appear bordered. */
	  bordered: propTypes.bool,

	  /** Icon can formatted to appear circular. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Color of the icon. */
	  color: propTypes.oneOf(COLORS),

	  /** Icons can display a smaller corner icon. */
	  corner: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top left', 'top right', 'bottom left', 'bottom right'])]),

	  /** Show that the icon is inactive. */
	  disabled: propTypes.bool,

	  /** Fitted, without space to left or right of Icon. */
	  fitted: propTypes.bool,

	  /** Icon can flipped. */
	  flipped: propTypes.oneOf(['horizontally', 'vertically']),

	  /** Formatted to have its colors inverted for contrast. */
	  inverted: propTypes.bool,

	  /** Icon can be formatted as a link. */
	  link: propTypes.bool,

	  /** Icon can be used as a simple loader. */
	  loading: propTypes.bool,

	  /** Name of the icon. */
	  name: suggest(ALL_ICONS_IN_ALL_CONTEXTS),

	  /** Icon can rotated. */
	  rotated: propTypes.oneOf(['clockwise', 'counterclockwise']),

	  /** Size of the icon. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** Icon can have an aria label. */
	  'aria-hidden': propTypes.string,

	  /** Icon can have an aria label. */
	  'aria-label': propTypes.string
	});

	defineProperty(Icon, "defaultProps", {
	  as: 'i'
	});

	defineProperty(Icon, "Group", IconGroup);

	Icon.create = createShorthandFactory(Icon, function (value) {
	  return {
	    name: value
	  };
	});

	var isObject$2 = function isObject(val) {
	  return val !== null && !Array.isArray(val) && typeof val === 'object'
	};

	var codes = {
	  // ----------------------------------------
	  // By Code
	  // ----------------------------------------
	  3: 'Cancel',
	  6: 'Help',
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  28: 'Convert',
	  29: 'NonConvert',
	  30: 'Accept',
	  31: 'ModeChange',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  41: 'Select',
	  42: 'Print',
	  43: 'Execute',
	  44: 'PrintScreen',
	  45: 'Insert',
	  46: 'Delete',
	  48: ['0', ')'],
	  49: ['1', '!'],
	  50: ['2', '@'],
	  51: ['3', '#'],
	  52: ['4', '$'],
	  53: ['5', '%'],
	  54: ['6', '^'],
	  55: ['7', '&'],
	  56: ['8', '*'],
	  57: ['9', '('],
	  91: 'OS',
	  93: 'ContextMenu',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  181: 'VolumeMute',
	  182: 'VolumeDown',
	  183: 'VolumeUp',
	  186: [';', ':'],
	  187: ['=', '+'],
	  188: [',', '<'],
	  189: ['-', '_'],
	  190: ['.', '>'],
	  191: ['/', '?'],
	  192: ['`', '~'],
	  219: ['[', '{'],
	  220: ['\\', '|'],
	  221: [']', '}'],
	  222: ["'", '"'],
	  224: 'Meta',
	  225: 'AltGraph',
	  246: 'Attn',
	  247: 'CrSel',
	  248: 'ExSel',
	  249: 'EraseEof',
	  250: 'Play',
	  251: 'ZoomOut',
	};

	// Function Keys (F1-24)
	for (var i = 0; i < 24; i += 1) {
	  codes[112 + i] = 'F' + (i + 1);
	}

	// Alphabet (a-Z)
	for (var j = 0; j < 26; j += 1) {
	  var n$1 = j + 65;
	  codes[n$1] = [String.fromCharCode(n$1 + 32), String.fromCharCode(n$1)];
	}

	var keyboardKey = {
	  codes: codes,

	  /**
	   * Get the `keyCode` or `which` value from a keyboard event or `key` name.
	   * @param {string|object} eventOrKey A keyboard event-like object or `key` name.
	   * @param {string} [eventOrKey.key] If object, it must have one of these keys.
	   * @param {string} [eventOrKey.keyCode] If object, it must have one of these keys.
	   * @param {string} [eventOrKey.which] If object, it must have one of these keys.
	   * @returns {*}
	   */
	  getCode: function getCode(eventOrKey) {
	    if (isObject$2(eventOrKey)) {
	      return eventOrKey.keyCode || eventOrKey.which || this[eventOrKey.key]
	    }
	    return this[eventOrKey]
	  },

	  /**
	   * Get the key name from a keyboard event, `keyCode`, or `which` value.
	   * @param {number|object} eventOrCode A keyboard event-like object or key code.
	   * @param {number} [eventOrCode.key] If object with a `key` name, it will be returned.
	   * @param {number} [eventOrCode.keyCode] If object, it must have one of these keys.
	   * @param {number} [eventOrCode.which] If object, it must have one of these keys.
	   * @param {number} [eventOrCode.shiftKey] If object, it must have one of these keys.
	   * @returns {*}
	   */
	  getKey: function getKey(eventOrCode) {
	    var isEvent = isObject$2(eventOrCode);

	    // handle events with a `key` already defined
	    if (isEvent && eventOrCode.key) {
	      return eventOrCode.key
	    }

	    var name = codes[isEvent ? eventOrCode.keyCode || eventOrCode.which : eventOrCode];

	    if (Array.isArray(name)) {
	      if (isEvent) {
	        name = name[eventOrCode.shiftKey ? 1 : 0];
	      } else {
	        name = name[0];
	      }
	    }

	    return name
	  },

	  // ----------------------------------------
	  // By Name
	  // ----------------------------------------
	  // declare these manually for static analysis
	  Cancel: 3,
	  Help: 6,
	  Backspace: 8,
	  Tab: 9,
	  Clear: 12,
	  Enter: 13,
	  Shift: 16,
	  Control: 17,
	  Alt: 18,
	  Pause: 19,
	  CapsLock: 20,
	  Escape: 27,
	  Convert: 28,
	  NonConvert: 29,
	  Accept: 30,
	  ModeChange: 31,
	  ' ': 32,
	  PageUp: 33,
	  PageDown: 34,
	  End: 35,
	  Home: 36,
	  ArrowLeft: 37,
	  ArrowUp: 38,
	  ArrowRight: 39,
	  ArrowDown: 40,
	  Select: 41,
	  Print: 42,
	  Execute: 43,
	  PrintScreen: 44,
	  Insert: 45,
	  Delete: 46,
	  0: 48,
	  ')': 48,
	  1: 49,
	  '!': 49,
	  2: 50,
	  '@': 50,
	  3: 51,
	  '#': 51,
	  4: 52,
	  $: 52,
	  5: 53,
	  '%': 53,
	  6: 54,
	  '^': 54,
	  7: 55,
	  '&': 55,
	  8: 56,
	  '*': 56,
	  9: 57,
	  '(': 57,
	  a: 65,
	  A: 65,
	  b: 66,
	  B: 66,
	  c: 67,
	  C: 67,
	  d: 68,
	  D: 68,
	  e: 69,
	  E: 69,
	  f: 70,
	  F: 70,
	  g: 71,
	  G: 71,
	  h: 72,
	  H: 72,
	  i: 73,
	  I: 73,
	  j: 74,
	  J: 74,
	  k: 75,
	  K: 75,
	  l: 76,
	  L: 76,
	  m: 77,
	  M: 77,
	  n: 78,
	  N: 78,
	  o: 79,
	  O: 79,
	  p: 80,
	  P: 80,
	  q: 81,
	  Q: 81,
	  r: 82,
	  R: 82,
	  s: 83,
	  S: 83,
	  t: 84,
	  T: 84,
	  u: 85,
	  U: 85,
	  v: 86,
	  V: 86,
	  w: 87,
	  W: 87,
	  x: 88,
	  X: 88,
	  y: 89,
	  Y: 89,
	  z: 90,
	  Z: 90,
	  OS: 91,
	  ContextMenu: 93,
	  F1: 112,
	  F2: 113,
	  F3: 114,
	  F4: 115,
	  F5: 116,
	  F6: 117,
	  F7: 118,
	  F8: 119,
	  F9: 120,
	  F10: 121,
	  F11: 122,
	  F12: 123,
	  F13: 124,
	  F14: 125,
	  F15: 126,
	  F16: 127,
	  F17: 128,
	  F18: 129,
	  F19: 130,
	  F20: 131,
	  F21: 132,
	  F22: 133,
	  F23: 134,
	  F24: 135,
	  NumLock: 144,
	  ScrollLock: 145,
	  VolumeMute: 181,
	  VolumeDown: 182,
	  VolumeUp: 183,
	  ';': 186,
	  ':': 186,
	  '=': 187,
	  '+': 187,
	  ',': 188,
	  '<': 188,
	  '-': 189,
	  _: 189,
	  '.': 190,
	  '>': 190,
	  '/': 191,
	  '?': 191,
	  '`': 192,
	  '~': 192,
	  '[': 219,
	  '{': 219,
	  '\\': 220,
	  '|': 220,
	  ']': 221,
	  '}': 221,
	  "'": 222,
	  '"': 222,
	  Meta: 224,
	  AltGraph: 225,
	  Attn: 246,
	  CrSel: 247,
	  ExSel: 248,
	  EraseEof: 249,
	  Play: 250,
	  ZoomOut: 251,
	};

	// ----------------------------------------
	// By Alias
	// ----------------------------------------
	// provide dot-notation accessible keys for all key names
	keyboardKey.Spacebar = keyboardKey[' '];
	keyboardKey.Digit0 = keyboardKey['0'];
	keyboardKey.Digit1 = keyboardKey['1'];
	keyboardKey.Digit2 = keyboardKey['2'];
	keyboardKey.Digit3 = keyboardKey['3'];
	keyboardKey.Digit4 = keyboardKey['4'];
	keyboardKey.Digit5 = keyboardKey['5'];
	keyboardKey.Digit6 = keyboardKey['6'];
	keyboardKey.Digit7 = keyboardKey['7'];
	keyboardKey.Digit8 = keyboardKey['8'];
	keyboardKey.Digit9 = keyboardKey['9'];
	keyboardKey.Tilde = keyboardKey['~'];
	keyboardKey.GraveAccent = keyboardKey['`'];
	keyboardKey.ExclamationPoint = keyboardKey['!'];
	keyboardKey.AtSign = keyboardKey['@'];
	keyboardKey.PoundSign = keyboardKey['#'];
	keyboardKey.PercentSign = keyboardKey['%'];
	keyboardKey.Caret = keyboardKey['^'];
	keyboardKey.Ampersand = keyboardKey['&'];
	keyboardKey.PlusSign = keyboardKey['+'];
	keyboardKey.MinusSign = keyboardKey['-'];
	keyboardKey.EqualsSign = keyboardKey['='];
	keyboardKey.DivisionSign = keyboardKey['/'];
	keyboardKey.MultiplicationSign = keyboardKey['*'];
	keyboardKey.Comma = keyboardKey[','];
	keyboardKey.Decimal = keyboardKey['.'];
	keyboardKey.Colon = keyboardKey[':'];
	keyboardKey.Semicolon = keyboardKey[';'];
	keyboardKey.Pipe = keyboardKey['|'];
	keyboardKey.BackSlash = keyboardKey['\\'];
	keyboardKey.QuestionMark = keyboardKey['?'];
	keyboardKey.SingleQuote = keyboardKey["'"];
	keyboardKey.DoubleQuote = keyboardKey['"'];
	keyboardKey.LeftCurlyBrace = keyboardKey['{'];
	keyboardKey.RightCurlyBrace = keyboardKey['}'];
	keyboardKey.LeftParenthesis = keyboardKey['('];
	keyboardKey.RightParenthesis = keyboardKey[')'];
	keyboardKey.LeftAngleBracket = keyboardKey['<'];
	keyboardKey.RightAngleBracket = keyboardKey['>'];
	keyboardKey.LeftSquareBracket = keyboardKey['['];
	keyboardKey.RightSquareBracket = keyboardKey[']'];

	var keyboardKey_1 = keyboardKey;

	var debug = makeDebugger('portalInner');
	/**
	 * An inner component that allows you to render children outside their parent.
	 */

	var PortalInner =
	/*#__PURE__*/
	function (_Component) {
	  inherits(PortalInner, _Component);

	  function PortalInner() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, PortalInner);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(PortalInner)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleRef", function (c) {
	      debug('handleRef', c);
	      handleRef(_this.props.innerRef, c);
	    });

	    return _this;
	  }

	  createClass(PortalInner, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      debug('componentDidMount()');

	      lodash.invoke(this.props, 'onMount', null, this.props);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      debug('componentWillUnmount()');

	      lodash.invoke(this.props, 'onUnmount', null, this.props);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      if (!isBrowser()) return null;
	      var _this$props = this.props,
	          children = _this$props.children,
	          _this$props$mountNode = _this$props.mountNode,
	          mountNode = _this$props$mountNode === void 0 ? document.body : _this$props$mountNode;
	      return reactDom.createPortal(React__default.createElement(Ref, {
	        innerRef: this.handleRef
	      }, children), mountNode);
	    }
	  }]);

	  return PortalInner;
	}(React.Component);

	defineProperty(PortalInner, "propTypes", {
	  /** Primary content. */
	  children: propTypes.node.isRequired,

	  /** Called with a ref to the inner node. */
	  innerRef: ref,

	  /** The node where the portal should mount. */
	  mountNode: propTypes.any,

	  /**
	   * Called when the portal is mounted on the DOM
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: propTypes.func,

	  /**
	   * Called when the portal is unmounted from the DOM
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: propTypes.func
	});

	var debug$1 = makeDebugger('portal');
	/**
	 * A component that allows you to render children outside their parent.
	 * @see Modal
	 * @see Popup
	 * @see Dimmer
	 * @see Confirm
	 */

	var Portal =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Portal, _Component);

	  function Portal() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Portal);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "contentRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "triggerRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "handleDocumentClick", function (e) {
	      var closeOnDocumentClick = _this.props.closeOnDocumentClick;

	      if (!_this.contentRef.current || // no portal
	      doesNodeContainClick(_this.triggerRef.current, e) || // event happened in trigger (delegate to trigger handlers)
	      doesNodeContainClick(_this.contentRef.current, e) // event happened in the portal
	      ) {
	          return;
	        } // ignore the click


	      if (closeOnDocumentClick) {
	        debug$1('handleDocumentClick()');

	        _this.close(e);
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleEscape", function (e) {
	      if (!_this.props.closeOnEscape) return;
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Escape) return;
	      debug$1('handleEscape()');

	      _this.close(e);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalMouseLeave", function (e) {
	      var _this$props = _this.props,
	          closeOnPortalMouseLeave = _this$props.closeOnPortalMouseLeave,
	          mouseLeaveDelay = _this$props.mouseLeaveDelay;
	      if (!closeOnPortalMouseLeave) return; // Do not close the portal when 'mouseleave' is triggered by children

	      if (e.target !== _this.contentRef.current) return;
	      debug$1('handlePortalMouseLeave()');
	      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalMouseEnter", function () {
	      // In order to enable mousing from the trigger to the portal, we need to
	      // clear the mouseleave timer that was set when leaving the trigger.
	      var closeOnPortalMouseLeave = _this.props.closeOnPortalMouseLeave;
	      if (!closeOnPortalMouseLeave) return;
	      debug$1('handlePortalMouseEnter()');
	      clearTimeout(_this.mouseLeaveTimer);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerBlur", function (e) {
	      var _this$props2 = _this.props,
	          trigger = _this$props2.trigger,
	          closeOnTriggerBlur = _this$props2.closeOnTriggerBlur; // Call original event handler

	      for (var _len2 = arguments.length, rest$$1 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        rest$$1[_key2 - 1] = arguments[_key2];
	      }

	      lodash.invoke.apply(lodash, [trigger, 'props.onBlur', e].concat(rest$$1)); // IE 11 doesn't work with relatedTarget in blur events


	      var target = e.relatedTarget || document.activeElement; // do not close if focus is given to the portal

	      var didFocusPortal = lodash.invoke(_this.contentRef.current, 'contains', target);

	      if (!closeOnTriggerBlur || didFocusPortal) return;
	      debug$1('handleTriggerBlur()');

	      _this.close(e);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerClick", function (e) {
	      var _this$props3 = _this.props,
	          trigger = _this$props3.trigger,
	          closeOnTriggerClick = _this$props3.closeOnTriggerClick,
	          openOnTriggerClick = _this$props3.openOnTriggerClick;
	      var open = _this.state.open; // Call original event handler

	      for (var _len3 = arguments.length, rest$$1 = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	        rest$$1[_key3 - 1] = arguments[_key3];
	      }

	      lodash.invoke.apply(lodash, [trigger, 'props.onClick', e].concat(rest$$1));

	      if (open && closeOnTriggerClick) {
	        debug$1('handleTriggerClick() - close');

	        _this.close(e);
	      } else if (!open && openOnTriggerClick) {
	        debug$1('handleTriggerClick() - open');

	        _this.open(e);
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerFocus", function (e) {
	      var _this$props4 = _this.props,
	          trigger = _this$props4.trigger,
	          openOnTriggerFocus = _this$props4.openOnTriggerFocus; // Call original event handler

	      for (var _len4 = arguments.length, rest$$1 = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	        rest$$1[_key4 - 1] = arguments[_key4];
	      }

	      lodash.invoke.apply(lodash, [trigger, 'props.onFocus', e].concat(rest$$1));

	      if (!openOnTriggerFocus) return;
	      debug$1('handleTriggerFocus()');

	      _this.open(e);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerMouseLeave", function (e) {
	      clearTimeout(_this.mouseEnterTimer);
	      var _this$props5 = _this.props,
	          trigger = _this$props5.trigger,
	          closeOnTriggerMouseLeave = _this$props5.closeOnTriggerMouseLeave,
	          mouseLeaveDelay = _this$props5.mouseLeaveDelay; // Call original event handler

	      for (var _len5 = arguments.length, rest$$1 = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	        rest$$1[_key5 - 1] = arguments[_key5];
	      }

	      lodash.invoke.apply(lodash, [trigger, 'props.onMouseLeave', e].concat(rest$$1));

	      if (!closeOnTriggerMouseLeave) return;
	      debug$1('handleTriggerMouseLeave()');
	      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerMouseEnter", function (e) {
	      clearTimeout(_this.mouseLeaveTimer);
	      var _this$props6 = _this.props,
	          trigger = _this$props6.trigger,
	          mouseEnterDelay = _this$props6.mouseEnterDelay,
	          openOnTriggerMouseEnter = _this$props6.openOnTriggerMouseEnter; // Call original event handler

	      for (var _len6 = arguments.length, rest$$1 = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
	        rest$$1[_key6 - 1] = arguments[_key6];
	      }

	      lodash.invoke.apply(lodash, [trigger, 'props.onMouseEnter', e].concat(rest$$1));

	      if (!openOnTriggerMouseEnter) return;
	      debug$1('handleTriggerMouseEnter()');
	      _this.mouseEnterTimer = _this.openWithTimeout(e, mouseEnterDelay);
	    });

	    defineProperty(assertThisInitialized(_this), "open", function (e) {
	      debug$1('open()');
	      var onOpen = _this.props.onOpen;
	      if (onOpen) onOpen(e, _this.props);

	      _this.trySetState({
	        open: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "openWithTimeout", function (e, delay$$1) {
	      debug$1('openWithTimeout()', delay$$1); // React wipes the entire event object and suggests using e.persist() if
	      // you need the event for async access. However, even with e.persist
	      // certain required props (e.g. currentTarget) are null so we're forced to clone.

	      var eventClone = objectSpread({}, e);

	      return setTimeout(function () {
	        return _this.open(eventClone);
	      }, delay$$1 || 0);
	    });

	    defineProperty(assertThisInitialized(_this), "close", function (e) {
	      debug$1('close()');
	      var onClose = _this.props.onClose;
	      if (onClose) onClose(e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "closeWithTimeout", function (e, delay$$1) {
	      debug$1('closeWithTimeout()', delay$$1); // React wipes the entire event object and suggests using e.persist() if
	      // you need the event for async access. However, even with e.persist
	      // certain required props (e.g. currentTarget) are null so we're forced to clone.

	      var eventClone = objectSpread({}, e);

	      return setTimeout(function () {
	        return _this.close(eventClone);
	      }, delay$$1 || 0);
	    });

	    defineProperty(assertThisInitialized(_this), "handleMount", function (e, _ref) {
	      var target = _ref.node;
	      debug$1('handleMount()');
	      var eventPool = _this.props.eventPool;
	      instance$1.sub('mouseleave', _this.handlePortalMouseLeave, {
	        pool: eventPool,
	        target: target
	      });
	      instance$1.sub('mouseenter', _this.handlePortalMouseEnter, {
	        pool: eventPool,
	        target: target
	      });
	      instance$1.sub('click', _this.handleDocumentClick, {
	        pool: eventPool
	      });
	      instance$1.sub('keydown', _this.handleEscape, {
	        pool: eventPool
	      });

	      lodash.invoke(_this.props, 'onMount', null, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleUnmount", function (e, _ref2) {
	      var target = _ref2.node;
	      debug$1('handleUnmount()');
	      var eventPool = _this.props.eventPool;
	      instance$1.unsub('mouseleave', _this.handlePortalMouseLeave, {
	        pool: eventPool,
	        target: target
	      });
	      instance$1.unsub('mouseenter', _this.handlePortalMouseEnter, {
	        pool: eventPool,
	        target: target
	      });
	      instance$1.unsub('click', _this.handleDocumentClick, {
	        pool: eventPool
	      });
	      instance$1.unsub('keydown', _this.handleEscape, {
	        pool: eventPool
	      });

	      lodash.invoke(_this.props, 'onUnmount', null, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerRef", function (c) {
	      debug$1('handleTriggerRef()');
	      _this.triggerRef.current = c;
	      handleRef(_this.props.triggerRef, c);
	    });

	    return _this;
	  }

	  createClass(Portal, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      // Clean up timers
	      clearTimeout(this.mouseEnterTimer);
	      clearTimeout(this.mouseLeaveTimer);
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          children = _this$props7.children,
	          mountNode = _this$props7.mountNode,
	          trigger = _this$props7.trigger;
	      var open = this.state.open;
	      return React__default.createElement(React.Fragment, null, open && React__default.createElement(PortalInner, {
	        innerRef: this.contentRef,
	        mountNode: mountNode,
	        onMount: this.handleMount,
	        onUnmount: this.handleUnmount
	      }, children), trigger && React__default.createElement(Ref, {
	        innerRef: this.handleTriggerRef
	      }, React.cloneElement(trigger, {
	        onBlur: this.handleTriggerBlur,
	        onClick: this.handleTriggerClick,
	        onFocus: this.handleTriggerFocus,
	        onMouseLeave: this.handleTriggerMouseLeave,
	        onMouseEnter: this.handleTriggerMouseEnter
	      })));
	    }
	  }]);

	  return Portal;
	}(AutoControlledComponent);

	defineProperty(Portal, "propTypes", {
	  /** Primary content. */
	  children: propTypes.node.isRequired,

	  /** Controls whether or not the portal should close when the document is clicked. */
	  closeOnDocumentClick: propTypes.bool,

	  /** Controls whether or not the portal should close when escape is pressed is displayed. */
	  closeOnEscape: propTypes.bool,

	  /**
	   * Controls whether or not the portal should close when mousing out of the portal.
	   * NOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the
	   * gap from the trigger to the portal.
	   */
	  closeOnPortalMouseLeave: propTypes.bool,

	  /** Controls whether or not the portal should close on blur of the trigger. */
	  closeOnTriggerBlur: propTypes.bool,

	  /** Controls whether or not the portal should close on click of the trigger. */
	  closeOnTriggerClick: propTypes.bool,

	  /** Controls whether or not the portal should close when mousing out of the trigger. */
	  closeOnTriggerMouseLeave: propTypes.bool,

	  /** Initial value of open. */
	  defaultOpen: propTypes.bool,

	  /** Event pool namespace that is used to handle component events */
	  eventPool: propTypes.string,

	  /** The node where the portal should mount. */
	  mountNode: propTypes.any,

	  /** Milliseconds to wait before opening on mouse over */
	  mouseEnterDelay: propTypes.number,

	  /** Milliseconds to wait before closing on mouse leave */
	  mouseLeaveDelay: propTypes.number,

	  /**
	   * Called when a close event happens
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: propTypes.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: propTypes.func,

	  /**
	   * Called when an open event happens
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: propTypes.func,

	  /** Controls whether or not the portal is displayed. */
	  open: propTypes.bool,

	  /** Controls whether or not the portal should open when the trigger is clicked. */
	  openOnTriggerClick: propTypes.bool,

	  /** Controls whether or not the portal should open on focus of the trigger. */
	  openOnTriggerFocus: propTypes.bool,

	  /** Controls whether or not the portal should open when mousing over the trigger. */
	  openOnTriggerMouseEnter: propTypes.bool,

	  /** Element to be rendered in-place where the portal is defined. */
	  trigger: propTypes.node,

	  /** Called with a ref to the trigger node. */
	  triggerRef: ref
	});

	defineProperty(Portal, "defaultProps", {
	  closeOnDocumentClick: true,
	  closeOnEscape: true,
	  eventPool: 'default',
	  openOnTriggerClick: true
	});

	defineProperty(Portal, "autoControlledProps", ['open']);

	defineProperty(Portal, "Inner", PortalInner);

	/**
	 * A dimmable sub-component for Dimmer.
	 */

	function DimmerDimmable(props) {
	  var blurring = props.blurring,
	      className = props.className,
	      children = props.children,
	      content = props.content,
	      dimmed = props.dimmed;
	  var classes = classNames(useKeyOnly(blurring, 'blurring'), useKeyOnly(dimmed, 'dimmed'), 'dimmable', className);
	  var rest = getUnhandledProps(DimmerDimmable, props);
	  var ElementType = getElementType(DimmerDimmable, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	DimmerDimmable.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A dimmable element can blur its contents. */
	  blurring: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Controls whether or not the dim is displayed. */
	  dimmed: propTypes.bool
	};

	/**
	 * An inner element for a Dimmer.
	 */

	var DimmerInner =
	/*#__PURE__*/
	function (_Component) {
	  inherits(DimmerInner, _Component);

	  function DimmerInner() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, DimmerInner);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DimmerInner)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "containerRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "contentRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var contentRef = _this.contentRef.current;

	      lodash.invoke(_this.props, 'onClick', e, _this.props);

	      if (contentRef && contentRef !== e.target && doesNodeContainClick(contentRef, e)) {
	        return;
	      }

	      lodash.invoke(_this.props, 'onClickOutside', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(DimmerInner, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var active = this.props.active;
	      this.toggleStyles(active);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var currentActive = this.props.active;
	      var prevActive = prevProps.active;
	      if (prevActive !== currentActive) this.toggleStyles(currentActive);
	    }
	  }, {
	    key: "toggleStyles",
	    value: function toggleStyles(active) {
	      var containerRef = this.containerRef.current;
	      if (!containerRef) return;

	      if (active) {
	        containerRef.style.setProperty('display', 'flex', 'important');
	      } else {
	        containerRef.style.removeProperty('display');
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          inverted = _this$props.inverted,
	          page = _this$props.page,
	          simple = _this$props.simple,
	          verticalAlign = _this$props.verticalAlign;
	      var classes = classNames('ui', useKeyOnly(active, 'active transition visible'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(page, 'page'), useKeyOnly(simple, 'simple'), useVerticalAlignProp(verticalAlign), 'dimmer', className);
	      var rest$$1 = getUnhandledProps(DimmerInner, this.props);
	      var ElementType = getElementType(DimmerInner, this.props);
	      var childrenContent = isNil$1(children) ? content : children;
	      return React__default.createElement(Ref, {
	        innerRef: this.containerRef
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onClick: this.handleClick
	      }), childrenContent && React__default.createElement("div", {
	        className: "content",
	        ref: this.contentRef
	      }, childrenContent)));
	    }
	  }]);

	  return DimmerInner;
	}(React.Component);

	defineProperty(DimmerInner, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An active dimmer will dim its parent container. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A disabled dimmer cannot be activated */
	  disabled: propTypes.bool,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * Handles click outside Dimmer's content, but inside Dimmer area.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClickOutside: propTypes.func,

	  /** A dimmer can be formatted to have its colors inverted. */
	  inverted: propTypes.bool,

	  /** A dimmer can be formatted to be fixed to the page. */
	  page: propTypes.bool,

	  /** A dimmer can be controlled with simple prop. */
	  simple: propTypes.bool,

	  /** A dimmer can have its content top or bottom aligned. */
	  verticalAlign: propTypes.oneOf(['bottom', 'top'])
	});

	/**
	 * A dimmer hides distractions to focus attention on particular content.
	 */

	var Dimmer =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Dimmer, _Component);

	  function Dimmer() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Dimmer);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Dimmer)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handlePortalMount", function () {
	      if (!isBrowser()) return; // Heads up, IE doesn't support second argument in add()

	      document.body.classList.add('dimmed');
	      document.body.classList.add('dimmable');
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalUnmount", function () {
	      if (!isBrowser()) return; // Heads up, IE doesn't support second argument in add()

	      document.body.classList.remove('dimmed');
	      document.body.classList.remove('dimmable');
	    });

	    return _this;
	  }

	  createClass(Dimmer, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          page = _this$props.page;
	      var rest = getUnhandledProps(Dimmer, this.props);

	      if (page) {
	        return React__default.createElement(Portal, {
	          closeOnEscape: false,
	          closeOnDocumentClick: false,
	          onMount: this.handlePortalMount,
	          onUnmount: this.handlePortalUnmount,
	          open: active,
	          openOnTriggerClick: false
	        }, React__default.createElement(DimmerInner, _extends_1({}, rest, {
	          active: active,
	          page: page
	        })));
	      }

	      return React__default.createElement(DimmerInner, _extends_1({}, rest, {
	        active: active,
	        page: page
	      }));
	    }
	  }]);

	  return Dimmer;
	}(React.Component);

	defineProperty(Dimmer, "propTypes", {
	  /** An active dimmer will dim its parent container. */
	  active: propTypes.bool,

	  /** A dimmer can be formatted to be fixed to the page. */
	  page: propTypes.bool
	});

	defineProperty(Dimmer, "Dimmable", DimmerDimmable);

	defineProperty(Dimmer, "Inner", DimmerInner);
	Dimmer.create = createShorthandFactory(Dimmer, function (value) {
	  return {
	    content: value
	  };
	});

	/**
	 * A group of images.
	 */

	function ImageGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      size = props.size;
	  var classes = classNames('ui', size, className, 'images');
	  var rest = getUnhandledProps(ImageGroup, props);
	  var ElementType = getElementType(ImageGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ImageGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A group of images can be formatted to have the same size. */
	  size: propTypes.oneOf(SIZES)
	};

	/**
	 * An image is a graphic representation of something.
	 * @see Icon
	 */

	function Image(props) {
	  var avatar = props.avatar,
	      bordered = props.bordered,
	      centered = props.centered,
	      children = props.children,
	      circular = props.circular,
	      className = props.className,
	      content = props.content,
	      dimmer = props.dimmer,
	      disabled = props.disabled,
	      floated = props.floated,
	      fluid = props.fluid,
	      hidden = props.hidden,
	      href = props.href,
	      inline = props.inline,
	      label = props.label,
	      rounded = props.rounded,
	      size$$1 = props.size,
	      spaced = props.spaced,
	      verticalAlign = props.verticalAlign,
	      wrapped = props.wrapped,
	      ui = props.ui;
	  var classes = classNames(useKeyOnly(ui, 'ui'), size$$1, useKeyOnly(avatar, 'avatar'), useKeyOnly(bordered, 'bordered'), useKeyOnly(circular, 'circular'), useKeyOnly(centered, 'centered'), useKeyOnly(disabled, 'disabled'), useKeyOnly(fluid, 'fluid'), useKeyOnly(hidden, 'hidden'), useKeyOnly(inline, 'inline'), useKeyOnly(rounded, 'rounded'), useKeyOrValueAndKey(spaced, 'spaced'), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign, 'aligned'), 'image', className);
	  var rest$$1 = getUnhandledProps(Image, props);

	  var _partitionHTMLProps = partitionHTMLProps(rest$$1, {
	    htmlProps: htmlImageProps
	  }),
	      _partitionHTMLProps2 = slicedToArray(_partitionHTMLProps, 2),
	      imgTagProps = _partitionHTMLProps2[0],
	      rootProps = _partitionHTMLProps2[1];

	  var ElementType = getElementType(Image, props, function () {
	    if (!lodash.isNil(dimmer) || !lodash.isNil(label) || !lodash.isNil(wrapped) || !isNil$1(children)) {
	      return 'div';
	    }
	  });

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  if (ElementType === 'img') {
	    return React__default.createElement(ElementType, _extends_1({}, rootProps, imgTagProps, {
	      className: classes
	    }));
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rootProps, {
	    className: classes,
	    href: href
	  }), Dimmer.create(dimmer, {
	    autoGenerateKey: false
	  }), Label.create(label, {
	    autoGenerateKey: false
	  }), React__default.createElement("img", imgTagProps));
	}

	Image.Group = ImageGroup;
	Image.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An image may be formatted to appear inline with text as an avatar. */
	  avatar: propTypes.bool,

	  /** An image may include a border to emphasize the edges of white or transparent content. */
	  bordered: propTypes.bool,

	  /** An image can appear centered in a content block. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** An image may appear circular. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** An image can show that it is disabled and cannot be selected. */
	  disabled: propTypes.bool,

	  /** Shorthand for Dimmer. */
	  dimmer: itemShorthand,

	  /** An image can sit to the left or right of other content. */
	  floated: propTypes.oneOf(FLOATS),

	  /** An image can take up the width of its container. */
	  fluid: every$1([propTypes.bool, disallow(['size'])]),

	  /** An image can be hidden. */
	  hidden: propTypes.bool,

	  /** Renders the Image as an <a> tag with this href. */
	  href: propTypes.string,

	  /** An image may appear inline. */
	  inline: propTypes.bool,

	  /** Shorthand for Label. */
	  label: itemShorthand,

	  /** An image may appear rounded. */
	  rounded: propTypes.bool,

	  /** An image may appear at different sizes. */
	  size: propTypes.oneOf(SIZES),

	  /** An image can specify that it needs an additional spacing to separate it from nearby content. */
	  spaced: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['left', 'right'])]),

	  /** Whether or not to add the ui className. */
	  ui: propTypes.bool,

	  /** An image can specify its vertical alignment. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS),

	  /** An image can render wrapped in a `div.ui.image` as alternative HTML markup. */
	  wrapped: propTypes.bool
	};
	Image.defaultProps = {
	  as: 'img',
	  ui: true
	};
	Image.create = createShorthandFactory(Image, function (value) {
	  return {
	    src: value
	  };
	});

	function LabelDetail(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('detail', className);
	  var rest = getUnhandledProps(LabelDetail, props);
	  var ElementType = getElementType(LabelDetail, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	LabelDetail.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	LabelDetail.create = createShorthandFactory(LabelDetail, function (val) {
	  return {
	    content: val
	  };
	});

	/**
	 * A label can be grouped.
	 */

	function LabelGroup(props) {
	  var children = props.children,
	      circular = props.circular,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      size = props.size,
	      tag = props.tag;
	  var classes = classNames('ui', color, size, useKeyOnly(circular, 'circular'), useKeyOnly(tag, 'tag'), 'labels', className);
	  var rest = getUnhandledProps(LabelGroup, props);
	  var ElementType = getElementType(LabelGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	LabelGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Labels can share shapes. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Label group can share colors together. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Label group can share sizes together. */
	  size: propTypes.oneOf(SIZES),

	  /** Label group can share tag formatting. */
	  tag: propTypes.bool
	};

	/**
	 * A label displays content classification.
	 */

	var Label =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Label, _Component);

	  function Label() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Label);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Label)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleIconOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e) {
	          lodash.invoke(predefinedProps, 'onClick', e);

	          lodash.invoke(_this.props, 'onRemove', e, _this.props);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(Label, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          attached = _this$props.attached,
	          basic = _this$props.basic,
	          children = _this$props.children,
	          circular = _this$props.circular,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          corner = _this$props.corner,
	          detail = _this$props.detail,
	          empty = _this$props.empty,
	          floating = _this$props.floating,
	          horizontal = _this$props.horizontal,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          onRemove = _this$props.onRemove,
	          pointing = _this$props.pointing,
	          removeIcon = _this$props.removeIcon,
	          ribbon = _this$props.ribbon,
	          size$$1 = _this$props.size,
	          tag = _this$props.tag;
	      var pointingClass = pointing === true && 'pointing' || (pointing === 'left' || pointing === 'right') && "".concat(pointing, " pointing") || (pointing === 'above' || pointing === 'below') && "pointing ".concat(pointing);
	      var classes = classNames('ui', color, pointingClass, size$$1, useKeyOnly(active, 'active'), useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(empty, 'empty'), useKeyOnly(floating, 'floating'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(image === true, 'image'), useKeyOnly(tag, 'tag'), useKeyOrValueAndKey(corner, 'corner'), useKeyOrValueAndKey(ribbon, 'ribbon'), useValueAndKey(attached, 'attached'), 'label', className);
	      var rest$$1 = getUnhandledProps(Label, this.props);
	      var ElementType = getElementType(Label, this.props);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      var removeIconShorthand = lodash.isUndefined(removeIcon) ? 'delete' : removeIcon;
	      return React__default.createElement(ElementType, _extends_1({
	        className: classes,
	        onClick: this.handleClick
	      }, rest$$1), Icon.create(icon, {
	        autoGenerateKey: false
	      }), typeof image !== 'boolean' && Image.create(image, {
	        autoGenerateKey: false
	      }), content, LabelDetail.create(detail, {
	        autoGenerateKey: false
	      }), onRemove && Icon.create(removeIconShorthand, {
	        autoGenerateKey: false,
	        overrideProps: this.handleIconOverrides
	      }));
	    }
	  }]);

	  return Label;
	}(React.Component);

	defineProperty(Label, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A label can be active. */
	  active: propTypes.bool,

	  /** A label can attach to a content segment. */
	  attached: propTypes.oneOf(['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right']),

	  /** A label can reduce its complexity. */
	  basic: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** A label can be circular. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Color of the label. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A label can position itself in the corner of an element. */
	  corner: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['left', 'right'])]),

	  /** Shorthand for LabelDetail. */
	  detail: itemShorthand,

	  /** Formats the label as a dot. */
	  empty: every$1([propTypes.bool, demand(['circular'])]),

	  /** Float above another element in the upper right corner. */
	  floating: propTypes.bool,

	  /** A horizontal label is formatted to label content along-side it horizontally. */
	  horizontal: propTypes.bool,

	  /** Shorthand for Icon. */
	  icon: itemShorthand,

	  /** A label can be formatted to emphasize an image or prop can be used as shorthand for Image. */
	  image: propTypes.oneOfType([propTypes.bool, itemShorthand]),

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * Adds an "x" icon, called when "x" is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onRemove: propTypes.func,

	  /** A label can point to content next to it. */
	  pointing: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['above', 'below', 'left', 'right'])]),

	  /** Shorthand for Icon to appear as the last child and trigger onRemove. */
	  removeIcon: itemShorthand,

	  /** A label can appear as a ribbon attaching itself to an element. */
	  ribbon: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['right'])]),

	  /** A label can have different sizes. */
	  size: propTypes.oneOf(SIZES),

	  /** A label can appear as a tag. */
	  tag: propTypes.bool
	});

	defineProperty(Label, "Detail", LabelDetail);

	defineProperty(Label, "Group", LabelGroup);
	Label.create = createShorthandFactory(Label, function (value) {
	  return {
	    content: value
	  };
	});

	/**
	 * Used in some Button types, such as `animated`.
	 */

	function ButtonContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      hidden = props.hidden,
	      visible = props.visible;
	  var classes = classNames(useKeyOnly(visible, 'visible'), useKeyOnly(hidden, 'hidden'), 'content', className);
	  var rest = getUnhandledProps(ButtonContent, props);
	  var ElementType = getElementType(ButtonContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ButtonContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Initially hidden, visible on hover. */
	  hidden: propTypes.bool,

	  /** Initially visible, hidden on hover. */
	  visible: propTypes.bool
	};

	/**
	 * Buttons can be grouped.
	 */

	function ButtonGroup(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      buttons = props.buttons,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      compact$$1 = props.compact,
	      content = props.content,
	      floated = props.floated,
	      fluid = props.fluid,
	      icon = props.icon,
	      inverted = props.inverted,
	      labeled = props.labeled,
	      negative = props.negative,
	      positive = props.positive,
	      primary = props.primary,
	      secondary = props.secondary,
	      size$$1 = props.size,
	      toggle = props.toggle,
	      vertical = props.vertical,
	      widths = props.widths;
	  var classes = classNames('ui', color, size$$1, useKeyOnly(basic, 'basic'), useKeyOnly(compact$$1, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(icon, 'icon'), useKeyOnly(inverted, 'inverted'), useKeyOnly(labeled, 'labeled'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(primary, 'primary'), useKeyOnly(secondary, 'secondary'), useKeyOnly(toggle, 'toggle'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useValueAndKey(floated, 'floated'), useWidthProp(widths), 'buttons', className);
	  var rest$$1 = getUnhandledProps(ButtonGroup, props);
	  var ElementType = getElementType(ButtonGroup, props);

	  if (lodash.isNil(buttons)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), isNil$1(children) ? content : children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), lodash.map(buttons, function (button) {
	    return Button.create(button);
	  }));
	}

	ButtonGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Groups can be attached to other content. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['left', 'right', 'top', 'bottom'])]),

	  /** Groups can be less pronounced. */
	  basic: propTypes.bool,

	  /** Array of shorthand Button values. */
	  buttons: collectionShorthand,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Groups can have a shared color. */
	  color: propTypes.oneOf(COLORS),

	  /** Groups can reduce their padding to fit into tighter spaces. */
	  compact: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Groups can be aligned to the left or right of its container. */
	  floated: propTypes.oneOf(FLOATS),

	  /** Groups can take the width of their container. */
	  fluid: propTypes.bool,

	  /** Groups can be formatted as icons. */
	  icon: propTypes.bool,

	  /** Groups can be formatted to appear on dark backgrounds. */
	  inverted: propTypes.bool,

	  /** Groups can be formatted as labeled icon buttons. */
	  labeled: propTypes.bool,

	  /** Groups can hint towards a negative consequence. */
	  negative: propTypes.bool,

	  /** Groups can hint towards a positive consequence. */
	  positive: propTypes.bool,

	  /** Groups can be formatted to show different levels of emphasis. */
	  primary: propTypes.bool,

	  /** Groups can be formatted to show different levels of emphasis. */
	  secondary: propTypes.bool,

	  /** Groups can have different sizes. */
	  size: propTypes.oneOf(SIZES),

	  /** Groups can be formatted to toggle on and off. */
	  toggle: propTypes.bool,

	  /** Groups can be formatted to appear vertically. */
	  vertical: propTypes.bool,

	  /** Groups can have their widths divided evenly. */
	  widths: propTypes.oneOf(WIDTHS)
	};

	/**
	 * Button groups can contain conditionals.
	 */

	function ButtonOr(props) {
	  var className = props.className,
	      text = props.text;
	  var classes = classNames('or', className);
	  var rest = getUnhandledProps(ButtonOr, props);
	  var ElementType = getElementType(ButtonOr, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes,
	    "data-text": text
	  }));
	}

	ButtonOr.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Or buttons can have their text localized, or adjusted by using the text prop. */
	  text: propTypes.oneOfType([propTypes.number, propTypes.string])
	};

	/**
	 * A Button indicates a possible user action.
	 * @see Form
	 * @see Icon
	 * @see Label
	 */

	var Button =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Button, _Component);

	  function Button() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Button);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "computeElementType", function () {
	      var _this$props = _this.props,
	          attached = _this$props.attached,
	          label = _this$props.label;
	      if (!lodash.isNil(attached) || !lodash.isNil(label)) return 'div';
	    });

	    defineProperty(assertThisInitialized(_this), "computeTabIndex", function (ElementType) {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!lodash.isNil(tabIndex)) return tabIndex;
	      if (disabled) return -1;
	      if (ElementType === 'div') return 0;
	    });

	    defineProperty(assertThisInitialized(_this), "focus", function () {
	      return lodash.invoke(_this.ref.current, 'focus');
	    });

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var disabled = _this.props.disabled;

	      if (disabled) {
	        e.preventDefault();
	        return;
	      }

	      lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "hasIconClass", function () {
	      var _this$props3 = _this.props,
	          labelPosition = _this$props3.labelPosition,
	          children = _this$props3.children,
	          content = _this$props3.content,
	          icon = _this$props3.icon;
	      if (icon === true) return true;
	      return icon && (labelPosition || isNil$1(children) && lodash.isNil(content));
	    });

	    return _this;
	  }

	  createClass(Button, [{
	    key: "computeButtonAriaRole",
	    value: function computeButtonAriaRole(ElementType) {
	      var role = this.props.role;
	      if (!lodash.isNil(role)) return role;
	      if (ElementType !== 'button') return 'button';
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          active = _this$props4.active,
	          animated = _this$props4.animated,
	          attached = _this$props4.attached,
	          basic = _this$props4.basic,
	          children = _this$props4.children,
	          circular = _this$props4.circular,
	          className = _this$props4.className,
	          color = _this$props4.color,
	          compact$$1 = _this$props4.compact,
	          content = _this$props4.content,
	          disabled = _this$props4.disabled,
	          floated = _this$props4.floated,
	          fluid = _this$props4.fluid,
	          icon = _this$props4.icon,
	          inverted = _this$props4.inverted,
	          label = _this$props4.label,
	          labelPosition = _this$props4.labelPosition,
	          loading = _this$props4.loading,
	          negative = _this$props4.negative,
	          positive = _this$props4.positive,
	          primary = _this$props4.primary,
	          secondary = _this$props4.secondary,
	          size$$1 = _this$props4.size,
	          toggle = _this$props4.toggle;
	      var baseClasses = classNames(color, size$$1, useKeyOnly(active, 'active'), useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(compact$$1, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(this.hasIconClass(), 'icon'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(primary, 'primary'), useKeyOnly(secondary, 'secondary'), useKeyOnly(toggle, 'toggle'), useKeyOrValueAndKey(animated, 'animated'), useKeyOrValueAndKey(attached, 'attached'));
	      var labeledClasses = classNames(useKeyOrValueAndKey(labelPosition || !!label, 'labeled'));
	      var wrapperClasses = classNames(useKeyOnly(disabled, 'disabled'), useValueAndKey(floated, 'floated'));
	      var rest$$1 = getUnhandledProps(Button, this.props);
	      var ElementType = getElementType(Button, this.props, this.computeElementType);
	      var tabIndex = this.computeTabIndex(ElementType);

	      if (!lodash.isNil(label)) {
	        var buttonClasses = classNames('ui', baseClasses, 'button', className);
	        var containerClasses = classNames('ui', labeledClasses, 'button', className, wrapperClasses);
	        var labelElement = Label.create(label, {
	          defaultProps: {
	            basic: true,
	            pointing: labelPosition === 'left' ? 'right' : 'left'
	          },
	          autoGenerateKey: false
	        });
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: containerClasses,
	          onClick: this.handleClick
	        }), labelPosition === 'left' && labelElement, React__default.createElement(Ref, {
	          innerRef: this.ref
	        }, React__default.createElement("button", {
	          className: buttonClasses,
	          "aria-pressed": toggle ? !!active : undefined,
	          disabled: disabled,
	          tabIndex: tabIndex
	        }, Icon.create(icon, {
	          autoGenerateKey: false
	        }), " ", content)), (labelPosition === 'right' || !labelPosition) && labelElement);
	      }

	      var classes = classNames('ui', baseClasses, wrapperClasses, labeledClasses, 'button', className);
	      var hasChildren = !isNil$1(children);
	      var role = this.computeButtonAriaRole(ElementType);
	      return React__default.createElement(Ref, {
	        innerRef: this.ref
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        "aria-pressed": toggle ? !!active : undefined,
	        disabled: disabled && ElementType === 'button' || undefined,
	        onClick: this.handleClick,
	        role: role,
	        tabIndex: tabIndex
	      }), hasChildren && children, !hasChildren && Icon.create(icon, {
	        autoGenerateKey: false
	      }), !hasChildren && content));
	    }
	  }]);

	  return Button;
	}(React.Component);

	defineProperty(Button, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A button can show it is currently the active user selection. */
	  active: propTypes.bool,

	  /** A button can animate to show hidden content. */
	  animated: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['fade', 'vertical'])]),

	  /** A button can be attached to other content. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['left', 'right', 'top', 'bottom'])]),

	  /** A basic button is less pronounced. */
	  basic: propTypes.bool,

	  /** Primary content. */
	  children: every$1([propTypes.node, disallow(['label']), givenProps({
	    icon: propTypes.oneOfType([propTypes.string.isRequired, propTypes.object.isRequired, propTypes.element.isRequired])
	  }, disallow(['icon']))]),

	  /** A button can be circular. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A button can have different colors */
	  color: propTypes.oneOf([].concat(toConsumableArray$1(COLORS), ['facebook', 'google plus', 'instagram', 'linkedin', 'twitter', 'vk', 'youtube'])),

	  /** A button can reduce its padding to fit into tighter spaces. */
	  compact: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A button can show it is currently unable to be interacted with. */
	  disabled: propTypes.bool,

	  /** A button can be aligned to the left or right of its container. */
	  floated: propTypes.oneOf(FLOATS),

	  /** A button can take the width of its container. */
	  fluid: propTypes.bool,

	  /** Add an Icon by name, props object, or pass an <Icon />. */
	  icon: some$1([propTypes.bool, propTypes.string, propTypes.object, propTypes.element]),

	  /** A button can be formatted to appear on dark backgrounds. */
	  inverted: propTypes.bool,

	  /** Add a Label by text, props object, or pass a <Label />. */
	  label: some$1([propTypes.string, propTypes.object, propTypes.element]),

	  /** A labeled button can format a Label or Icon to appear on the left or right. */
	  labelPosition: propTypes.oneOf(['right', 'left']),

	  /** A button can show a loading indicator. */
	  loading: propTypes.bool,

	  /** A button can hint towards a negative consequence. */
	  negative: propTypes.bool,

	  /**
	   * Called after user's click.
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /** A button can hint towards a positive consequence. */
	  positive: propTypes.bool,

	  /** A button can be formatted to show different levels of emphasis. */
	  primary: propTypes.bool,

	  /** The role of the HTML element. */
	  role: propTypes.string,

	  /** A button can be formatted to show different levels of emphasis. */
	  secondary: propTypes.bool,

	  /** A button can have different sizes. */
	  size: propTypes.oneOf(SIZES),

	  /** A button can receive focus. */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** A button can be formatted to toggle on and off. */
	  toggle: propTypes.bool
	});

	defineProperty(Button, "defaultProps", {
	  as: 'button'
	});

	defineProperty(Button, "Content", ButtonContent);

	defineProperty(Button, "Group", ButtonGroup);

	defineProperty(Button, "Or", ButtonOr);

	Button.create = createShorthandFactory(Button, function (value) {
	  return {
	    content: value
	  };
	});

	var toRef = lodash.memoize(function (node) {
	  return {
	    current: node
	  };
	});
	/**
	 * Given `this.props`, return a `node` value or undefined.
	 *
	 * @param {object|React.RefObject} props Component's props
	 * @return {React.RefObject|undefined}
	 */


	var getNodeRefFromProps = function getNodeRefFromProps(props) {
	  var node = props.node;

	  if (isBrowser()) {
	    if (isRefObject$1(node)) return node;
	    return lodash.isNil(node) ? toRef(document.body) : toRef(node);
	  }
	};

	var computeClassNames = fp.flow(fp.toArray, fp.map('props.className'), fp.flatMap(fp.split(/\s+/)), fp.filter(fp.identity), fp.uniq);

	var computeClassNamesDifference = function computeClassNamesDifference(prevClassNames, currentClassNames) {
	  return [lodash.difference(currentClassNames, prevClassNames), lodash.difference(prevClassNames, currentClassNames)];
	};

	var prevClassNames = new Map();
	/**
	 * @param {React.RefObject} nodeRef
	 * @param {Object[]} components
	 */

	var handleClassNamesChange = function handleClassNamesChange(nodeRef, components) {
	  var currentClassNames = computeClassNames(components);

	  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(nodeRef), currentClassNames),
	      _computeClassNamesDif2 = slicedToArray(_computeClassNamesDif, 2),
	      forAdd = _computeClassNamesDif2[0],
	      forRemoval = _computeClassNamesDif2[1];

	  if (nodeRef.current) {
	    lodash.forEach(forAdd, function (className) {
	      return nodeRef.current.classList.add(className);
	    });

	    lodash.forEach(forRemoval, function (className) {
	      return nodeRef.current.classList.remove(className);
	    });
	  }

	  prevClassNames.set(nodeRef, currentClassNames);
	};

	var NodeRegistry = function NodeRegistry() {
	  var _this = this;

	  classCallCheck(this, NodeRegistry);

	  defineProperty(this, "add", function (nodeRef, component) {
	    if (_this.nodes.has(nodeRef)) {
	      var set = _this.nodes.get(nodeRef);

	      set.add(component);
	      return;
	    }

	    _this.nodes.set(nodeRef, new Set([component]));
	  });

	  defineProperty(this, "del", function (nodeRef, component) {
	    if (!_this.nodes.has(nodeRef)) return;

	    var set = _this.nodes.get(nodeRef);

	    if (set.size === 1) {
	      _this.nodes.delete(nodeRef);

	      return;
	    }

	    set.delete(component);
	  });

	  defineProperty(this, "emit", function (nodeRef, callback) {
	    callback(nodeRef, _this.nodes.get(nodeRef));
	  });

	  this.nodes = new Map();
	};

	var nodeRegistry = new NodeRegistry();
	/**
	 * A component that allows to manage classNames on a DOM node in declarative manner.
	 */

	var MountNode =
	/*#__PURE__*/
	function (_Component) {
	  inherits(MountNode, _Component);

	  function MountNode() {
	    classCallCheck(this, MountNode);

	    return possibleConstructorReturn(this, getPrototypeOf(MountNode).apply(this, arguments));
	  }

	  createClass(MountNode, [{
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(_ref) {
	      var nextClassName = _ref.className;
	      var currentClassName = this.props.className;
	      return nextClassName !== currentClassName;
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var nodeRef = getNodeRefFromProps(this.props);
	      nodeRegistry.add(nodeRef, this);
	      nodeRegistry.emit(nodeRef, handleClassNamesChange);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      nodeRegistry.emit(getNodeRefFromProps(this.props), handleClassNamesChange);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var nodeRef = getNodeRefFromProps(this.props);
	      nodeRegistry.del(nodeRef, this);
	      nodeRegistry.emit(nodeRef, handleClassNamesChange);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return MountNode;
	}(React.Component);

	defineProperty(MountNode, "propTypes", {
	  /** Additional classes. */
	  className: propTypes.string,

	  /** The DOM node where we will apply class names. Defaults to document.body. */
	  node: propTypes.oneOfType([domNode, refObject])
	});

	/**
	 * A modal can have a header.
	 */

	function ModalHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames(className, 'header');
	  var rest = getUnhandledProps(ModalHeader, props);
	  var ElementType = getElementType(ModalHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ModalHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ModalHeader.create = createShorthandFactory(ModalHeader, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A modal can contain content.
	 */

	function ModalContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      image = props.image,
	      scrolling = props.scrolling;
	  var classes = classNames(className, useKeyOnly(image, 'image'), useKeyOnly(scrolling, 'scrolling'), 'content');
	  var rest = getUnhandledProps(ModalContent, props);
	  var ElementType = getElementType(ModalContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ModalContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A modal can contain image content. */
	  image: propTypes.bool,

	  /** A modal can use the entire size of the screen. */
	  scrolling: propTypes.bool
	};
	ModalContent.create = createShorthandFactory(ModalContent, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A modal can contain a row of actions.
	 */

	var ModalActions =
	/*#__PURE__*/
	function (_Component) {
	  inherits(ModalActions, _Component);

	  function ModalActions() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, ModalActions);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ModalActions)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleButtonOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          lodash.invoke(predefinedProps, 'onClick', e, buttonProps);

	          lodash.invoke(_this.props, 'onActionClick', e, buttonProps);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(ModalActions, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          actions = _this$props.actions,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content;
	      var classes = classNames('actions', className);
	      var rest$$1 = getUnhandledProps(ModalActions, this.props);
	      var ElementType = getElementType(ModalActions, this.props);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes
	        }), children);
	      }

	      if (!isNil$1(content)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes
	        }), content);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), lodash.map(actions, function (action) {
	        return Button.create(action, {
	          overrideProps: _this2.handleButtonOverrides
	        });
	      }));
	    }
	  }]);

	  return ModalActions;
	}(React.Component);

	defineProperty(ModalActions, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Array of shorthand buttons. */
	  actions: collectionShorthand,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /**
	   * Action onClick handler when using shorthand `actions`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props from the clicked action.
	   */
	  onActionClick: every$1([disallow(['children']), propTypes.func])
	});
	ModalActions.create = createShorthandFactory(ModalActions, function (actions) {
	  return {
	    actions: actions
	  };
	});

	/**
	 * A modal can contain a description with one or more paragraphs.
	 */

	function ModalDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('description', className);
	  var rest = getUnhandledProps(ModalDescription, props);
	  var ElementType = getElementType(ModalDescription, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ModalDescription.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	var debug$2 = makeDebugger('modal');
	/**
	 * A modal displays content that temporarily blocks interactions with the main view of a site.
	 * @see Confirm
	 * @see Portal
	 */

	var Modal =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Modal, _Component);

	  function Modal() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Modal);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "dimmerRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "getMountNode", function () {
	      return isBrowser() ? _this.props.mountNode || document.body : null;
	    });

	    defineProperty(assertThisInitialized(_this), "handleActionsOverrides", function (predefinedProps) {
	      return {
	        onActionClick: function onActionClick(e, actionProps) {
	          lodash.invoke(predefinedProps, 'onActionClick', e, actionProps);

	          lodash.invoke(_this.props, 'onActionClick', e, _this.props);

	          _this.handleClose(e);
	        }
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "handleClose", function (e) {
	      debug$2('close()');

	      lodash.invoke(_this.props, 'onClose', e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleDocumentClick", function (e) {
	      debug$2('handleDocumentClick()');
	      var closeOnDimmerClick = _this.props.closeOnDimmerClick;
	      if (!closeOnDimmerClick || doesNodeContainClick(_this.ref.current, e)) return;

	      lodash.invoke(_this.props, 'onClose', e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleIconOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e) {
	          lodash.invoke(predefinedProps, 'onClick', e);

	          _this.handleClose(e);
	        }
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "handleOpen", function (e) {
	      debug$2('open()');

	      lodash.invoke(_this.props, 'onOpen', e, _this.props);

	      _this.trySetState({
	        open: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalMount", function (e) {
	      var eventPool = _this.props.eventPool;
	      debug$2('handlePortalMount()', {
	        eventPool: eventPool
	      });

	      _this.setState({
	        scrolling: false
	      });

	      _this.setPositionAndClassNames();

	      instance$1.sub('click', _this.handleDocumentClick, {
	        pool: eventPool,
	        target: _this.dimmerRef.current
	      });

	      lodash.invoke(_this.props, 'onMount', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalUnmount", function (e) {
	      var eventPool = _this.props.eventPool;
	      debug$2('handlePortalUnmount()', {
	        eventPool: eventPool
	      });
	      cancelAnimationFrame(_this.animationRequestId);
	      instance$1.unsub('click', _this.handleDocumentClick, {
	        pool: eventPool,
	        target: _this.dimmerRef.current
	      });

	      lodash.invoke(_this.props, 'onUnmount', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "setDimmerNodeStyle", function () {
	      debug$2('setDimmerNodeStyle()');

	      if (_this.dimmerRef.current) {
	        _this.dimmerRef.current.style.setProperty('display', 'flex', 'important');
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "setPositionAndClassNames", function () {
	      var dimmer = _this.props.dimmer;
	      var classes;

	      if (dimmer) {
	        classes = 'dimmable dimmed';

	        if (dimmer === 'blurring') {
	          classes += ' blurring';
	        }
	      }

	      var newState = {};

	      if (_this.ref.current) {
	        var _this$ref$current$get = _this.ref.current.getBoundingClientRect(),
	            height = _this$ref$current$get.height; // Leaving the old calculation here since we may need it as an older browser fallback
	        // SEE: https://github.com/Semantic-Org/Semantic-UI/issues/6185#issuecomment-376725956
	        // const marginTop = -Math.round(height / 2)


	        var marginTop = null;
	        var scrolling = height > window.innerHeight;

	        if (_this.state.marginTop !== marginTop) {
	          newState.marginTop = marginTop;
	        }

	        if (_this.state.scrolling !== scrolling) {
	          newState.scrolling = scrolling;
	        }

	        if (scrolling) classes += ' scrolling';
	      }

	      if (_this.state.mountClasses !== classes) newState.mountClasses = classes;
	      if (!lodash.isEmpty(newState)) _this.setState(newState);
	      _this.animationRequestId = requestAnimationFrame(_this.setPositionAndClassNames);

	      _this.setDimmerNodeStyle();
	    });

	    defineProperty(assertThisInitialized(_this), "renderContent", function (rest$$1) {
	      var _this$props = _this.props,
	          actions = _this$props.actions,
	          basic = _this$props.basic,
	          children = _this$props.children,
	          className = _this$props.className,
	          closeIcon = _this$props.closeIcon,
	          content = _this$props.content,
	          header = _this$props.header,
	          mountNode = _this$props.mountNode,
	          size$$1 = _this$props.size,
	          style = _this$props.style;
	      var _this$state = _this.state,
	          marginTop = _this$state.marginTop,
	          mountClasses = _this$state.mountClasses,
	          scrolling = _this$state.scrolling;
	      var classes = classNames('ui', size$$1, useKeyOnly(basic, 'basic'), useKeyOnly(scrolling, 'scrolling'), 'modal transition visible active', className);
	      var ElementType = getElementType(Modal, _this.props);
	      var closeIconName = closeIcon === true ? 'close' : closeIcon;
	      var closeIconJSX = Icon.create(closeIconName, {
	        overrideProps: _this.handleIconOverrides
	      });
	      return React__default.createElement(Ref, {
	        innerRef: _this.ref
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        style: objectSpread({
	          marginTop: marginTop
	        }, style)
	      }), React__default.createElement(MountNode, {
	        className: mountClasses,
	        node: mountNode
	      }), closeIconJSX, isNil$1(children) ? React__default.createElement(React.Fragment, null, ModalHeader.create(header, {
	        autoGenerateKey: false
	      }), ModalContent.create(content, {
	        autoGenerateKey: false
	      }), ModalActions.create(actions, {
	        overrideProps: _this.handleActionsOverrides
	      })) : children));
	    });

	    return _this;
	  }

	  createClass(Modal, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      debug$2('componentWillUnmount()');
	      this.handlePortalUnmount();
	    } // Do not access document when server side rendering

	  }, {
	    key: "render",
	    value: function render() {
	      var open = this.state.open;
	      var _this$props2 = this.props,
	          centered = _this$props2.centered,
	          closeOnDocumentClick = _this$props2.closeOnDocumentClick,
	          dimmer = _this$props2.dimmer,
	          eventPool = _this$props2.eventPool,
	          trigger = _this$props2.trigger;
	      var mountNode = this.getMountNode(); // Short circuit when server side rendering

	      if (!isBrowser()) {
	        return React.isValidElement(trigger) ? trigger : null;
	      }

	      var unhandled = getUnhandledProps(Modal, this.props);
	      var portalPropNames = Portal.handledProps;

	      var rest$$1 = lodash.reduce(unhandled, function (acc, val, key) {
	        if (!lodash.includes(portalPropNames, key)) acc[key] = val;
	        return acc;
	      }, {});

	      var portalProps = lodash.pick(unhandled, portalPropNames); // wrap dimmer modals


	      var dimmerClasses = classNames('ui', dimmer === 'inverted' && 'inverted', !centered && 'top aligned', 'page modals dimmer transition visible active'); // Heads up!
	      //
	      // The SUI CSS selector to prevent the modal itself from blurring requires an immediate .dimmer child:
	      // .blurring.dimmed.dimmable>:not(.dimmer) { ... }
	      //
	      // The .blurring.dimmed.dimmable is the body, so that all body content inside is blurred.
	      // We need the immediate child to be the dimmer to :not() blur the modal itself!
	      // Otherwise, the portal div is also blurred, blurring the modal.
	      //
	      // We cannot them wrap the modalJSX in an actual <Dimmer /> instead, we apply the dimmer classes to the <Portal />.

	      return React__default.createElement(Portal, _extends_1({
	        closeOnDocumentClick: closeOnDocumentClick
	      }, portalProps, {
	        trigger: trigger,
	        eventPool: eventPool,
	        mountNode: mountNode,
	        open: open,
	        onClose: this.handleClose,
	        onMount: this.handlePortalMount,
	        onOpen: this.handleOpen,
	        onUnmount: this.handlePortalUnmount
	      }), React__default.createElement("div", {
	        className: dimmerClasses,
	        ref: this.dimmerRef
	      }, this.renderContent(rest$$1)));
	    }
	  }]);

	  return Modal;
	}(AutoControlledComponent);

	defineProperty(Modal, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Shorthand for Modal.Actions. Typically an array of button shorthand. */
	  actions: itemShorthand,

	  /** A modal can reduce its complexity */
	  basic: propTypes.bool,

	  /** A modal can be vertically centered in the viewport */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for the close icon. Closes the modal on click. */
	  closeIcon: propTypes.oneOfType([propTypes.node, propTypes.object, propTypes.bool]),

	  /** Whether or not the Modal should close when the dimmer is clicked. */
	  closeOnDimmerClick: propTypes.bool,

	  /** Whether or not the Modal should close when the document is clicked. */
	  closeOnDocumentClick: propTypes.bool,

	  /** Simple text content for the Modal. */
	  content: itemShorthand,

	  /** Initial value of open. */
	  defaultOpen: propTypes.bool,

	  /** A Modal can appear in a dimmer. */
	  dimmer: propTypes.oneOf([true, 'inverted', 'blurring']),

	  /** Event pool namespace that is used to handle component events */
	  eventPool: propTypes.string,

	  /** Modal displayed above the content in bold. */
	  header: itemShorthand,

	  /** The node where the modal should mount. Defaults to document.body. */
	  mountNode: propTypes.any,

	  /**
	   * Action onClick handler when using shorthand `actions`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onActionClick: propTypes.func,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: propTypes.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: propTypes.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: propTypes.func,

	  /** Controls whether or not the Modal is displayed. */
	  open: propTypes.bool,

	  /** A modal can vary in size */
	  size: propTypes.oneOf(['mini', 'tiny', 'small', 'large', 'fullscreen']),

	  /** Custom styles. */
	  style: propTypes.object,

	  /** Element to be rendered in-place where the portal is defined. */
	  trigger: propTypes.node
	  /**
	   * NOTE: Any unhandled props that are defined in Portal are passed-through
	   * to the wrapping Portal.
	   */

	});

	defineProperty(Modal, "defaultProps", {
	  centered: true,
	  dimmer: true,
	  closeOnDimmerClick: true,
	  closeOnDocumentClick: false,
	  eventPool: 'Modal'
	});

	defineProperty(Modal, "autoControlledProps", ['open']);

	defineProperty(Modal, "Header", ModalHeader);

	defineProperty(Modal, "Content", ModalContent);

	defineProperty(Modal, "Description", ModalDescription);

	defineProperty(Modal, "Actions", ModalActions);

	/**
	 * A Confirm modal gives the user a choice to confirm or cancel an action/
	 * @see Modal
	 */

	var Confirm =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Confirm, _Component);

	  function Confirm() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Confirm);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Confirm)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleCancel", function (e) {
	      lodash.invoke(_this.props, 'onCancel', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleCancelOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          lodash.invoke(predefinedProps, 'onClick', e, buttonProps);

	          _this.handleCancel(e);
	        }
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "handleConfirmOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          lodash.invoke(predefinedProps, 'onClick', e, buttonProps);

	          lodash.invoke(_this.props, 'onConfirm', e, _this.props);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(Confirm, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          cancelButton = _this$props.cancelButton,
	          confirmButton = _this$props.confirmButton,
	          content = _this$props.content,
	          header = _this$props.header,
	          open = _this$props.open,
	          size$$1 = _this$props.size;
	      var rest$$1 = getUnhandledProps(Confirm, this.props); // `open` is auto controlled by the Modal
	      // It cannot be present (even undefined) with `defaultOpen`
	      // only apply it if the user provided an open prop

	      var openProp = {};
	      if (lodash.has(this.props, 'open')) openProp.open = open;
	      return React__default.createElement(Modal, _extends_1({}, rest$$1, openProp, {
	        size: size$$1,
	        onClose: this.handleCancel
	      }), Modal.Header.create(header, {
	        autoGenerateKey: false
	      }), Modal.Content.create(content, {
	        autoGenerateKey: false
	      }), React__default.createElement(Modal.Actions, null, Button.create(cancelButton, {
	        autoGenerateKey: false,
	        overrideProps: this.handleCancelOverrides
	      }), Button.create(confirmButton, {
	        autoGenerateKey: false,
	        defaultProps: {
	          primary: true
	        },
	        overrideProps: this.handleConfirmOverrides
	      })));
	    }
	  }]);

	  return Confirm;
	}(React.Component);

	defineProperty(Confirm, "propTypes", {
	  /** The cancel button text. */
	  cancelButton: itemShorthand,

	  /** The OK button text. */
	  confirmButton: itemShorthand,

	  /** The ModalContent text. */
	  content: itemShorthand,

	  /** The ModalHeader text. */
	  header: itemShorthand,

	  /**
	   * Called when the Modal is closed without clicking confirm.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onCancel: propTypes.func,

	  /**
	   * Called when the OK button is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onConfirm: propTypes.func,

	  /** Whether or not the modal is visible. */
	  open: propTypes.bool,

	  /** A Confirm can vary in size */
	  size: propTypes.oneOf(['mini', 'tiny', 'small', 'large', 'fullscreen'])
	});

	defineProperty(Confirm, "defaultProps", {
	  cancelButton: 'Cancel',
	  confirmButton: 'OK',
	  content: 'Are you sure?',
	  size: 'small'
	});

	/**
	 * A menu item may include a header or may itself be a header.
	 */

	function MenuHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(MenuHeader, props);
	  var ElementType = getElementType(MenuHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	MenuHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A menu can contain an item.
	 */

	var MenuItem =
	/*#__PURE__*/
	function (_Component) {
	  inherits(MenuItem, _Component);

	  function MenuItem() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, MenuItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(MenuItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          fitted = _this$props.fitted,
	          header = _this$props.header,
	          icon = _this$props.icon,
	          link = _this$props.link,
	          name = _this$props.name,
	          onClick = _this$props.onClick,
	          position = _this$props.position;
	      var classes = classNames(color, position, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(icon === true || icon && !(name || content), 'icon'), useKeyOnly(header, 'header'), useKeyOnly(link, 'link'), useKeyOrValueAndKey(fitted, 'fitted'), 'item', className);
	      var ElementType = getElementType(MenuItem, this.props, function () {
	        if (onClick) return 'a';
	      });
	      var rest$$1 = getUnhandledProps(MenuItem, this.props);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onClick: this.handleClick
	      }), Icon.create(icon, {
	        autoGenerateKey: false
	      }), isNil$1(content) ? lodash.startCase(name) : content);
	    }
	  }]);

	  return MenuItem;
	}(React.Component);

	defineProperty(MenuItem, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A menu item can be active. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Additional colors can be specified. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A menu item can be disabled. */
	  disabled: propTypes.bool,

	  /** A menu item or menu can remove element padding, vertically or horizontally. */
	  fitted: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['horizontally', 'vertically'])]),

	  /** A menu item may include a header or may itself be a header. */
	  header: propTypes.bool,

	  /** MenuItem can be only icon. */
	  icon: propTypes.oneOfType([propTypes.bool, itemShorthand]),

	  /** MenuItem index inside Menu. */
	  index: propTypes.number,

	  /** A menu item can be link. */
	  link: propTypes.bool,

	  /** Internal name of the MenuItem. */
	  name: propTypes.string,

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /** A menu item can take left or right position. */
	  position: propTypes.oneOf(['left', 'right'])
	});
	MenuItem.create = createShorthandFactory(MenuItem, function (val) {
	  return {
	    content: val,
	    name: val
	  };
	});

	/**
	 * A menu can contain a sub menu.
	 */

	function MenuMenu(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      position = props.position;
	  var classes = classNames(position, 'menu', className);
	  var rest = getUnhandledProps(MenuMenu, props);
	  var ElementType = getElementType(MenuMenu, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	MenuMenu.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A sub menu can take left or right position. */
	  position: propTypes.oneOf(['left', 'right'])
	};

	/**
	 * A menu displays grouped navigation actions.
	 * @see Dropdown
	 */

	var Menu =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Menu, _Component);

	  function Menu() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Menu);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleItemOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, itemProps) {
	          var index = itemProps.index;

	          _this.trySetState({
	            activeIndex: index
	          });

	          lodash.invoke(predefinedProps, 'onClick', e, itemProps);

	          lodash.invoke(_this.props, 'onItemClick', e, itemProps);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(Menu, [{
	    key: "renderItems",
	    value: function renderItems() {
	      var _this2 = this;

	      var items = this.props.items;
	      var activeIndex = this.state.activeIndex;
	      return lodash.map(items, function (item, index) {
	        return MenuItem.create(item, {
	          defaultProps: {
	            active: parseInt(activeIndex, 10) === index,
	            index: index
	          },
	          overrideProps: _this2.handleItemOverrides
	        });
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          attached = _this$props.attached,
	          borderless = _this$props.borderless,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          compact$$1 = _this$props.compact,
	          fixed = _this$props.fixed,
	          floated = _this$props.floated,
	          fluid = _this$props.fluid,
	          icon = _this$props.icon,
	          inverted = _this$props.inverted,
	          pagination = _this$props.pagination,
	          pointing = _this$props.pointing,
	          secondary = _this$props.secondary,
	          size$$1 = _this$props.size,
	          stackable = _this$props.stackable,
	          tabular = _this$props.tabular,
	          text = _this$props.text,
	          vertical = _this$props.vertical,
	          widths = _this$props.widths;
	      var classes = classNames('ui', color, size$$1, useKeyOnly(borderless, 'borderless'), useKeyOnly(compact$$1, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(pagination, 'pagination'), useKeyOnly(pointing, 'pointing'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stackable, 'stackable'), useKeyOnly(text, 'text'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(floated, 'floated'), useKeyOrValueAndKey(icon, 'icon'), useKeyOrValueAndKey(tabular, 'tabular'), useValueAndKey(fixed, 'fixed'), useWidthProp(widths, 'item'), className, 'menu');
	      var rest$$1 = getUnhandledProps(Menu, this.props);
	      var ElementType = getElementType(Menu, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), isNil$1(children) ? this.renderItems() : children);
	    }
	  }]);

	  return Menu;
	}(AutoControlledComponent);

	defineProperty(Menu, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Index of the currently active item. */
	  activeIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** A menu may be attached to other content segments. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top', 'bottom'])]),

	  /** A menu item or menu can have no borders. */
	  borderless: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Additional colors can be specified. */
	  color: propTypes.oneOf(COLORS),

	  /** A menu can take up only the space necessary to fit its content. */
	  compact: propTypes.bool,

	  /** Initial activeIndex value. */
	  defaultActiveIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** A menu can be fixed to a side of its context. */
	  fixed: propTypes.oneOf(['left', 'right', 'bottom', 'top']),

	  /** A menu can be floated. */
	  floated: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['right'])]),

	  /** A vertical menu may take the size of its container. */
	  fluid: propTypes.bool,

	  /** A menu may have just icons (bool) or labeled icons. */
	  icon: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['labeled'])]),

	  /** A menu may have its colors inverted to show greater contrast. */
	  inverted: propTypes.bool,

	  /** Shorthand array of props for Menu. */
	  items: collectionShorthand,

	  /**
	   * onClick handler for MenuItem. Mutually exclusive with children.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onItemClick: every$1([disallow(['children']), propTypes.func]),

	  /** A pagination menu is specially formatted to present links to pages of content. */
	  pagination: propTypes.bool,

	  /** A menu can point to show its relationship to nearby content. */
	  pointing: propTypes.bool,

	  /** A menu can adjust its appearance to de-emphasize its contents. */
	  secondary: propTypes.bool,

	  /** A menu can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium', 'big')),

	  /** A menu can stack at mobile resolutions. */
	  stackable: propTypes.bool,

	  /** A menu can be formatted to show tabs of information. */
	  tabular: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['right'])]),

	  /** A menu can be formatted for text content. */
	  text: propTypes.bool,

	  /** A vertical menu displays elements vertically. */
	  vertical: propTypes.bool,

	  /** A menu can have its items divided evenly. */
	  widths: propTypes.oneOf(WIDTHS)
	});

	defineProperty(Menu, "autoControlledProps", ['activeIndex']);

	defineProperty(Menu, "Header", MenuHeader);

	defineProperty(Menu, "Item", MenuItem);

	defineProperty(Menu, "Menu", MenuMenu);

	Menu.create = createShorthandFactory(Menu, function (items) {
	  return {
	    items: items
	  };
	});

	/**
	 * An item of a pagination.
	 */

	var PaginationItem =
	/*#__PURE__*/
	function (_Component) {
	  inherits(PaginationItem, _Component);

	  function PaginationItem() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, PaginationItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(PaginationItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleKeyDown", function (e) {
	      lodash.invoke(_this.props, 'onKeyDown', e, _this.props);

	      if (keyboardKey_1.getCode(e) === keyboardKey_1.Enter) lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleOverrides", function () {
	      return {
	        onClick: _this.handleClick,
	        onKeyDown: _this.handleKeyDown
	      };
	    });

	    return _this;
	  }

	  createClass(PaginationItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          type = _this$props.type;
	      var disabled = this.props.disabled || type === 'ellipsisItem';
	      return MenuItem.create(this.props, {
	        defaultProps: {
	          active: active,
	          'aria-current': active,
	          'aria-disabled': disabled,
	          disabled: disabled,
	          onClick: this.handleClick,
	          onKeyDown: this.handleKeyDown,
	          tabIndex: disabled ? -1 : 0
	        },
	        overrideProps: this.handleOverrides
	      });
	    }
	  }]);

	  return PaginationItem;
	}(React.Component);

	defineProperty(PaginationItem, "propTypes", {
	  /** A pagination item can be active. */
	  active: propTypes.bool,

	  /** A pagination item can be disabled. */
	  disabled: propTypes.bool,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * Called on key down.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onKeyDown: propTypes.func,

	  /** A pagination should have a type. */
	  type: propTypes.oneOf(['ellipsisItem', 'firstItem', 'prevItem', 'pageItem', 'nextItem', 'lastItem'])
	});

	PaginationItem.create = createShorthandFactory(PaginationItem, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A component to render a pagination.
	 */

	var Pagination =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Pagination, _Component);

	  function Pagination() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Pagination);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Pagination)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleItemClick", function (e, _ref) {
	      var nextActivePage = _ref.value;
	      var prevActivePage = _this.state.activePage; // Heads up! We need the cast to the "number" type there, as `activePage` can be a string

	      if (+prevActivePage === +nextActivePage) return;

	      _this.trySetState({
	        activePage: nextActivePage
	      });

	      lodash.invoke(_this.props, 'onPageChange', e, objectSpread({}, _this.props, {
	        activePage: nextActivePage
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleItemOverrides", function (active, type, value) {
	      return function (predefinedProps) {
	        return {
	          active: active,
	          type: type,
	          key: "".concat(type, "-").concat(value),
	          onClick: function onClick(e, itemProps) {
	            lodash.invoke(predefinedProps, 'onClick', e, itemProps);

	            if (itemProps.type !== 'ellipsisItem') _this.handleItemClick(e, itemProps);
	          }
	        };
	      };
	    });

	    return _this;
	  }

	  createClass(Pagination, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          boundaryRange = _this$props.boundaryRange,
	          disabled = _this$props.disabled,
	          ellipsisItem = _this$props.ellipsisItem,
	          siblingRange = _this$props.siblingRange,
	          totalPages = _this$props.totalPages;
	      var activePage = this.state.activePage;
	      var items = createPaginationItems({
	        activePage: activePage,
	        boundaryRange: boundaryRange,
	        hideEllipsis: lodash.isNil(ellipsisItem),
	        siblingRange: siblingRange,
	        totalPages: totalPages
	      });
	      var rest$$1 = getUnhandledProps(Pagination, this.props);
	      return React__default.createElement(Menu, _extends_1({}, rest$$1, {
	        "aria-label": ariaLabel,
	        pagination: true,
	        role: "navigation"
	      }), lodash.map(items, function (_ref2) {
	        var active = _ref2.active,
	            type = _ref2.type,
	            value = _ref2.value;
	        return PaginationItem.create(_this2.props[type], {
	          defaultProps: {
	            content: value,
	            disabled: disabled,
	            value: value
	          },
	          overrideProps: _this2.handleItemOverrides(active, type, value)
	        });
	      }));
	    }
	  }]);

	  return Pagination;
	}(AutoControlledComponent);

	defineProperty(Pagination, "propTypes", {
	  /** A pagination item can have an aria label. */
	  'aria-label': propTypes.string,

	  /** Initial activePage value. */
	  defaultActivePage: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Index of the currently active page. */
	  activePage: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Number of always visible pages at the beginning and end. */
	  boundaryRange: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** A pagination can be disabled. */
	  disabled: propTypes.bool,

	  /** A shorthand for PaginationItem. */
	  ellipsisItem: itemShorthand,

	  /** A shorthand for PaginationItem. */
	  firstItem: itemShorthand,

	  /** A shorthand for PaginationItem. */
	  lastItem: itemShorthand,

	  /** A shorthand for PaginationItem. */
	  nextItem: itemShorthand,

	  /** A shorthand for PaginationItem. */
	  pageItem: itemShorthand,

	  /** A shorthand for PaginationItem. */
	  prevItem: itemShorthand,

	  /**
	   * Called on change of an active page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onPageChange: propTypes.func,

	  /** Number of always visible pages before and after the current one. */
	  siblingRange: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Total number of pages. */
	  totalPages: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired
	});

	defineProperty(Pagination, "autoControlledProps", ['activePage']);

	defineProperty(Pagination, "defaultProps", {
	  'aria-label': 'Pagination Navigation',
	  boundaryRange: 1,
	  ellipsisItem: '...',
	  firstItem: {
	    'aria-label': 'First item',
	    content: '«'
	  },
	  lastItem: {
	    'aria-label': 'Last item',
	    content: '»'
	  },
	  nextItem: {
	    'aria-label': 'Next item',
	    content: '⟩'
	  },
	  pageItem: {},
	  prevItem: {
	    'aria-label': 'Previous item',
	    content: '⟨'
	  },
	  siblingRange: 1
	});

	defineProperty(Pagination, "Item", PaginationItem);

	var debug$3 = makeDebugger('checkbox');
	/**
	 * A checkbox allows a user to select a value from a small set of options, often binary.
	 * @see Form
	 * @see Radio
	 */

	var Checkbox =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Checkbox, _Component);

	  function Checkbox() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Checkbox);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "inputRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "labelRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "canToggle", function () {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          radio = _this$props.radio,
	          readOnly = _this$props.readOnly;
	      var checked = _this.state.checked;
	      return !disabled && !readOnly && !(radio && checked);
	    });

	    defineProperty(assertThisInitialized(_this), "computeTabIndex", function () {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!lodash.isNil(tabIndex)) return tabIndex;
	      return disabled ? -1 : 0;
	    });

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      debug$3('handleClick()', lodash.get(e, 'target.tagName'));
	      var id = _this.props.id;
	      var _this$state = _this.state,
	          checked = _this$state.checked,
	          indeterminate = _this$state.indeterminate;
	      var hasId = !lodash.isNil(id);
	      var isLabelClick = e.target === _this.labelRef.current;
	      var isLabelClickAndForwardedToInput = isLabelClick && hasId; // https://github.com/Semantic-Org/Semantic-UI-React/pull/3351

	      if (!isLabelClickAndForwardedToInput) {
	        lodash.invoke(_this.props, 'onClick', e, objectSpread({}, _this.props, {
	          checked: !checked,
	          indeterminate: !!indeterminate
	        }));
	      }

	      if (_this.isClickFromMouse) {
	        _this.isClickFromMouse = false;

	        if (isLabelClick && !hasId) {
	          _this.handleChange(e);
	        }

	        if (hasId) {
	          // To prevent two clicks from being fired from the component we have to stop the propagation
	          // from the "input" click: https://github.com/Semantic-Org/Semantic-UI-React/issues/3433
	          e.stopPropagation();
	        }
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleChange", function (e) {
	      var checked = _this.state.checked;
	      if (!_this.canToggle()) return;
	      debug$3('handleChange()', lodash.get(e, 'target.tagName'));

	      lodash.invoke(_this.props, 'onChange', e, objectSpread({}, _this.props, {
	        checked: !checked,
	        indeterminate: false
	      }));

	      _this.trySetState({
	        checked: !checked,
	        indeterminate: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseDown", function (e) {
	      debug$3('handleMouseDown()');
	      var _this$state2 = _this.state,
	          checked = _this$state2.checked,
	          indeterminate = _this$state2.indeterminate;

	      lodash.invoke(_this.props, 'onMouseDown', e, objectSpread({}, _this.props, {
	        checked: !!checked,
	        indeterminate: !!indeterminate
	      }));

	      lodash.invoke(_this.inputRef.current, 'focus'); // Heads up!
	      // We need to call "preventDefault" to keep element focused.


	      e.preventDefault();
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseUp", function (e) {
	      debug$3('handleMouseUp()');
	      var _this$state3 = _this.state,
	          checked = _this$state3.checked,
	          indeterminate = _this$state3.indeterminate;
	      _this.isClickFromMouse = true;

	      lodash.invoke(_this.props, 'onMouseUp', e, objectSpread({}, _this.props, {
	        checked: !!checked,
	        indeterminate: !!indeterminate
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "setIndeterminate", function () {
	      var indeterminate = _this.state.indeterminate;

	      lodash.set(_this.inputRef, 'current.indeterminate', !!indeterminate);
	    });

	    return _this;
	  }

	  createClass(Checkbox, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.setIndeterminate();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.setIndeterminate();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props3 = this.props,
	          className = _this$props3.className,
	          disabled = _this$props3.disabled,
	          label = _this$props3.label,
	          id = _this$props3.id,
	          name = _this$props3.name,
	          radio = _this$props3.radio,
	          readOnly = _this$props3.readOnly,
	          slider = _this$props3.slider,
	          toggle = _this$props3.toggle,
	          type = _this$props3.type,
	          value = _this$props3.value;
	      var _this$state4 = this.state,
	          checked = _this$state4.checked,
	          indeterminate = _this$state4.indeterminate;
	      var classes = classNames('ui', useKeyOnly(checked, 'checked'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), // auto apply fitted class to compact white space when there is no label
	      // https://semantic-ui.com/modules/checkbox.html#fitted
	      useKeyOnly(lodash.isNil(label), 'fitted'), useKeyOnly(radio, 'radio'), useKeyOnly(readOnly, 'read-only'), useKeyOnly(slider, 'slider'), useKeyOnly(toggle, 'toggle'), 'checkbox', className);
	      var unhandled = getUnhandledProps(Checkbox, this.props);
	      var ElementType = getElementType(Checkbox, this.props);

	      var _partitionHTMLProps = partitionHTMLProps(unhandled, {
	        htmlProps: htmlInputAttrs
	      }),
	          _partitionHTMLProps2 = slicedToArray(_partitionHTMLProps, 2),
	          htmlInputProps$$1 = _partitionHTMLProps2[0],
	          rest$$1 = _partitionHTMLProps2[1]; // Heads Up!
	      // Do not remove empty labels, they are required by SUI CSS


	      var labelElement = createHTMLLabel(label, {
	        defaultProps: {
	          htmlFor: id
	        },
	        autoGenerateKey: false
	      }) || React__default.createElement("label", {
	        htmlFor: id
	      });
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onClick: this.handleClick,
	        onChange: this.handleChange,
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp
	      }), React__default.createElement(Ref, {
	        innerRef: this.inputRef
	      }, React__default.createElement("input", _extends_1({}, htmlInputProps$$1, {
	        checked: checked,
	        className: "hidden",
	        disabled: disabled,
	        id: id,
	        name: name,
	        readOnly: true,
	        tabIndex: this.computeTabIndex(),
	        type: type,
	        value: value
	      }))), React__default.createElement(Ref, {
	        innerRef: this.labelRef
	      }, labelElement));
	    }
	  }]);

	  return Checkbox;
	}(AutoControlledComponent);

	defineProperty(Checkbox, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Whether or not checkbox is checked. */
	  checked: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** The initial value of checked. */
	  defaultChecked: propTypes.bool,

	  /** Whether or not checkbox is indeterminate. */
	  defaultIndeterminate: propTypes.bool,

	  /** A checkbox can appear disabled and be unable to change states */
	  disabled: propTypes.bool,

	  /** Removes padding for a label. Auto applied when there is no label. */
	  fitted: propTypes.bool,

	  /** A unique identifier. */
	  id: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Whether or not checkbox is indeterminate. */
	  indeterminate: propTypes.bool,

	  /** The text of the associated label element. */
	  label: itemShorthand,

	  /** The HTML input name. */
	  name: propTypes.string,

	  /**
	   * Called when the user attempts to change the checked state.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed checked/indeterminate state.
	   */
	  onChange: propTypes.func,

	  /**
	   * Called when the checkbox or label is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onClick: propTypes.func,

	  /**
	   * Called when the user presses down on the mouse.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onMouseDown: propTypes.func,

	  /**
	   * Called when the user releases the mouse.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onMouseUp: propTypes.func,

	  /** Format as a radio element. This means it is an exclusive option. */
	  radio: every$1([propTypes.bool, disallow(['slider', 'toggle'])]),

	  /** A checkbox can be read-only and unable to change states. */
	  readOnly: propTypes.bool,

	  /** Format to emphasize the current selection state. */
	  slider: every$1([propTypes.bool, disallow(['radio', 'toggle'])]),

	  /** A checkbox can receive focus. */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Format to show an on or off choice. */
	  toggle: every$1([propTypes.bool, disallow(['radio', 'slider'])]),

	  /** HTML input type, either checkbox or radio. */
	  type: propTypes.oneOf(['checkbox', 'radio']),

	  /** The HTML input value. */
	  value: propTypes.oneOfType([propTypes.string, propTypes.number])
	});

	defineProperty(Checkbox, "defaultProps", {
	  type: 'checkbox'
	});

	defineProperty(Checkbox, "autoControlledProps", ['checked', 'indeterminate']);

	/**
	 * A Radio is sugar for <Checkbox radio />.
	 * Useful for exclusive groups of sliders or toggles.
	 * @see Checkbox
	 * @see Form
	 */

	function Radio(props) {
	  var slider = props.slider,
	      toggle = props.toggle,
	      type = props.type;
	  var rest = getUnhandledProps(Radio, props); // const ElementType = getElementType(Radio, props)
	  // radio, slider, toggle are exclusive
	  // use an undefined radio if slider or toggle are present

	  var radio = !(slider || toggle) || undefined;
	  return React__default.createElement(Checkbox, _extends_1({}, rest, {
	    type: type,
	    radio: radio,
	    slider: slider,
	    toggle: toggle
	  }));
	}

	Radio.propTypes = {
	  /** Format to emphasize the current selection state. */
	  slider: Checkbox.propTypes.slider,

	  /** Format to show an on or off choice. */
	  toggle: Checkbox.propTypes.toggle,

	  /** HTML input type, either checkbox or radio. */
	  type: Checkbox.propTypes.type
	};
	Radio.defaultProps = {
	  type: 'radio'
	};

	var fitsMaxWidth = function fitsMaxWidth(width, maxWidth) {
	  return lodash.isNil(maxWidth) ? true : width <= maxWidth;
	};

	var fitsMinWidth = function fitsMinWidth(width, minWidth) {
	  return lodash.isNil(minWidth) ? true : width >= minWidth;
	};

	var isVisible = function isVisible(width, _ref) {
	  var maxWidth = _ref.maxWidth,
	      minWidth = _ref.minWidth;
	  return fitsMinWidth(width, minWidth) && fitsMaxWidth(width, maxWidth);
	};

	/**
	 * Responsive can control visibility of content.
	 */

	var Responsive =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Responsive, _Component);

	  function Responsive() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Responsive);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Responsive)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "state", {
	      visible: true
	    });

	    defineProperty(assertThisInitialized(_this), "handleResize", function (e) {
	      if (_this.ticking) return;
	      _this.ticking = true;
	      _this.frameId = requestAnimationFrame(function () {
	        return _this.handleUpdate(e);
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleUpdate", function (e) {
	      _this.ticking = false;
	      var visible = _this.state.visible;

	      var width = lodash.invoke(_this.props, 'getWidth');

	      var nextVisible = isVisible(width, _this.props);
	      if (visible !== nextVisible) _this.setState({
	        visible: nextVisible
	      });

	      lodash.invoke(_this.props, 'onUpdate', e, objectSpread({}, _this.props, {
	        width: width
	      }));
	    });

	    return _this;
	  }

	  createClass(Responsive, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var fireOnMount = this.props.fireOnMount;
	      instance$1.sub('resize', this.handleResize, {
	        target: 'window'
	      });
	      if (fireOnMount) this.handleUpdate();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      instance$1.unsub('resize', this.handleResize, {
	        target: 'window'
	      });
	      cancelAnimationFrame(this.frameId);
	    } // ----------------------------------------
	    // Event handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var children = this.props.children;
	      var visible = this.state.visible;
	      var ElementType = getElementType(Responsive, this.props);
	      var rest$$1 = getUnhandledProps(Responsive, this.props);
	      if (visible) return React__default.createElement(ElementType, rest$$1, children);
	      return null;
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(props) {
	      var width = lodash.invoke(props, 'getWidth');

	      var visible = isVisible(width, props);
	      return {
	        visible: visible
	      };
	    }
	  }]);

	  return Responsive;
	}(React.Component);

	defineProperty(Responsive, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Fires callbacks immediately after mount. */
	  fireOnMount: propTypes.bool,

	  /**
	   * Called to get width of screen. Defaults to using `window.innerWidth` when in a browser;
	   * otherwise, assumes a width of 0.
	   */
	  getWidth: propTypes.func,

	  /** The maximum width at which content will be displayed. */
	  maxWidth: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** The minimum width at which content will be displayed. */
	  minWidth: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Called on update.
	   *
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onUpdate: propTypes.func
	});

	defineProperty(Responsive, "defaultProps", {
	  getWidth: function getWidth() {
	    return isBrowser() ? window.innerWidth : 0;
	  }
	});

	defineProperty(Responsive, "onlyMobile", {
	  minWidth: 320,
	  maxWidth: 767
	});

	defineProperty(Responsive, "onlyTablet", {
	  minWidth: 768,
	  maxWidth: 991
	});

	defineProperty(Responsive, "onlyComputer", {
	  minWidth: 992
	});

	defineProperty(Responsive, "onlyLargeScreen", {
	  minWidth: 1200,
	  maxWidth: 1919
	});

	defineProperty(Responsive, "onlyWidescreen", {
	  minWidth: 1920
	});

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	var superPropBase = _superPropBase;

	var get$1 = createCommonjsModule(function (module) {
	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    module.exports = _get = Reflect.get;
	  } else {
	    module.exports = _get = function _get(target, property, receiver) {
	      var base = superPropBase(target, property);
	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	module.exports = _get;
	});

	//

	var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};

	/**
	 * A dropdown menu can contain dividers to separate related content.
	 */

	function DropdownDivider(props) {
	  var className = props.className;
	  var classes = classNames('divider', className);
	  var rest = getUnhandledProps(DropdownDivider, props);
	  var ElementType = getElementType(DropdownDivider, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }));
	}

	DropdownDivider.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string
	};

	var names = ['ad', 'andorra', 'ae', 'united arab emirates', 'uae', 'af', 'afghanistan', 'ag', 'antigua', 'ai', 'anguilla', 'al', 'albania', 'am', 'armenia', 'an', 'netherlands antilles', 'ao', 'angola', 'ar', 'argentina', 'as', 'american samoa', 'at', 'austria', 'au', 'australia', 'aw', 'aruba', 'ax', 'aland islands', 'az', 'azerbaijan', 'ba', 'bosnia', 'bb', 'barbados', 'bd', 'bangladesh', 'be', 'belgium', 'bf', 'burkina faso', 'bg', 'bulgaria', 'bh', 'bahrain', 'bi', 'burundi', 'bj', 'benin', 'bm', 'bermuda', 'bn', 'brunei', 'bo', 'bolivia', 'br', 'brazil', 'bs', 'bahamas', 'bt', 'bhutan', 'bv', 'bouvet island', 'bw', 'botswana', 'by', 'belarus', 'bz', 'belize', 'ca', 'canada', 'cc', 'cocos islands', 'cd', 'congo', 'cf', 'central african republic', 'cg', 'congo brazzaville', 'ch', 'switzerland', 'ci', 'cote divoire', 'ck', 'cook islands', 'cl', 'chile', 'cm', 'cameroon', 'cn', 'china', 'co', 'colombia', 'cr', 'costa rica', 'cs', 'cu', 'cuba', 'cv', 'cape verde', 'cx', 'christmas island', 'cy', 'cyprus', 'cz', 'czech republic', 'de', 'germany', 'dj', 'djibouti', 'dk', 'denmark', 'dm', 'dominica', 'do', 'dominican republic', 'dz', 'algeria', 'ec', 'ecuador', 'ee', 'estonia', 'eg', 'egypt', 'eh', 'western sahara', 'er', 'eritrea', 'es', 'spain', 'et', 'ethiopia', 'eu', 'european union', 'fi', 'finland', 'fj', 'fiji', 'fk', 'falkland islands', 'fm', 'micronesia', 'fo', 'faroe islands', 'fr', 'france', 'ga', 'gabon', 'gb', 'uk', 'united kingdom', 'gd', 'grenada', 'ge', 'georgia', 'gf', 'french guiana', 'gh', 'ghana', 'gi', 'gibraltar', 'gl', 'greenland', 'gm', 'gambia', 'gn', 'guinea', 'gp', 'guadeloupe', 'gq', 'equatorial guinea', 'gr', 'greece', 'gs', 'sandwich islands', 'gt', 'guatemala', 'gu', 'guam', 'gw', 'guinea-bissau', 'gy', 'guyana', 'hk', 'hong kong', 'hm', 'heard island', 'hn', 'honduras', 'hr', 'croatia', 'ht', 'haiti', 'hu', 'hungary', 'id', 'indonesia', 'ie', 'ireland', 'il', 'israel', 'in', 'india', 'io', 'indian ocean territory', 'iq', 'iraq', 'ir', 'iran', 'is', 'iceland', 'it', 'italy', 'jm', 'jamaica', 'jo', 'jordan', 'jp', 'japan', 'ke', 'kenya', 'kg', 'kyrgyzstan', 'kh', 'cambodia', 'ki', 'kiribati', 'km', 'comoros', 'kn', 'saint kitts and nevis', 'kp', 'north korea', 'kr', 'south korea', 'kw', 'kuwait', 'ky', 'cayman islands', 'kz', 'kazakhstan', 'la', 'laos', 'lb', 'lebanon', 'lc', 'saint lucia', 'li', 'liechtenstein', 'lk', 'sri lanka', 'lr', 'liberia', 'ls', 'lesotho', 'lt', 'lithuania', 'lu', 'luxembourg', 'lv', 'latvia', 'ly', 'libya', 'ma', 'morocco', 'mc', 'monaco', 'md', 'moldova', 'me', 'montenegro', 'mg', 'madagascar', 'mh', 'marshall islands', 'mk', 'macedonia', 'ml', 'mali', 'mm', 'myanmar', 'burma', 'mn', 'mongolia', 'mo', 'macau', 'mp', 'northern mariana islands', 'mq', 'martinique', 'mr', 'mauritania', 'ms', 'montserrat', 'mt', 'malta', 'mu', 'mauritius', 'mv', 'maldives', 'mw', 'malawi', 'mx', 'mexico', 'my', 'malaysia', 'mz', 'mozambique', 'na', 'namibia', 'nc', 'new caledonia', 'ne', 'niger', 'nf', 'norfolk island', 'ng', 'nigeria', 'ni', 'nicaragua', 'nl', 'netherlands', 'no', 'norway', 'np', 'nepal', 'nr', 'nauru', 'nu', 'niue', 'nz', 'new zealand', 'om', 'oman', 'pa', 'panama', 'pe', 'peru', 'pf', 'french polynesia', 'pg', 'new guinea', 'ph', 'philippines', 'pk', 'pakistan', 'pl', 'poland', 'pm', 'saint pierre', 'pn', 'pitcairn islands', 'pr', 'puerto rico', 'ps', 'palestine', 'pt', 'portugal', 'pw', 'palau', 'py', 'paraguay', 'qa', 'qatar', 're', 'reunion', 'ro', 'romania', 'rs', 'serbia', 'ru', 'russia', 'rw', 'rwanda', 'sa', 'saudi arabia', 'sb', 'solomon islands', 'sc', 'seychelles', 'gb sct', 'scotland', 'sd', 'sudan', 'se', 'sweden', 'sg', 'singapore', 'sh', 'saint helena', 'si', 'slovenia', 'sj', 'svalbard', 'jan mayen', 'sk', 'slovakia', 'sl', 'sierra leone', 'sm', 'san marino', 'sn', 'senegal', 'so', 'somalia', 'sr', 'suriname', 'st', 'sao tome', 'sv', 'el salvador', 'sy', 'syria', 'sz', 'swaziland', 'tc', 'caicos islands', 'td', 'chad', 'tf', 'french territories', 'tg', 'togo', 'th', 'thailand', 'tj', 'tajikistan', 'tk', 'tokelau', 'tl', 'timorleste', 'tm', 'turkmenistan', 'tn', 'tunisia', 'to', 'tonga', 'tr', 'turkey', 'tt', 'trinidad', 'tv', 'tuvalu', 'tw', 'taiwan', 'tz', 'tanzania', 'ua', 'ukraine', 'ug', 'uganda', 'um', 'us minor islands', 'us', 'america', 'united states', 'uy', 'uruguay', 'uz', 'uzbekistan', 'va', 'vatican city', 'vc', 'saint vincent', 've', 'venezuela', 'vg', 'british virgin islands', 'vi', 'us virgin islands', 'vn', 'vietnam', 'vu', 'vanuatu', 'gb wls', 'wales', 'wf', 'wallis and futuna', 'ws', 'samoa', 'ye', 'yemen', 'yt', 'mayotte', 'za', 'south africa', 'zm', 'zambia', 'zw', 'zimbabwe'];
	/**
	 * A flag is is used to represent a political state.
	 */

	var Flag =
	/*#__PURE__*/
	function (_PureComponent) {
	  inherits(Flag, _PureComponent);

	  function Flag() {
	    classCallCheck(this, Flag);

	    return possibleConstructorReturn(this, getPrototypeOf(Flag).apply(this, arguments));
	  }

	  createClass(Flag, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          className = _this$props.className,
	          name = _this$props.name;
	      var classes = classNames(name, 'flag', className);
	      var rest = getUnhandledProps(Flag, this.props);
	      var ElementType = getElementType(Flag, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest, {
	        className: classes
	      }));
	    }
	  }]);

	  return Flag;
	}(React.PureComponent);

	defineProperty(Flag, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Flag name, can use the two digit country code, the full name, or a common alias. */
	  name: suggest(names)
	});

	defineProperty(Flag, "defaultProps", {
	  as: 'i'
	});

	Flag.create = createShorthandFactory(Flag, function (value) {
	  return {
	    name: value
	  };
	});

	/**
	 * An item sub-component for Dropdown component.
	 */

	var DropdownItem =
	/*#__PURE__*/
	function (_Component) {
	  inherits(DropdownItem, _Component);

	  function DropdownItem() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, DropdownItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DropdownItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });

	    return _this;
	  }

	  createClass(DropdownItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          description = _this$props.description,
	          flag = _this$props.flag,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          label = _this$props.label,
	          selected = _this$props.selected,
	          text = _this$props.text;
	      var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(selected, 'selected'), 'item', className); // add default dropdown icon if item contains another menu

	      var iconName = lodash.isNil(icon) ? someByType(children, 'DropdownMenu') && 'dropdown' : icon;
	      var rest$$1 = getUnhandledProps(DropdownItem, this.props);
	      var ElementType = getElementType(DropdownItem, this.props);
	      var ariaOptions = {
	        role: 'option',
	        'aria-disabled': disabled,
	        'aria-checked': active,
	        'aria-selected': selected
	      };

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, ariaOptions, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      var flagElement = Flag.create(flag, {
	        autoGenerateKey: false
	      });
	      var iconElement = Icon.create(iconName, {
	        autoGenerateKey: false
	      });
	      var imageElement = Image.create(image, {
	        autoGenerateKey: false
	      });
	      var labelElement = Label.create(label, {
	        autoGenerateKey: false
	      });
	      var descriptionElement = createShorthand('span', function (val) {
	        return {
	          children: val
	        };
	      }, description, {
	        defaultProps: {
	          className: 'description'
	        },
	        autoGenerateKey: false
	      });
	      var textElement = createShorthand('span', function (val) {
	        return {
	          children: val
	        };
	      }, isNil$1(content) ? text : content, {
	        defaultProps: {
	          className: 'text'
	        },
	        autoGenerateKey: false
	      });
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, ariaOptions, {
	        className: classes,
	        onClick: this.handleClick
	      }), imageElement, iconElement, flagElement, labelElement, descriptionElement, textElement);
	    }
	  }]);

	  return DropdownItem;
	}(React.Component);

	defineProperty(DropdownItem, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Style as the currently chosen item. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Additional text with less emphasis. */
	  description: itemShorthand,

	  /** A dropdown item can be disabled. */
	  disabled: propTypes.bool,

	  /** Shorthand for Flag. */
	  flag: itemShorthand,

	  /** Shorthand for Icon. */
	  icon: itemShorthand,

	  /** Shorthand for Image. */
	  image: itemShorthand,

	  /** Shorthand for Label. */
	  label: itemShorthand,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * The item currently selected by keyboard shortcut.
	   * This is not the active item.
	   */
	  selected: propTypes.bool,

	  /** Display text. */
	  text: contentShorthand,

	  /** Stored value. */
	  value: propTypes.oneOfType([propTypes.bool, propTypes.number, propTypes.string])
	});

	DropdownItem.create = createShorthandFactory(DropdownItem, function (opts) {
	  return opts;
	});

	/**
	 * A dropdown menu can contain a header.
	 */

	function DropdownHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(DropdownHeader, props);
	  var ElementType = getElementType(DropdownHeader, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), Icon.create(icon, {
	    autoGenerateKey: false
	  }), content);
	}

	DropdownHeader.propTypes = {
	  /** An element type to render as (string or function) */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for Icon. */
	  icon: itemShorthand
	};
	DropdownHeader.create = createShorthandFactory(DropdownHeader, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A dropdown menu can contain a menu.
	 */

	function DropdownMenu(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      direction = props.direction,
	      open = props.open,
	      scrolling = props.scrolling;
	  var classes = classNames(direction, useKeyOnly(open, 'visible'), useKeyOnly(scrolling, 'scrolling'), 'menu transition', className);
	  var rest = getUnhandledProps(DropdownMenu, props);
	  var ElementType = getElementType(DropdownMenu, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	DropdownMenu.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A dropdown menu can open to the left or to the right. */
	  direction: propTypes.oneOf(['left', 'right']),

	  /** Whether or not the dropdown menu is displayed. */
	  open: propTypes.bool,

	  /** A dropdown menu can scroll. */
	  scrolling: propTypes.bool
	};

	/**
	 * A search item sub-component for Dropdown component.
	 */

	var DropdownSearchInput =
	/*#__PURE__*/
	function (_Component) {
	  inherits(DropdownSearchInput, _Component);

	  function DropdownSearchInput() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, DropdownSearchInput);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(DropdownSearchInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleChange", function (e) {
	      var value = lodash.get(e, 'target.value');

	      lodash.invoke(_this.props, 'onChange', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	    });

	    return _this;
	  }

	  createClass(DropdownSearchInput, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          autoComplete = _this$props.autoComplete,
	          className = _this$props.className,
	          tabIndex = _this$props.tabIndex,
	          type = _this$props.type,
	          value = _this$props.value;
	      var classes = classNames('search', className);
	      var rest$$1 = getUnhandledProps(DropdownSearchInput, this.props);
	      return React__default.createElement("input", _extends_1({}, rest$$1, {
	        "aria-autocomplete": "list",
	        autoComplete: autoComplete,
	        className: classes,
	        onChange: this.handleChange,
	        tabIndex: tabIndex,
	        type: type,
	        value: value
	      }));
	    }
	  }]);

	  return DropdownSearchInput;
	}(React.Component);

	defineProperty(DropdownSearchInput, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An input can have the auto complete. */
	  autoComplete: propTypes.string,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** An input can receive focus. */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** The HTML input type. */
	  type: propTypes.string,

	  /** Stored value. */
	  value: propTypes.oneOfType([propTypes.number, propTypes.string])
	});

	defineProperty(DropdownSearchInput, "defaultProps", {
	  autoComplete: 'off',
	  type: 'text'
	});

	DropdownSearchInput.create = createShorthandFactory(DropdownSearchInput, function (type) {
	  return {
	    type: type
	  };
	});

	var debug$4 = makeDebugger('dropdown');

	var getKeyOrValue = function getKeyOrValue(key, value) {
	  return lodash.isNil(key) ? value : key;
	};
	/**
	 * A dropdown allows a user to select a value from a series of options.
	 * @see Form
	 * @see Select
	 * @see Menu
	 */


	var Dropdown =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Dropdown, _Component);

	  function Dropdown() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Dropdown);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "searchRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "sizerRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "handleChange", function (e, value) {
	      debug$4('handleChange()', value);

	      lodash.invoke(_this.props, 'onChange', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "closeOnChange", function (e) {
	      var _this$props = _this.props,
	          closeOnChange = _this$props.closeOnChange,
	          multiple = _this$props.multiple;
	      var shouldClose = lodash.isUndefined(closeOnChange) ? !multiple : closeOnChange;
	      if (shouldClose) _this.close(e);
	    });

	    defineProperty(assertThisInitialized(_this), "closeOnEscape", function (e) {
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Escape) return;
	      e.preventDefault();

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "moveSelectionOnKeyDown", function (e) {
	      var _moves;

	      debug$4('moveSelectionOnKeyDown()', keyboardKey_1.getKey(e));
	      var _this$props2 = _this.props,
	          multiple = _this$props2.multiple,
	          selectOnNavigation = _this$props2.selectOnNavigation;
	      var moves = (_moves = {}, defineProperty(_moves, keyboardKey_1.ArrowDown, 1), defineProperty(_moves, keyboardKey_1.ArrowUp, -1), _moves);
	      var move = moves[keyboardKey_1.getCode(e)];
	      if (move === undefined) return;
	      e.preventDefault();

	      _this.moveSelectionBy(move);

	      if (!multiple && selectOnNavigation) _this.makeSelectedItemActive(e);
	    });

	    defineProperty(assertThisInitialized(_this), "openOnSpace", function (e) {
	      debug$4('openOnSpace()');
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Spacebar) return;
	      e.preventDefault();

	      _this.open(e);
	    });

	    defineProperty(assertThisInitialized(_this), "openOnArrow", function (e) {
	      debug$4('openOnArrow()');
	      var code = keyboardKey_1.getCode(e);
	      if (!lodash.includes([keyboardKey_1.ArrowDown, keyboardKey_1.ArrowUp], code)) return;
	      if (_this.state.open) return;
	      e.preventDefault();

	      _this.open(e);
	    });

	    defineProperty(assertThisInitialized(_this), "makeSelectedItemActive", function (e) {
	      var _this$state = _this.state,
	          open = _this$state.open,
	          value = _this$state.value;
	      var multiple = _this.props.multiple;

	      var item = _this.getSelectedItem();

	      var selectedValue = lodash.get(item, 'value'); // prevent selecting null if there was no selected item value
	      // prevent selecting duplicate items when the dropdown is closed


	      if (lodash.isNil(selectedValue) || !open) return; // state value may be undefined

	      var newValue = multiple ? lodash.union(_this.state.value, [selectedValue]) : selectedValue;
	      var valueHasChanged = multiple ? !!lodash.difference(newValue, value).length : newValue !== value;

	      if (valueHasChanged) {
	        // notify the onChange prop that the user is trying to change value
	        _this.setValue(newValue);

	        _this.setSelectedIndex(newValue);

	        _this.handleChange(e, newValue); // Heads up! This event handler should be called after `onChange`
	        // Notify the onAddItem prop if this is a new value


	        if (item['data-additional']) {
	          lodash.invoke(_this.props, 'onAddItem', e, objectSpread({}, _this.props, {
	            value: selectedValue
	          }));
	        }
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "selectItemOnEnter", function (e) {
	      debug$4('selectItemOnEnter()', keyboardKey_1.getKey(e));
	      var search = _this.props.search;
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Enter) return;
	      e.preventDefault();

	      var optionSize = lodash.size(_this.getMenuOptions());

	      if (search && optionSize === 0) return;

	      _this.makeSelectedItemActive(e);

	      _this.closeOnChange(e);

	      _this.clearSearchQuery();

	      if (search) lodash.invoke(_this.searchRef.current, 'focus');
	    });

	    defineProperty(assertThisInitialized(_this), "removeItemOnBackspace", function (e) {
	      debug$4('removeItemOnBackspace()', keyboardKey_1.getKey(e));
	      var _this$props3 = _this.props,
	          multiple = _this$props3.multiple,
	          search = _this$props3.search;
	      var _this$state2 = _this.state,
	          searchQuery = _this$state2.searchQuery,
	          value = _this$state2.value;
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Backspace) return;
	      if (searchQuery || !search || !multiple || lodash.isEmpty(value)) return;
	      e.preventDefault(); // remove most recent value

	      var newValue = lodash.dropRight(value);

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });

	    defineProperty(assertThisInitialized(_this), "closeOnDocumentClick", function (e) {
	      debug$4('closeOnDocumentClick()');
	      debug$4(e);
	      if (!_this.props.closeOnBlur) return; // If event happened in the dropdown, ignore it

	      if (_this.ref.current && doesNodeContainClick(_this.ref.current, e)) return;

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseDown", function (e) {
	      debug$4('handleMouseDown()');
	      _this.isMouseDown = true;

	      lodash.invoke(_this.props, 'onMouseDown', e, _this.props);

	      document.addEventListener('mouseup', _this.handleDocumentMouseUp);
	    });

	    defineProperty(assertThisInitialized(_this), "handleDocumentMouseUp", function () {
	      debug$4('handleDocumentMouseUp()');
	      _this.isMouseDown = false;
	      document.removeEventListener('mouseup', _this.handleDocumentMouseUp);
	    });

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      debug$4('handleClick()', e);
	      var _this$props4 = _this.props,
	          minCharacters = _this$props4.minCharacters,
	          search = _this$props4.search;
	      var _this$state3 = _this.state,
	          open = _this$state3.open,
	          searchQuery = _this$state3.searchQuery;

	      lodash.invoke(_this.props, 'onClick', e, _this.props); // prevent closeOnDocumentClick()


	      e.stopPropagation();
	      if (!search) return _this.toggle(e);

	      if (open) {
	        lodash.invoke(_this.searchRef.current, 'focus');

	        return;
	      }

	      if (searchQuery.length >= minCharacters || minCharacters === 1) {
	        _this.open(e);

	        return;
	      }

	      lodash.invoke(_this.searchRef.current, 'focus');
	    });

	    defineProperty(assertThisInitialized(_this), "handleIconClick", function (e) {
	      var clearable = _this.props.clearable;

	      var hasValue = _this.hasValue();

	      debug$4('handleIconClick()', {
	        e: e,
	        clearable: clearable,
	        hasValue: hasValue
	      });

	      lodash.invoke(_this.props, 'onClick', e, _this.props); // prevent handleClick()


	      e.stopPropagation();

	      if (clearable && hasValue) {
	        _this.clearValue(e);
	      } else {
	        _this.toggle(e);
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleItemClick", function (e, item) {
	      debug$4('handleItemClick()', item);
	      var _this$props5 = _this.props,
	          multiple = _this$props5.multiple,
	          search = _this$props5.search;
	      var currentValue = _this.state.value;
	      var value = item.value; // prevent toggle() in handleClick()

	      e.stopPropagation(); // prevent closeOnDocumentClick() if multiple or item is disabled

	      if (multiple || item.disabled) e.nativeEvent.stopImmediatePropagation();
	      if (item.disabled) return;
	      var isAdditionItem = item['data-additional'];
	      var newValue = multiple ? lodash.union(_this.state.value, [value]) : value;
	      var valueHasChanged = multiple ? !!lodash.difference(newValue, currentValue).length : newValue !== currentValue; // notify the onChange prop that the user is trying to change value

	      if (valueHasChanged) {
	        _this.setValue(newValue);

	        _this.setSelectedIndex(value);

	        _this.handleChange(e, newValue);
	      }

	      _this.clearSearchQuery();

	      _this.closeOnChange(e); // Heads up! This event handler should be called after `onChange`
	      // Notify the onAddItem prop if this is a new value


	      if (isAdditionItem) lodash.invoke(_this.props, 'onAddItem', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	      if (search) lodash.invoke(_this.searchRef.current, 'focus');
	    });

	    defineProperty(assertThisInitialized(_this), "handleFocus", function (e) {
	      debug$4('handleFocus()');
	      var focus = _this.state.focus;
	      if (focus) return;

	      lodash.invoke(_this.props, 'onFocus', e, _this.props);

	      _this.setState({
	        focus: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleBlur", function (e) {
	      debug$4('handleBlur()'); // Heads up! Don't remove this.
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/1315

	      var currentTarget = lodash.get(e, 'currentTarget');

	      if (currentTarget && currentTarget.contains(document.activeElement)) return;
	      var _this$props6 = _this.props,
	          closeOnBlur = _this$props6.closeOnBlur,
	          multiple = _this$props6.multiple,
	          selectOnBlur = _this$props6.selectOnBlur; // do not "blur" when the mouse is down inside of the Dropdown

	      if (_this.isMouseDown) return;

	      lodash.invoke(_this.props, 'onBlur', e, _this.props);

	      if (selectOnBlur && !multiple) {
	        _this.makeSelectedItemActive(e);

	        if (closeOnBlur) _this.close();
	      }

	      _this.setState({
	        focus: false
	      });

	      _this.clearSearchQuery();
	    });

	    defineProperty(assertThisInitialized(_this), "handleSearchChange", function (e, _ref) {
	      var value = _ref.value;
	      debug$4('handleSearchChange()');
	      debug$4(value); // prevent propagating to this.props.onChange()

	      e.stopPropagation();
	      var minCharacters = _this.props.minCharacters;
	      var open = _this.state.open;
	      var newQuery = value;

	      lodash.invoke(_this.props, 'onSearchChange', e, objectSpread({}, _this.props, {
	        searchQuery: newQuery
	      }));

	      _this.trySetState({
	        searchQuery: newQuery
	      }, {
	        selectedIndex: 0
	      }); // open search dropdown on search query


	      if (!open && newQuery.length >= minCharacters) {
	        _this.open();

	        return;
	      } // close search dropdown if search query is too small


	      if (open && minCharacters !== 1 && newQuery.length < minCharacters) _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "getKeyAndValues", function (options) {
	      return options ? options.map(function (option) {
	        return lodash.pick(option, ['key', 'value']);
	      }) : options;
	    });

	    defineProperty(assertThisInitialized(_this), "getMenuOptions", function () {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.options;
	      var _this$props7 = _this.props,
	          additionLabel = _this$props7.additionLabel,
	          additionPosition = _this$props7.additionPosition,
	          allowAdditions = _this$props7.allowAdditions,
	          deburr$$1 = _this$props7.deburr,
	          multiple = _this$props7.multiple,
	          search = _this$props7.search;
	      var searchQuery = _this.state.searchQuery;
	      var filteredOptions = options; // filter out active options

	      if (multiple) {
	        filteredOptions = lodash.filter(filteredOptions, function (opt) {
	          return !lodash.includes(value, opt.value);
	        });
	      } // filter by search query


	      if (search && searchQuery) {
	        if (lodash.isFunction(search)) {
	          filteredOptions = search(filteredOptions, searchQuery);
	        } else {
	          // remove diacritics on search input and options, if deburr prop is set
	          var strippedQuery = deburr$$1 ? lodash.deburr(searchQuery) : searchQuery;
	          var re = new RegExp(lodash.escapeRegExp(strippedQuery), 'i');
	          filteredOptions = lodash.filter(filteredOptions, function (opt) {
	            return re.test(deburr$$1 ? lodash.deburr(opt.text) : opt.text);
	          });
	        }
	      } // insert the "add" item


	      if (allowAdditions && search && searchQuery && !lodash.some(filteredOptions, {
	        text: searchQuery
	      })) {
	        var additionLabelElement = React__default.isValidElement(additionLabel) ? React__default.cloneElement(additionLabel, {
	          key: 'addition-label'
	        }) : additionLabel || '';
	        var addItem = {
	          key: 'addition',
	          // by using an array, we can pass multiple elements, but when doing so
	          // we must specify a `key` for React to know which one is which
	          text: [additionLabelElement, React__default.createElement("b", {
	            key: "addition-query"
	          }, searchQuery)],
	          value: searchQuery,
	          className: 'addition',
	          'data-additional': true
	        };
	        if (additionPosition === 'top') filteredOptions.unshift(addItem);else filteredOptions.push(addItem);
	      }

	      return filteredOptions;
	    });

	    defineProperty(assertThisInitialized(_this), "getSelectedItem", function () {
	      var selectedIndex = _this.state.selectedIndex;

	      var options = _this.getMenuOptions();

	      return lodash.get(options, "[".concat(selectedIndex, "]"));
	    });

	    defineProperty(assertThisInitialized(_this), "getEnabledIndices", function (givenOptions) {
	      var options = givenOptions || _this.getMenuOptions();

	      return lodash.reduce(options, function (memo, item, index) {
	        if (!item.disabled) memo.push(index);
	        return memo;
	      }, []);
	    });

	    defineProperty(assertThisInitialized(_this), "getItemByValue", function (value) {
	      var options = _this.props.options;
	      return lodash.find(options, {
	        value: value
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "getMenuItemIndexByValue", function (value, givenOptions) {
	      var options = givenOptions || _this.getMenuOptions();

	      return lodash.findIndex(options, ['value', value]);
	    });

	    defineProperty(assertThisInitialized(_this), "getDropdownAriaOptions", function () {
	      var _this$props8 = _this.props,
	          loading = _this$props8.loading,
	          disabled = _this$props8.disabled,
	          search = _this$props8.search,
	          multiple = _this$props8.multiple;
	      var open = _this.state.open;
	      var ariaOptions = {
	        role: search ? 'combobox' : 'listbox',
	        'aria-busy': loading,
	        'aria-disabled': disabled,
	        'aria-expanded': !!open
	      };

	      if (ariaOptions.role === 'listbox') {
	        ariaOptions['aria-multiselectable'] = multiple;
	      }

	      return ariaOptions;
	    });

	    defineProperty(assertThisInitialized(_this), "clearSearchQuery", function () {
	      debug$4('clearSearchQuery()');

	      _this.trySetState({
	        searchQuery: ''
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "setValue", function (value) {
	      debug$4('setValue()', value);

	      _this.trySetState({
	        value: value
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "setSelectedIndex", function () {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      var optionsProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.options;
	      var multiple = _this.props.multiple;
	      var selectedIndex = _this.state.selectedIndex;

	      var options = _this.getMenuOptions(value, optionsProps);

	      var enabledIndicies = _this.getEnabledIndices(options);

	      var newSelectedIndex; // update the selected index

	      if (!selectedIndex || selectedIndex < 0) {
	        var firstIndex = enabledIndicies[0]; // Select the currently active item, if none, use the first item.
	        // Multiple selects remove active items from the list,
	        // their initial selected index should be 0.

	        newSelectedIndex = multiple ? firstIndex : _this.getMenuItemIndexByValue(value, options) || enabledIndicies[0];
	      } else if (multiple) {
	        // multiple selects remove options from the menu as they are made active
	        // keep the selected index within range of the remaining items
	        if (selectedIndex >= options.length - 1) {
	          newSelectedIndex = enabledIndicies[enabledIndicies.length - 1];
	        }
	      } else {
	        var activeIndex = _this.getMenuItemIndexByValue(value, options); // regular selects can only have one active item
	        // set the selected index to the currently active item


	        newSelectedIndex = lodash.includes(enabledIndicies, activeIndex) ? activeIndex : undefined;
	      }

	      if (!newSelectedIndex || newSelectedIndex < 0) {
	        newSelectedIndex = enabledIndicies[0];
	      }

	      _this.setState({
	        selectedIndex: newSelectedIndex
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleLabelClick", function (e, labelProps) {
	      debug$4('handleLabelClick()'); // prevent focusing search input on click

	      e.stopPropagation();

	      _this.setState({
	        selectedLabel: labelProps.value
	      });

	      lodash.invoke(_this.props, 'onLabelClick', e, labelProps);
	    });

	    defineProperty(assertThisInitialized(_this), "handleLabelRemove", function (e, labelProps) {
	      debug$4('handleLabelRemove()'); // prevent focusing search input on click

	      e.stopPropagation();
	      var value = _this.state.value;

	      var newValue = lodash.without(value, labelProps.value);

	      debug$4('label props:', labelProps);
	      debug$4('current value:', value);
	      debug$4('remove value:', labelProps.value);
	      debug$4('new value:', newValue);

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });

	    defineProperty(assertThisInitialized(_this), "moveSelectionBy", function (offset) {
	      var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.selectedIndex;
	      debug$4('moveSelectionBy()');
	      debug$4("offset: ".concat(offset));

	      var options = _this.getMenuOptions(); // Prevent infinite loop
	      // TODO: remove left part of condition after children API will be removed


	      if (options === undefined || lodash.every(options, 'disabled')) return;
	      var lastIndex = options.length - 1;
	      var wrapSelection = _this.props.wrapSelection; // next is after last, wrap to beginning
	      // next is before first, wrap to end

	      var nextIndex = startIndex + offset; // if 'wrapSelection' is set to false and selection is after last or before first, it just does not change

	      if (!wrapSelection && (nextIndex > lastIndex || nextIndex < 0)) {
	        nextIndex = startIndex;
	      } else if (nextIndex > lastIndex) nextIndex = 0;else if (nextIndex < 0) nextIndex = lastIndex;

	      if (options[nextIndex].disabled) {
	        _this.moveSelectionBy(offset, nextIndex);

	        return;
	      }

	      _this.setState({
	        selectedIndex: nextIndex
	      });

	      _this.scrollSelectedItemIntoView();
	    });

	    defineProperty(assertThisInitialized(_this), "handleIconOverrides", function (predefinedProps) {
	      var clearable = _this.props.clearable;
	      var classes = classNames(clearable && _this.hasValue() && 'clear', predefinedProps.className);
	      return {
	        className: classes,
	        onClick: function onClick(e) {
	          lodash.invoke(predefinedProps, 'onClick', e, predefinedProps);

	          _this.handleIconClick(e);
	        }
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "clearValue", function (e) {
	      var multiple = _this.props.multiple;
	      var newValue = multiple ? [] : '';

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });

	    defineProperty(assertThisInitialized(_this), "computeSearchInputTabIndex", function () {
	      var _this$props9 = _this.props,
	          disabled = _this$props9.disabled,
	          tabIndex = _this$props9.tabIndex;
	      if (!lodash.isNil(tabIndex)) return tabIndex;
	      return disabled ? -1 : 0;
	    });

	    defineProperty(assertThisInitialized(_this), "computeSearchInputWidth", function () {
	      var searchQuery = _this.state.searchQuery;

	      if (_this.sizerRef.current && searchQuery) {
	        // resize the search input, temporarily show the sizer so we can measure it
	        _this.sizerRef.current.style.display = 'inline';
	        _this.sizerRef.current.textContent = searchQuery;
	        var searchWidth = Math.ceil(_this.sizerRef.current.getBoundingClientRect().width);

	        _this.sizerRef.current.style.removeProperty('display');

	        return searchWidth;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "computeTabIndex", function () {
	      var _this$props10 = _this.props,
	          disabled = _this$props10.disabled,
	          search = _this$props10.search,
	          tabIndex = _this$props10.tabIndex; // don't set a root node tabIndex as the search input has its own tabIndex

	      if (search) return undefined;
	      if (disabled) return -1;
	      return lodash.isNil(tabIndex) ? 0 : tabIndex;
	    });

	    defineProperty(assertThisInitialized(_this), "handleSearchInputOverrides", function (predefinedProps) {
	      return {
	        onChange: function onChange(e, inputProps) {
	          lodash.invoke(predefinedProps, 'onChange', e, inputProps);

	          _this.handleSearchChange(e, inputProps);
	        }
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "hasValue", function () {
	      var multiple = _this.props.multiple;
	      var value = _this.state.value;
	      return multiple ? !lodash.isEmpty(value) : !lodash.isNil(value) && value !== '';
	    });

	    defineProperty(assertThisInitialized(_this), "scrollSelectedItemIntoView", function () {
	      debug$4('scrollSelectedItemIntoView()');
	      if (!_this.ref.current) return;

	      var menu = _this.ref.current.querySelector('.menu.visible');

	      if (!menu) return;
	      var item = menu.querySelector('.item.selected');
	      if (!item) return;
	      debug$4("menu: ".concat(menu));
	      debug$4("item: ".concat(item));
	      var isOutOfUpperView = item.offsetTop < menu.scrollTop;
	      var isOutOfLowerView = item.offsetTop + item.clientHeight > menu.scrollTop + menu.clientHeight;

	      if (isOutOfUpperView) {
	        menu.scrollTop = item.offsetTop;
	      } else if (isOutOfLowerView) {
	        // eslint-disable-next-line no-mixed-operators
	        menu.scrollTop = item.offsetTop + item.clientHeight - menu.clientHeight;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "setOpenDirection", function () {
	      if (!_this.ref.current) return;

	      var menu = _this.ref.current.querySelector('.menu.visible');

	      if (!menu) return;

	      var dropdownRect = _this.ref.current.getBoundingClientRect();

	      var menuHeight = menu.clientHeight;
	      var spaceAtTheBottom = document.documentElement.clientHeight - dropdownRect.top - dropdownRect.height - menuHeight;
	      var spaceAtTheTop = dropdownRect.top - menuHeight;
	      var upward = spaceAtTheBottom < 0 && spaceAtTheTop > spaceAtTheBottom; // set state only if there's a relevant difference

	      if (!upward !== !_this.state.upward) {
	        _this.trySetState({
	          upward: upward
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "open", function (e) {
	      var _this$props11 = _this.props,
	          disabled = _this$props11.disabled,
	          open = _this$props11.open,
	          search = _this$props11.search;
	      debug$4('open()', {
	        disabled: disabled,
	        open: open,
	        search: search
	      });
	      if (disabled) return;
	      if (search) lodash.invoke(_this.searchRef.current, 'focus');

	      lodash.invoke(_this.props, 'onOpen', e, _this.props);

	      _this.trySetState({
	        open: true
	      });

	      _this.scrollSelectedItemIntoView();
	    });

	    defineProperty(assertThisInitialized(_this), "close", function (e) {
	      var open = _this.state.open;
	      debug$4('close()', {
	        open: open
	      });

	      if (open) {
	        lodash.invoke(_this.props, 'onClose', e, _this.props);

	        _this.trySetState({
	          open: false
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleClose", function () {
	      debug$4('handleClose()');
	      var hasSearchFocus = document.activeElement === _this.searchRef.current; // https://github.com/Semantic-Org/Semantic-UI-React/issues/627
	      // Blur the Dropdown on close so it is blurred after selecting an item.
	      // This is to prevent it from re-opening when switching tabs after selecting an item.

	      if (!hasSearchFocus) {
	        _this.ref.current.blur();
	      }

	      var hasDropdownFocus = document.activeElement === _this.ref.current;
	      var hasFocus = hasSearchFocus || hasDropdownFocus; // We need to keep the virtual model in sync with the browser focus change
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/692

	      _this.setState({
	        focus: hasFocus
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "toggle", function (e) {
	      return _this.state.open ? _this.close(e) : _this.open(e);
	    });

	    defineProperty(assertThisInitialized(_this), "renderText", function () {
	      var _this$props12 = _this.props,
	          multiple = _this$props12.multiple,
	          placeholder = _this$props12.placeholder,
	          search = _this$props12.search,
	          text = _this$props12.text;
	      var _this$state4 = _this.state,
	          searchQuery = _this$state4.searchQuery,
	          value = _this$state4.value,
	          open = _this$state4.open;

	      var hasValue = _this.hasValue();

	      var classes = classNames(placeholder && !hasValue && 'default', 'text', search && searchQuery && 'filtered');
	      var _text = placeholder;

	      if (searchQuery) {
	        _text = null;
	      } else if (text) {
	        _text = text;
	      } else if (open && !multiple) {
	        _text = lodash.get(_this.getSelectedItem(), 'text');
	      } else if (hasValue) {
	        _text = lodash.get(_this.getItemByValue(value), 'text');
	      }

	      return React__default.createElement("div", {
	        className: classes,
	        role: "alert",
	        "aria-live": "polite"
	      }, _text);
	    });

	    defineProperty(assertThisInitialized(_this), "renderSearchInput", function () {
	      var _this$props13 = _this.props,
	          search = _this$props13.search,
	          searchInput = _this$props13.searchInput;
	      var searchQuery = _this.state.searchQuery;
	      return search && React__default.createElement(Ref, {
	        innerRef: _this.searchRef
	      }, DropdownSearchInput.create(searchInput, {
	        defaultProps: {
	          style: {
	            width: _this.computeSearchInputWidth()
	          },
	          tabIndex: _this.computeSearchInputTabIndex(),
	          value: searchQuery
	        },
	        overrideProps: _this.handleSearchInputOverrides
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "renderSearchSizer", function () {
	      var _this$props14 = _this.props,
	          search = _this$props14.search,
	          multiple = _this$props14.multiple;
	      return search && multiple && React__default.createElement("span", {
	        className: "sizer",
	        ref: _this.sizerRef
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderLabels", function () {
	      debug$4('renderLabels()');
	      var _this$props15 = _this.props,
	          multiple = _this$props15.multiple,
	          renderLabel = _this$props15.renderLabel;
	      var _this$state5 = _this.state,
	          selectedLabel = _this$state5.selectedLabel,
	          value = _this$state5.value;

	      if (!multiple || lodash.isEmpty(value)) {
	        return;
	      }

	      var selectedItems = lodash.map(value, _this.getItemByValue);

	      debug$4('selectedItems', selectedItems); // if no item could be found for a given state value the selected item will be undefined
	      // compact the selectedItems so we only have actual objects left

	      return lodash.map(lodash.compact(selectedItems), function (item, index) {
	        var defaultProps = {
	          active: item.value === selectedLabel,
	          as: 'a',
	          key: getKeyOrValue(item.key, item.value),
	          onClick: _this.handleLabelClick,
	          onRemove: _this.handleLabelRemove,
	          value: item.value
	        };
	        return Label.create(renderLabel(item, index, defaultProps), {
	          defaultProps: defaultProps
	        });
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderOptions", function () {
	      var _this$props16 = _this.props,
	          lazyLoad = _this$props16.lazyLoad,
	          multiple = _this$props16.multiple,
	          search = _this$props16.search,
	          noResultsMessage = _this$props16.noResultsMessage;
	      var _this$state6 = _this.state,
	          open = _this$state6.open,
	          selectedIndex = _this$state6.selectedIndex,
	          value = _this$state6.value; // lazy load, only render options when open

	      if (lazyLoad && !open) return null;

	      var options = _this.getMenuOptions();

	      if (noResultsMessage !== null && search && lodash.isEmpty(options)) {
	        return React__default.createElement("div", {
	          className: "message"
	        }, noResultsMessage);
	      }

	      var isActive = multiple ? function (optValue) {
	        return lodash.includes(value, optValue);
	      } : function (optValue) {
	        return optValue === value;
	      };
	      return lodash.map(options, function (opt, i) {
	        return DropdownItem.create(objectSpread({
	          active: isActive(opt.value),
	          onClick: _this.handleItemClick,
	          selected: selectedIndex === i
	        }, opt, {
	          key: getKeyOrValue(opt.key, opt.value),
	          // Needed for handling click events on disabled items
	          style: objectSpread({}, opt.style, {
	            pointerEvents: 'all'
	          })
	        }));
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderMenu", function () {
	      var _this$props17 = _this.props,
	          children = _this$props17.children,
	          direction = _this$props17.direction,
	          header = _this$props17.header;
	      var open = _this.state.open;

	      var ariaOptions = _this.getDropdownMenuAriaOptions(); // single menu child


	      if (!isNil$1(children)) {
	        var menuChild = React.Children.only(children);
	        var className = classNames(direction, useKeyOnly(open, 'visible'), menuChild.props.className);
	        return React.cloneElement(menuChild, objectSpread({
	          className: className
	        }, ariaOptions));
	      }

	      return React__default.createElement(DropdownMenu, _extends_1({}, ariaOptions, {
	        direction: direction,
	        open: open
	      }), DropdownHeader.create(header, {
	        autoGenerateKey: false
	      }), _this.renderOptions());
	    });

	    return _this;
	  }

	  createClass(Dropdown, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState() {
	      return {
	        focus: false,
	        searchQuery: ''
	      };
	    }
	  }, {
	    key: "componentWillMount",
	    value: function componentWillMount() {
	      debug$4('componentWillMount()');
	      var _this$state7 = this.state,
	          open = _this$state7.open,
	          value = _this$state7.value;
	      this.setValue(value);
	      this.setSelectedIndex(value);

	      if (open) {
	        this.open();
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      get$1(getPrototypeOf(Dropdown.prototype), "componentWillReceiveProps", this).call(this, nextProps);

	      debug$4('componentWillReceiveProps()');
	      debug$4('to props:', objectDiff(this.props, nextProps));
	      /* eslint-enable no-console */


	      if (!shallowequal(nextProps.value, this.props.value)) {
	        debug$4('value changed, setting', nextProps.value);
	        this.setValue(nextProps.value);
	        this.setSelectedIndex(nextProps.value);
	      } // The selected index is only dependent on option keys/values.
	      // We only check those properties to avoid recursive performance impacts.
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/3000


	      if (!lodash.isEqual(this.getKeyAndValues(nextProps.options), this.getKeyAndValues(this.props.options))) {
	        this.setSelectedIndex(undefined, nextProps.options);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !shallowequal(nextProps, this.props) || !shallowequal(nextState, this.state);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      // eslint-disable-line complexity
	      debug$4('componentDidUpdate()');
	      debug$4('to state:', objectDiff(prevState, this.state));
	      var _this$props18 = this.props,
	          closeOnBlur = _this$props18.closeOnBlur,
	          minCharacters = _this$props18.minCharacters,
	          openOnFocus = _this$props18.openOnFocus,
	          search = _this$props18.search; // focused / blurred

	      if (!prevState.focus && this.state.focus) {
	        debug$4('dropdown focused');

	        if (!this.isMouseDown) {
	          var openable = !search || search && minCharacters === 1 && !this.state.open;
	          debug$4('mouse is not down, opening');
	          if (openOnFocus && openable) this.open();
	        }
	      } else if (prevState.focus && !this.state.focus) {
	        debug$4('dropdown blurred');

	        if (!this.isMouseDown && closeOnBlur) {
	          debug$4('mouse is not down and closeOnBlur=true, closing');
	          this.close();
	        }
	      } // opened / closed


	      if (!prevState.open && this.state.open) {
	        debug$4('dropdown opened');
	        this.setOpenDirection();
	        this.scrollSelectedItemIntoView();
	      } else if (prevState.open && !this.state.open) {
	        debug$4('dropdown closed');
	        this.handleClose();
	      }
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------
	    // onChange needs to receive a value
	    // can't rely on props.value if we are controlled

	  }, {
	    key: "getDropdownMenuAriaOptions",
	    value: function getDropdownMenuAriaOptions() {
	      var _this$props19 = this.props,
	          search = _this$props19.search,
	          multiple = _this$props19.multiple;
	      var ariaOptions = {};

	      if (search) {
	        ariaOptions['aria-multiselectable'] = multiple;
	        ariaOptions.role = 'listbox';
	      }

	      return ariaOptions;
	    } // ----------------------------------------
	    // Setters
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      debug$4('render()');
	      debug$4('props', this.props);
	      debug$4('state', this.state);
	      var _this$props20 = this.props,
	          basic = _this$props20.basic,
	          button = _this$props20.button,
	          className = _this$props20.className,
	          compact$$1 = _this$props20.compact,
	          disabled = _this$props20.disabled,
	          error = _this$props20.error,
	          fluid = _this$props20.fluid,
	          floating = _this$props20.floating,
	          icon = _this$props20.icon,
	          inline = _this$props20.inline,
	          item = _this$props20.item,
	          labeled = _this$props20.labeled,
	          loading = _this$props20.loading,
	          multiple = _this$props20.multiple,
	          pointing = _this$props20.pointing,
	          search = _this$props20.search,
	          selection = _this$props20.selection,
	          scrolling = _this$props20.scrolling,
	          simple = _this$props20.simple,
	          trigger = _this$props20.trigger;
	      var _this$state8 = this.state,
	          focus = _this$state8.focus,
	          open = _this$state8.open,
	          upward = _this$state8.upward; // Classes

	      var classes = classNames('ui', useKeyOnly(open, 'active visible'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(loading, 'loading'), useKeyOnly(basic, 'basic'), useKeyOnly(button, 'button'), useKeyOnly(compact$$1, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(floating, 'floating'), useKeyOnly(inline, 'inline'), // TODO: consider augmentation to render Dropdowns as Button/Menu, solves icon/link item issues
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/401#issuecomment-240487229
	      // TODO: the icon class is only required when a dropdown is a button
	      // useKeyOnly(icon, 'icon'),
	      useKeyOnly(labeled, 'labeled'), useKeyOnly(item, 'item'), useKeyOnly(multiple, 'multiple'), useKeyOnly(search, 'search'), useKeyOnly(selection, 'selection'), useKeyOnly(simple, 'simple'), useKeyOnly(scrolling, 'scrolling'), useKeyOnly(upward, 'upward'), useKeyOrValueAndKey(pointing, 'pointing'), 'dropdown', className);
	      var rest$$1 = getUnhandledProps(Dropdown, this.props);
	      var ElementType = getElementType(Dropdown, this.props);
	      var ariaOptions = this.getDropdownAriaOptions(ElementType, this.props);
	      return React__default.createElement(Ref, {
	        innerRef: this.ref
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, ariaOptions, {
	        className: classes,
	        onBlur: this.handleBlur,
	        onClick: this.handleClick,
	        onMouseDown: this.handleMouseDown,
	        onFocus: this.handleFocus,
	        onChange: this.handleChange,
	        tabIndex: this.computeTabIndex()
	      }), this.renderLabels(), this.renderSearchInput(), this.renderSearchSizer(), trigger || this.renderText(), Icon.create(icon, {
	        overrideProps: this.handleIconOverrides,
	        autoGenerateKey: false
	      }), this.renderMenu(), open && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.closeOnEscape
	      }), open && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.moveSelectionOnKeyDown
	      }), open && React__default.createElement(lib, {
	        name: "click",
	        on: this.closeOnDocumentClick
	      }), open && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.selectItemOnEnter
	      }), focus && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.removeItemOnBackspace
	      }), focus && !open && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.openOnArrow
	      }), focus && !open && React__default.createElement(lib, {
	        name: "keydown",
	        on: this.openOnSpace
	      })));
	    }
	  }]);

	  return Dropdown;
	}(AutoControlledComponent);

	defineProperty(Dropdown, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Label prefixed to an option added by a user. */
	  additionLabel: propTypes.oneOfType([propTypes.element, propTypes.string]),

	  /** Position of the `Add: ...` option in the dropdown list ('top' or 'bottom'). */
	  additionPosition: propTypes.oneOf(['top', 'bottom']),

	  /**
	   * Allow user additions to the list of options (boolean).
	   * Requires the use of `selection`, `options` and `search`.
	   */
	  allowAdditions: every$1([demand(['options', 'selection', 'search']), propTypes.bool]),

	  /** A Dropdown can reduce its complexity. */
	  basic: propTypes.bool,

	  /** Format the Dropdown to appear as a button. */
	  button: propTypes.bool,

	  /** Primary content. */
	  children: every$1([disallow(['options', 'selection']), givenProps({
	    children: propTypes.any.isRequired
	  }, propTypes.element.isRequired)]),

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Using the clearable setting will let users remove their selection from a dropdown. */
	  clearable: propTypes.bool,

	  /** Whether or not the menu should close when the dropdown is blurred. */
	  closeOnBlur: propTypes.bool,

	  /**
	   * Whether or not the menu should close when a value is selected from the dropdown.
	   * By default, multiple selection dropdowns will remain open on change, while single
	   * selection dropdowns will close on change.
	   */
	  closeOnChange: propTypes.bool,

	  /** A compact dropdown has no minimum width. */
	  compact: propTypes.bool,

	  /** Whether or not the dropdown should strip diacritics in options and input search */
	  deburr: propTypes.bool,

	  /** Initial value of open. */
	  defaultOpen: propTypes.bool,

	  /** Initial value of searchQuery. */
	  defaultSearchQuery: propTypes.string,

	  /** Currently selected label in multi-select. */
	  defaultSelectedLabel: every$1([demand(['multiple']), propTypes.oneOfType([propTypes.number, propTypes.string])]),

	  /** Initial value of upward. */
	  defaultUpward: propTypes.bool,

	  /** Initial value or value array if multiple. */
	  defaultValue: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.bool, propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]))]),

	  /** A dropdown menu can open to the left or to the right. */
	  direction: propTypes.oneOf(['left', 'right']),

	  /** A disabled dropdown menu or item does not allow user interaction. */
	  disabled: propTypes.bool,

	  /** An errored dropdown can alert a user to a problem. */
	  error: propTypes.bool,

	  /** A dropdown menu can contain floated content. */
	  floating: propTypes.bool,

	  /** A dropdown can take the full width of its parent */
	  fluid: propTypes.bool,

	  /** A dropdown menu can contain a header. */
	  header: propTypes.node,

	  /** Shorthand for Icon. */
	  icon: propTypes.oneOfType([propTypes.node, propTypes.object]),

	  /** A dropdown can be formatted to appear inline in other content. */
	  inline: propTypes.bool,

	  /** A dropdown can be formatted as a Menu item. */
	  item: propTypes.bool,

	  /** A dropdown can be labeled. */
	  labeled: propTypes.bool,

	  /** A dropdown can defer rendering its options until it is open. */
	  lazyLoad: propTypes.bool,

	  /** A dropdown can show that it is currently loading data. */
	  loading: propTypes.bool,

	  /** The minimum characters for a search to begin showing results. */
	  minCharacters: propTypes.number,

	  /** A selection dropdown can allow multiple selections. */
	  multiple: propTypes.bool,

	  /** Message to display when there are no results. */
	  noResultsMessage: propTypes.node,

	  /**
	   * Called when a user adds a new item. Use this to update the options list.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and the new item's value.
	   */
	  onAddItem: propTypes.func,

	  /**
	   * Called on blur.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBlur: propTypes.func,

	  /**
	   * Called when the user attempts to change the value.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed value.
	   */
	  onChange: propTypes.func,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: propTypes.func,

	  /**
	   * Called on focus.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onFocus: propTypes.func,

	  /**
	   * Called when a multi-select label is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All label props.
	   */
	  onLabelClick: propTypes.func,

	  /**
	   * Called on mousedown.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseDown: propTypes.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Called on search input change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props, includes current value of searchQuery.
	   */
	  onSearchChange: propTypes.func,

	  /** Controls whether or not the dropdown menu is displayed. */
	  open: propTypes.bool,

	  /** Whether or not the menu should open when the dropdown is focused. */
	  openOnFocus: propTypes.bool,

	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: every$1([disallow(['children']), propTypes.arrayOf(propTypes.shape(DropdownItem.propTypes))]),

	  /** Placeholder text. */
	  placeholder: propTypes.string,

	  /** A dropdown can be formatted so that its menu is pointing. */
	  pointing: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['left', 'right', 'top', 'top left', 'top right', 'bottom', 'bottom left', 'bottom right'])]),

	  /**
	   * Mapped over the active items and returns shorthand for the active item Labels.
	   * Only applies to `multiple` Dropdowns.
	   *
	   * @param {object} item - A currently active dropdown item.
	   * @param {number} index - The current index.
	   * @param {object} defaultLabelProps - The default props for an active item Label.
	   * @returns {*} Shorthand for a Label.
	   */
	  renderLabel: propTypes.func,

	  /** A dropdown can have its menu scroll. */
	  scrolling: propTypes.bool,

	  /**
	   * A selection dropdown can allow a user to search through a large list of choices.
	   * Pass a function here to replace the default search.
	   */
	  search: propTypes.oneOfType([propTypes.bool, propTypes.func]),

	  /** A shorthand for a search input. */
	  searchInput: propTypes.oneOfType([propTypes.array, propTypes.node, propTypes.object]),

	  /** Current value of searchQuery. Creates a controlled component. */
	  searchQuery: propTypes.string,
	  // TODO 'searchInMenu' or 'search='in menu' or ???  How to handle this markup and functionality?

	  /** Define whether the highlighted item should be selected on blur. */
	  selectOnBlur: propTypes.bool,

	  /**
	   * Whether or not to change the value when navigating the menu using arrow keys.
	   * Setting to false will require enter or left click to confirm a choice.
	   */
	  selectOnNavigation: propTypes.bool,

	  /** Currently selected label in multi-select. */
	  selectedLabel: every$1([demand(['multiple']), propTypes.oneOfType([propTypes.string, propTypes.number])]),

	  /** A dropdown can be used to select between choices in a form. */
	  selection: every$1([disallow(['children']), demand(['options']), propTypes.bool]),

	  /** A simple dropdown can open without Javascript. */
	  simple: propTypes.bool,

	  /** A dropdown can receive focus. */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** The text displayed in the dropdown, usually for the active item. */
	  text: propTypes.string,

	  /** Custom element to trigger the menu to become visible. Takes place of 'text'. */
	  trigger: every$1([disallow(['selection', 'text']), propTypes.node]),

	  /** Current value or value array if multiple. Creates a controlled component. */
	  value: propTypes.oneOfType([propTypes.bool, propTypes.string, propTypes.number, propTypes.arrayOf(propTypes.oneOfType([propTypes.bool, propTypes.string, propTypes.number]))]),

	  /** Controls whether the dropdown will open upward. */
	  upward: propTypes.bool,

	  /**
	   * A dropdown will go to the last element when ArrowUp is pressed on the first,
	   * or go to the first when ArrowDown is pressed on the last( aka infinite selection )
	   */
	  wrapSelection: propTypes.bool
	});

	defineProperty(Dropdown, "defaultProps", {
	  additionLabel: 'Add ',
	  additionPosition: 'top',
	  closeOnBlur: true,
	  deburr: false,
	  icon: 'dropdown',
	  minCharacters: 1,
	  noResultsMessage: 'No results found.',
	  openOnFocus: true,
	  renderLabel: function renderLabel(_ref2) {
	    var text = _ref2.text;
	    return text;
	  },
	  searchInput: 'text',
	  selectOnBlur: true,
	  selectOnNavigation: true,
	  wrapSelection: true
	});

	defineProperty(Dropdown, "autoControlledProps", ['open', 'searchQuery', 'selectedLabel', 'value', 'upward']);

	defineProperty(Dropdown, "Divider", DropdownDivider);

	defineProperty(Dropdown, "Header", DropdownHeader);

	defineProperty(Dropdown, "Item", DropdownItem);

	defineProperty(Dropdown, "Menu", DropdownMenu);

	defineProperty(Dropdown, "SearchInput", DropdownSearchInput);

	/**
	 * A Select is sugar for <Dropdown selection />.
	 * @see Dropdown
	 * @see Form
	 */

	function Select(props) {
	  return React__default.createElement(Dropdown, _extends_1({}, props, {
	    selection: true
	  }));
	}

	Select.propTypes = {
	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: propTypes.arrayOf(propTypes.shape(Dropdown.Item.propTypes)).isRequired
	};
	Select.Divider = Dropdown.Divider;
	Select.Header = Dropdown.Header;
	Select.Item = Dropdown.Item;
	Select.Menu = Dropdown.Menu;

	/**
	 * A TextArea can be used to allow for extended user input.
	 * @see Form
	 */

	var TextArea =
	/*#__PURE__*/
	function (_Component) {
	  inherits(TextArea, _Component);

	  function TextArea() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, TextArea);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TextArea)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "focus", function () {
	      return _this.ref.current.focus();
	    });

	    defineProperty(assertThisInitialized(_this), "handleChange", function (e) {
	      var value = lodash.get(e, 'target.value');

	      lodash.invoke(_this.props, 'onChange', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleInput", function (e) {
	      var value = lodash.get(e, 'target.value');

	      lodash.invoke(_this.props, 'onInput', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	    });

	    return _this;
	  }

	  createClass(TextArea, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          rows = _this$props.rows,
	          value = _this$props.value;
	      var rest$$1 = getUnhandledProps(TextArea, this.props);
	      var ElementType = getElementType(TextArea, this.props);
	      return React__default.createElement(Ref, {
	        innerRef: this.ref
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        onChange: this.handleChange,
	        onInput: this.handleInput,
	        rows: rows,
	        value: value
	      })));
	    }
	  }]);

	  return TextArea;
	}(React.Component);

	defineProperty(TextArea, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /**
	   * Called on change.
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onChange: propTypes.func,

	  /**
	   * Called on input.
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onInput: propTypes.func,

	  /** Indicates row count for a TextArea. */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** The value of the textarea. */
	  value: propTypes.oneOfType([propTypes.number, propTypes.string])
	});

	defineProperty(TextArea, "defaultProps", {
	  as: 'textarea',
	  rows: 3
	});

	var debug$5 = makeDebugger('transition_group');
	/**
	 * A Transition.Group animates children as they mount and unmount.
	 */

	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  inherits(TransitionGroup, _React$Component);

	  function TransitionGroup() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, TransitionGroup);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TransitionGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleOnHide", function (nothing, childProps) {
	      debug$5('handleOnHide', childProps);
	      var reactKey = childProps.reactKey;

	      _this.setState(function (state) {
	        var children = objectSpread({}, state.children);

	        delete children[reactKey];
	        return {
	          children: children
	        };
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "wrapChild", function (child) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var _this$props = _this.props,
	          animation = _this$props.animation,
	          directional = _this$props.directional,
	          duration = _this$props.duration;
	      var key = child.key;
	      var _options$visible = options.visible,
	          visible = _options$visible === void 0 ? true : _options$visible,
	          _options$transitionOn = options.transitionOnMount,
	          transitionOnMount = _options$transitionOn === void 0 ? false : _options$transitionOn;
	      return React__default.createElement(Transition, {
	        animation: animation,
	        directional: directional,
	        duration: duration,
	        key: key,
	        onHide: _this.handleOnHide,
	        reactKey: key,
	        transitionOnMount: transitionOnMount,
	        visible: visible
	      }, child);
	    });

	    var _children = _this.props.children;
	    _this.state = {
	      children: lodash.mapValues(getChildMapping(_children), function (child) {
	        return _this.wrapChild(child);
	      })
	    };
	    return _this;
	  }

	  createClass(TransitionGroup, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;

	      debug$5('componentWillReceiveProps()');
	      var prevMapping = this.state.children;
	      var nextMapping = getChildMapping(nextProps.children);
	      var children = mergeChildMappings(prevMapping, nextMapping);

	      lodash.forEach(children, function (child, key) {
	        var hasPrev = lodash.has(prevMapping, key);

	        var hasNext = lodash.has(nextMapping, key);

	        var prevChild = prevMapping[key];
	        var isLeaving = !lodash.get(prevChild, 'props.visible'); // Heads up!
	        // An item is new (entering), it will be picked from `nextChildren`, so it should be wrapped

	        if (hasNext && (!hasPrev || isLeaving)) {
	          children[key] = _this2.wrapChild(child, {
	            transitionOnMount: true
	          });
	          return;
	        } // Heads up!
	        // An item is old (exiting), it will be picked from `prevChildren`, so it has been already
	        // wrapped, so should be only updated


	        if (!hasNext && hasPrev && !isLeaving) {
	          children[key] = React.cloneElement(prevChild, {
	            visible: false
	          });
	          return;
	        } // Heads up!
	        // An item item hasn't changed transition states, but it will be picked from `nextChildren`,
	        // so we should wrap it again


	        var _prevChild$props = prevChild.props,
	            visible = _prevChild$props.visible,
	            transitionOnMount = _prevChild$props.transitionOnMount;
	        children[key] = _this2.wrapChild(child, {
	          transitionOnMount: transitionOnMount,
	          visible: visible
	        });
	      });

	      this.setState({
	        children: children
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      debug$5('render');
	      debug$5('props', this.props);
	      debug$5('state', this.state);
	      var children = this.state.children;
	      var ElementType = getElementType(TransitionGroup, this.props);
	      var rest$$1 = getUnhandledProps(TransitionGroup, this.props);
	      return React__default.createElement(ElementType, rest$$1, lodash.values(children));
	    }
	  }]);

	  return TransitionGroup;
	}(React__default.Component);

	defineProperty(TransitionGroup, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Named animation event to used. Must be defined in CSS. */
	  animation: propTypes.oneOfType([propTypes.oneOf(TRANSITIONS), propTypes.string]),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Whether it is directional animation event or not. Use it only for custom transitions. */
	  directional: propTypes.bool,

	  /** Duration of the CSS transition animation in milliseconds. */
	  duration: propTypes.oneOfType([propTypes.number, propTypes.shape({
	    hide: propTypes.number.isRequired,
	    show: propTypes.number.isRequired
	  }), propTypes.string])
	});

	defineProperty(TransitionGroup, "defaultProps", {
	  as: React.Fragment,
	  animation: 'fade',
	  duration: 500
	});

	var debug$6 = makeDebugger('transition');
	var TRANSITION_TYPE = {
	  ENTERING: 'show',
	  EXITING: 'hide'
	  /**
	   * A transition is an animation usually used to move content in or out of view.
	   */

	};

	var Transition =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Transition, _Component);

	  function Transition() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Transition);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Transition)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleStart", function () {
	      var duration = _this.props.duration;
	      var status = _this.nextStatus;
	      _this.nextStatus = null;

	      _this.setState({
	        status: status,
	        animating: true
	      }, function () {
	        var durationType = TRANSITION_TYPE[status];
	        var durationValue = normalizeTransitionDuration(duration, durationType);

	        lodash.invoke(_this.props, 'onStart', null, objectSpread({}, _this.props, {
	          status: status
	        }));

	        _this.timeoutId = setTimeout(_this.handleComplete, durationValue);
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleComplete", function () {
	      var current = _this.state.status;

	      lodash.invoke(_this.props, 'onComplete', null, objectSpread({}, _this.props, {
	        status: current
	      }));

	      if (_this.nextStatus) {
	        _this.handleStart();

	        return;
	      }

	      var status = _this.computeCompletedStatus();

	      var callback = current === Transition.ENTERING ? 'onShow' : 'onHide';

	      _this.setState({
	        status: status,
	        animating: false
	      }, function () {
	        lodash.invoke(_this.props, callback, null, objectSpread({}, _this.props, {
	          status: status
	        }));
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "updateStatus", function () {
	      var animating = _this.state.animating;

	      if (_this.nextStatus) {
	        _this.nextStatus = _this.computeNextStatus();
	        if (!animating) _this.handleStart();
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "computeClasses", function () {
	      var _this$props = _this.props,
	          animation = _this$props.animation,
	          directional = _this$props.directional,
	          children = _this$props.children;
	      var _this$state = _this.state,
	          animating = _this$state.animating,
	          status = _this$state.status;

	      var childClasses = lodash.get(children, 'props.className');

	      var isDirectional = lodash.isNil(directional) ? lodash.includes(DIRECTIONAL_TRANSITIONS, animation) : directional;

	      if (isDirectional) {
	        return classNames(animation, childClasses, useKeyOnly(animating, 'animating'), useKeyOnly(status === Transition.ENTERING, 'in'), useKeyOnly(status === Transition.EXITING, 'out'), useKeyOnly(status === Transition.EXITED, 'hidden'), useKeyOnly(status !== Transition.EXITED, 'visible'), 'transition');
	      }

	      return classNames(animation, childClasses, useKeyOnly(animating, 'animating transition'));
	    });

	    defineProperty(assertThisInitialized(_this), "computeCompletedStatus", function () {
	      var unmountOnHide = _this.props.unmountOnHide;
	      var status = _this.state.status;
	      if (status === Transition.ENTERING) return Transition.ENTERED;
	      return unmountOnHide ? Transition.UNMOUNTED : Transition.EXITED;
	    });

	    defineProperty(assertThisInitialized(_this), "computeInitialStatuses", function () {
	      var _this$props2 = _this.props,
	          visible = _this$props2.visible,
	          mountOnShow = _this$props2.mountOnShow,
	          transitionOnMount = _this$props2.transitionOnMount,
	          unmountOnHide = _this$props2.unmountOnHide;

	      if (visible) {
	        if (transitionOnMount) {
	          return {
	            initial: Transition.EXITED,
	            next: Transition.ENTERING
	          };
	        }

	        return {
	          initial: Transition.ENTERED
	        };
	      }

	      if (mountOnShow || unmountOnHide) return {
	        initial: Transition.UNMOUNTED
	      };
	      return {
	        initial: Transition.EXITED
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "computeNextStatus", function () {
	      var _this$state2 = _this.state,
	          animating = _this$state2.animating,
	          status = _this$state2.status;
	      if (animating) return status === Transition.ENTERING ? Transition.EXITING : Transition.ENTERING;
	      return status === Transition.ENTERED ? Transition.EXITING : Transition.ENTERING;
	    });

	    defineProperty(assertThisInitialized(_this), "computeStatuses", function (props) {
	      var status = _this.state.status;
	      var visible = props.visible;

	      if (visible) {
	        return {
	          current: status === Transition.UNMOUNTED && Transition.EXITED,
	          next: status !== Transition.ENTERING && status !== Transition.ENTERED && Transition.ENTERING
	        };
	      }

	      return {
	        next: (status === Transition.ENTERING || status === Transition.ENTERED) && Transition.EXITING
	      };
	    });

	    defineProperty(assertThisInitialized(_this), "computeStyle", function () {
	      var _this$props3 = _this.props,
	          children = _this$props3.children,
	          duration = _this$props3.duration;
	      var status = _this.state.status;

	      var childStyle = lodash.get(children, 'props.style');

	      var type = TRANSITION_TYPE[status];
	      var animationDuration = type && "".concat(normalizeTransitionDuration(duration, type), "ms");
	      return objectSpread({}, childStyle, {
	        animationDuration: animationDuration
	      });
	    });

	    var _this$computeInitialS = _this.computeInitialStatuses(),
	        _status = _this$computeInitialS.initial,
	        next = _this$computeInitialS.next;

	    _this.nextStatus = next;
	    _this.state = {
	      status: _status
	    };
	    return _this;
	  } // ----------------------------------------
	  // Lifecycle
	  // ----------------------------------------


	  createClass(Transition, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      debug$6('componentDidMount()');
	      this.updateStatus();
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      debug$6('componentWillReceiveProps()');

	      var _this$computeStatuses = this.computeStatuses(nextProps),
	          status = _this$computeStatuses.current,
	          next = _this$computeStatuses.next;

	      this.nextStatus = next;
	      if (status) this.setState({
	        status: status
	      });
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      debug$6('componentDidUpdate()');
	      this.updateStatus();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      debug$6('componentWillUnmount()');
	      clearTimeout(this.timeoutId);
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      debug$6('render()');
	      debug$6('props', this.props);
	      debug$6('state', this.state);
	      var children = this.props.children;
	      var status = this.state.status;
	      if (status === Transition.UNMOUNTED) return null;
	      return React.cloneElement(children, {
	        className: this.computeClasses(),
	        style: this.computeStyle()
	      });
	    }
	  }]);

	  return Transition;
	}(React.Component);

	defineProperty(Transition, "propTypes", {
	  /** Named animation event to used. Must be defined in CSS. */
	  animation: propTypes.oneOfType([propTypes.oneOf(TRANSITIONS), propTypes.string]),

	  /** Primary content. */
	  children: propTypes.element.isRequired,

	  /** Whether it is directional animation event or not. Use it only for custom transitions. */
	  directional: propTypes.bool,

	  /** Duration of the CSS transition animation in milliseconds. */
	  duration: propTypes.oneOfType([propTypes.number, propTypes.shape({
	    hide: propTypes.number,
	    show: propTypes.number
	  }), propTypes.string]),

	  /** Show the component; triggers the enter or exit animation. */
	  visible: propTypes.bool,

	  /** Wait until the first "enter" transition to mount the component (add it to the DOM). */
	  mountOnShow: propTypes.bool,

	  /**
	   * Callback on each transition that changes visibility to shown.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onComplete: propTypes.func,

	  /**
	   * Callback on each transition that changes visibility to hidden.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onHide: propTypes.func,

	  /**
	   * Callback on each transition that changes visibility to shown.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onShow: propTypes.func,

	  /**
	   * Callback on animation start.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onStart: propTypes.func,

	  /** React's key of the element. */
	  reactKey: propTypes.string,

	  /** Run the enter animation when the component mounts, if it is initially shown. */
	  transitionOnMount: propTypes.bool,

	  /** Unmount the component (remove it from the DOM) when it is not shown. */
	  unmountOnHide: propTypes.bool
	});

	defineProperty(Transition, "defaultProps", {
	  animation: 'fade',
	  duration: 500,
	  visible: true,
	  mountOnShow: true,
	  transitionOnMount: false,
	  unmountOnHide: false
	});

	defineProperty(Transition, "ENTERED", 'ENTERED');

	defineProperty(Transition, "ENTERING", 'ENTERING');

	defineProperty(Transition, "EXITED", 'EXITED');

	defineProperty(Transition, "EXITING", 'EXITING');

	defineProperty(Transition, "UNMOUNTED", 'UNMOUNTED');

	defineProperty(Transition, "Group", TransitionGroup);

	var debug$7 = makeDebugger('transitionable_portal');
	/**
	 * A sugar for `Portal` and `Transition`.
	 * @see Portal
	 * @see Transition
	 */

	var TransitionablePortal =
	/*#__PURE__*/
	function (_Component) {
	  inherits(TransitionablePortal, _Component);

	  function TransitionablePortal(props) {
	    var _this;

	    classCallCheck(this, TransitionablePortal);

	    _this = possibleConstructorReturn(this, getPrototypeOf(TransitionablePortal).call(this, props));

	    defineProperty(assertThisInitialized(_this), "handlePortalClose", function () {
	      debug$7('handlePortalClose()');

	      _this.setState({
	        portalOpen: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalOpen", function () {
	      debug$7('handlePortalOpen()');

	      _this.setState({
	        portalOpen: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleTransitionHide", function (nothing, data) {
	      debug$7('handleTransitionHide()');
	      var portalOpen = _this.state.portalOpen;

	      _this.setState({
	        transitionVisible: false
	      });

	      lodash.invoke(_this.props, 'onClose', null, objectSpread({}, data, {
	        portalOpen: false,
	        transitionVisible: false
	      }));

	      lodash.invoke(_this.props, 'onHide', null, objectSpread({}, data, {
	        portalOpen: portalOpen,
	        transitionVisible: false
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleTransitionStart", function (nothing, data) {
	      debug$7('handleTransitionStart()');
	      var portalOpen = _this.state.portalOpen;
	      var status = data.status;
	      var transitionVisible = status === Transition.ENTERING;

	      lodash.invoke(_this.props, 'onStart', null, objectSpread({}, data, {
	        portalOpen: portalOpen,
	        transitionVisible: transitionVisible
	      })); // Heads up! TransitionablePortal fires onOpen callback on the start of transition animation


	      if (!transitionVisible) return;

	      _this.setState({
	        transitionVisible: transitionVisible
	      });

	      lodash.invoke(_this.props, 'onOpen', null, objectSpread({}, data, {
	        transitionVisible: transitionVisible,
	        portalOpen: true
	      }));
	    });

	    _this.state = {
	      portalOpen: props.open
	    };
	    return _this;
	  } // ----------------------------------------
	  // Lifecycle
	  // ----------------------------------------


	  createClass(TransitionablePortal, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(_ref) {
	      var open = _ref.open;
	      debug$7('componentWillReceiveProps()', {
	        open: open
	      });
	      this.setState({
	        portalOpen: open
	      });
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      debug$7('render()', this.state);
	      var _this$props = this.props,
	          children = _this$props.children,
	          transition = _this$props.transition;
	      var _this$state = this.state,
	          portalOpen = _this$state.portalOpen,
	          transitionVisible = _this$state.transitionVisible;
	      var open = portalOpen || transitionVisible;
	      var rest$$1 = getUnhandledProps(TransitionablePortal, this.props);
	      return React__default.createElement(Portal, _extends_1({}, rest$$1, {
	        open: open,
	        onOpen: this.handlePortalOpen,
	        onClose: this.handlePortalClose
	      }), React__default.createElement(Transition, _extends_1({}, transition, {
	        transitionOnMount: true,
	        onStart: this.handleTransitionStart,
	        onHide: this.handleTransitionHide,
	        visible: portalOpen
	      }), children));
	    }
	  }]);

	  return TransitionablePortal;
	}(React.Component);

	defineProperty(TransitionablePortal, "propTypes", {
	  /** Primary content. */
	  children: propTypes.node.isRequired,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and internal state.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback on each transition that changes visibility to hidden.
	   *
	   * @param {null}
	   * @param {object} data - All props with transition status and internal state.
	   */
	  onHide: propTypes.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and internal state.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Callback on animation start.
	   *
	   * @param {null}
	   * @param {object} data - All props with transition status and internal state.
	   */
	  onStart: propTypes.func,

	  /** Controls whether or not the portal is displayed. */
	  open: propTypes.bool,

	  /** Transition props. */
	  transition: propTypes.object
	});

	defineProperty(TransitionablePortal, "defaultProps", {
	  transition: {
	    animation: 'scale',
	    duration: 400
	  }
	});

	/**
	 * Visibility provides a set of callbacks for when a content appears in the viewport.
	 */

	var Visibility =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Visibility, _Component);

	  function Visibility() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Visibility);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Visibility)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "calculations", {
	      bottomPassed: false,
	      bottomVisible: false,
	      fits: false,
	      passing: false,
	      offScreen: false,
	      onScreen: false,
	      topPassed: false,
	      topVisible: false
	    });

	    defineProperty(assertThisInitialized(_this), "firedCallbacks", []);

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "fire", function (_ref, value) {
	      var callback = _ref.callback,
	          name = _ref.name;
	      var reverse$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var _this$props = _this.props,
	          continuous = _this$props.continuous,
	          once$$1 = _this$props.once; // Heads up! For the execution is required:
	      // - current value correspond to the fired direction
	      // - `continuous` is true or calculation values are different

	      var matchesDirection = _this.calculations[value] !== reverse$$1;
	      var executionPossible = continuous || _this.calculations[value] !== _this.oldCalculations[value];
	      if (matchesDirection && executionPossible) _this.execute(callback, name); // Heads up! We should remove callback from the happened when it's not `once`

	      if (!once$$1) _this.firedCallbacks = lodash.without(_this.firedCallbacks, name);
	    });

	    defineProperty(assertThisInitialized(_this), "handleUpdate", function () {
	      if (_this.ticking) return;
	      _this.ticking = true;
	      _this.frameId = requestAnimationFrame(_this.update);
	    });

	    defineProperty(assertThisInitialized(_this), "update", function () {
	      if (!_this.mounted) return;
	      _this.ticking = false;
	      _this.oldCalculations = _this.calculations;
	      _this.calculations = _this.computeCalculations();
	      _this.pageYOffset = window.pageYOffset;
	      var _this$props2 = _this.props,
	          onBottomPassed = _this$props2.onBottomPassed,
	          onBottomPassedReverse = _this$props2.onBottomPassedReverse,
	          onBottomVisible = _this$props2.onBottomVisible,
	          onBottomVisibleReverse = _this$props2.onBottomVisibleReverse,
	          onPassing = _this$props2.onPassing,
	          onPassingReverse = _this$props2.onPassingReverse,
	          onTopPassed = _this$props2.onTopPassed,
	          onTopPassedReverse = _this$props2.onTopPassedReverse,
	          onTopVisible = _this$props2.onTopVisible,
	          onTopVisibleReverse = _this$props2.onTopVisibleReverse,
	          onOffScreen = _this$props2.onOffScreen,
	          onOnScreen = _this$props2.onOnScreen,
	          updateOn = _this$props2.updateOn;
	      var forward = {
	        bottomPassed: {
	          callback: onBottomPassed,
	          name: 'onBottomPassed'
	        },
	        bottomVisible: {
	          callback: onBottomVisible,
	          name: 'onBottomVisible'
	        },
	        passing: {
	          callback: onPassing,
	          name: 'onPassing'
	        },
	        offScreen: {
	          callback: onOffScreen,
	          name: 'onOffScreen'
	        },
	        onScreen: {
	          callback: onOnScreen,
	          name: 'onOnScreen'
	        },
	        topPassed: {
	          callback: onTopPassed,
	          name: 'onTopPassed'
	        },
	        topVisible: {
	          callback: onTopVisible,
	          name: 'onTopVisible'
	        }
	      };
	      var reverse$$1 = {
	        bottomPassed: {
	          callback: onBottomPassedReverse,
	          name: 'onBottomPassedReverse'
	        },
	        bottomVisible: {
	          callback: onBottomVisibleReverse,
	          name: 'onBottomVisibleReverse'
	        },
	        passing: {
	          callback: onPassingReverse,
	          name: 'onPassingReverse'
	        },
	        topPassed: {
	          callback: onTopPassedReverse,
	          name: 'onTopPassedReverse'
	        },
	        topVisible: {
	          callback: onTopVisibleReverse,
	          name: 'onTopVisibleReverse'
	        }
	      };

	      lodash.invoke(_this.props, 'onUpdate', null, objectSpread({}, _this.props, {
	        calculations: _this.calculations
	      }));

	      _this.fireOnPassed(); // Heads up! Reverse callbacks should be fired first


	      lodash.forEach(reverse$$1, function (data, value) {
	        return _this.fire(data, value, true);
	      });

	      lodash.forEach(forward, function (data, value) {
	        return _this.fire(data, value);
	      });

	      if (updateOn === 'repaint') _this.handleUpdate();
	    });

	    return _this;
	  }

	  createClass(Visibility, [{
	    key: "componentWillReceiveProps",
	    // ----------------------------------------
	    // Lifecycle
	    // ----------------------------------------
	    value: function componentWillReceiveProps(_ref2) {
	      var continuous = _ref2.continuous,
	          once$$1 = _ref2.once,
	          context = _ref2.context,
	          updateOn = _ref2.updateOn;
	      var cleanHappened = continuous !== this.props.continuous || once$$1 !== this.props.once || updateOn !== this.props.updateOn; // Heads up! We should clean up array of happened callbacks, if values of these props are changed

	      if (cleanHappened) this.firedCallbacks = [];

	      if (context !== this.props.context || updateOn !== this.props.updateOn) {
	        this.unattachHandlers(this.props.context);
	        this.attachHandlers(context, updateOn);
	      }
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.mounted = true;
	      if (!isBrowser()) return;
	      var _this$props3 = this.props,
	          context = _this$props3.context,
	          fireOnMount = _this$props3.fireOnMount,
	          updateOn = _this$props3.updateOn;
	      this.pageYOffset = window.pageYOffset;
	      this.attachHandlers(context, updateOn);
	      if (fireOnMount) this.update();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var context = this.props.context;
	      this.unattachHandlers(context);
	      this.mounted = false;
	    }
	  }, {
	    key: "attachHandlers",
	    value: function attachHandlers(context, updateOn) {
	      if (updateOn === 'events') {
	        if (context) {
	          instance$1.sub('resize', this.handleUpdate, {
	            target: context
	          });
	          instance$1.sub('scroll', this.handleUpdate, {
	            target: context
	          });
	        }

	        return;
	      } // Heads up!
	      // We will deal with `repaint` there


	      this.handleUpdate();
	    }
	  }, {
	    key: "unattachHandlers",
	    value: function unattachHandlers(context) {
	      if (context) {
	        instance$1.unsub('resize', this.handleUpdate, {
	          target: context
	        });
	        instance$1.unsub('scroll', this.handleUpdate, {
	          target: context
	        });
	      }

	      if (this.frameId) cancelAnimationFrame(this.frameId);
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "execute",
	    value: function execute(callback, name) {
	      var continuous = this.props.continuous;
	      if (!callback) return; // Heads up! When `continuous` is true, callback will be fired always

	      if (!continuous && lodash.includes(this.firedCallbacks, name)) return;
	      callback(null, objectSpread({}, this.props, {
	        calculations: this.calculations
	      }));
	      this.firedCallbacks.push(name);
	    }
	  }, {
	    key: "fireOnPassed",
	    value: function fireOnPassed() {
	      var _this2 = this;

	      var _this$calculations = this.calculations,
	          percentagePassed = _this$calculations.percentagePassed,
	          pixelsPassed = _this$calculations.pixelsPassed;
	      var onPassed = this.props.onPassed;

	      lodash.forEach(onPassed, function (callback, passed) {
	        var pixelsValue = Number(passed);

	        if (pixelsValue && pixelsPassed >= pixelsValue) {
	          _this2.execute(callback, passed);

	          return;
	        }

	        var matchPercentage = "".concat(passed).match(/^(\d+)%$/);
	        if (!matchPercentage) return;
	        var percentageValue = Number(matchPercentage[1]) / 100;
	        if (percentagePassed >= percentageValue) _this2.execute(callback, passed);
	      });
	    }
	  }, {
	    key: "computeCalculations",
	    // ----------------------------------------
	    // Helpers
	    // ----------------------------------------
	    value: function computeCalculations() {
	      var offset = this.props.offset;

	      var _this$ref$current$get = this.ref.current.getBoundingClientRect(),
	          bottom = _this$ref$current$get.bottom,
	          height = _this$ref$current$get.height,
	          top = _this$ref$current$get.top,
	          width = _this$ref$current$get.width;

	      var _normalizeOffset = normalizeOffset(offset),
	          _normalizeOffset2 = slicedToArray(_normalizeOffset, 2),
	          topOffset = _normalizeOffset2[0],
	          bottomOffset = _normalizeOffset2[1];

	      var direction = window.pageYOffset > this.pageYOffset ? 'down' : 'up';
	      var topPassed = top < topOffset;
	      var bottomPassed = bottom < bottomOffset;
	      var pixelsPassed = bottomPassed ? 0 : Math.max(top * -1, 0);
	      var percentagePassed = pixelsPassed / height;
	      var bottomVisible = bottom >= bottomOffset && bottom <= window.innerHeight;
	      var topVisible = top >= topOffset && top <= window.innerHeight;
	      var fits = topVisible && bottomVisible;
	      var passing = topPassed && !bottomPassed;
	      var onScreen = (topVisible || topPassed) && !bottomPassed;
	      var offScreen = !onScreen;
	      return {
	        bottomPassed: bottomPassed,
	        bottomVisible: bottomVisible,
	        direction: direction,
	        fits: fits,
	        height: height,
	        passing: passing,
	        percentagePassed: percentagePassed,
	        pixelsPassed: pixelsPassed,
	        offScreen: offScreen,
	        onScreen: onScreen,
	        topPassed: topPassed,
	        topVisible: topVisible,
	        width: width
	      };
	    } // ----------------------------------------
	    // Render
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      var ElementType = getElementType(Visibility, this.props);
	      var rest$$1 = getUnhandledProps(Visibility, this.props);
	      return React__default.createElement(Ref, {
	        innerRef: this.ref
	      }, React__default.createElement(ElementType, rest$$1, children));
	    }
	  }]);

	  return Visibility;
	}(React.Component);

	defineProperty(Visibility, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Context which visibility should attach onscroll events. */
	  context: propTypes.object,

	  /**
	   * When set to true a callback will occur anytime an element passes a condition not just immediately after the
	   * threshold is met.
	   */
	  continuous: propTypes.bool,

	  /** Fires callbacks immediately after mount. */
	  fireOnMount: propTypes.bool,

	  /**
	   * Element's bottom edge has passed top of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomPassed: propTypes.func,

	  /**
	   * Element's bottom edge has not passed top of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomPassedReverse: propTypes.func,

	  /**
	   * Element's bottom edge has passed bottom of screen
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomVisible: propTypes.func,

	  /**
	   * Element's bottom edge has not passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomVisibleReverse: propTypes.func,

	  /**
	   * Value that context should be adjusted in pixels. Useful for making content appear below content fixed to the
	   * page.
	   */
	  offset: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.string]))]),

	  /** When set to false a callback will occur each time an element passes the threshold for a condition. */
	  once: propTypes.bool,

	  /** Element is not visible on the screen. */
	  onPassed: propTypes.object,

	  /**
	   * Any part of an element is visible on screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onPassing: propTypes.func,

	  /**
	   * Element's top has not passed top of screen but bottom has.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onPassingReverse: propTypes.func,

	  /**
	   * Element is not visible on the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onOffScreen: propTypes.func,

	  /**
	   * Element is visible on the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onOnScreen: propTypes.func,

	  /**
	   * Element's top edge has passed top of the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopPassed: propTypes.func,

	  /**
	   * Element's top edge has not passed top of the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopPassedReverse: propTypes.func,

	  /**
	   * Element's top edge has passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopVisible: propTypes.func,

	  /**
	   * Element's top edge has not passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopVisibleReverse: propTypes.func,

	  /**
	   * Element's top edge has passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUpdate: propTypes.func,

	  /**
	   * Allows to choose the mode of the position calculations:
	   * - `events` - (default) update and fire callbacks only on scroll/resize events
	   * - `repaint` - update and fire callbacks on browser repaint (animation frames)
	   */
	  updateOn: propTypes.oneOf(['events', 'repaint'])
	});

	defineProperty(Visibility, "defaultProps", {
	  context: isBrowser() ? window : null,
	  continuous: false,
	  offset: [0, 0],
	  once: true,
	  updateOn: 'events'
	});

	/**
	 * A divider sub-component for Breadcrumb component.
	 */

	function BreadcrumbDivider(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = classNames('divider', className);
	  var rest$$1 = getUnhandledProps(BreadcrumbDivider, props);
	  var ElementType = getElementType(BreadcrumbDivider, props);

	  if (!lodash.isNil(icon)) {
	    return Icon.create(icon, {
	      defaultProps: objectSpread({}, rest$$1, {
	        className: classes
	      }),
	      autoGenerateKey: false
	    });
	  }

	  if (!lodash.isNil(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? '/' : children);
	}

	BreadcrumbDivider.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Render as an `Icon` component with `divider` class instead of a `div`. */
	  icon: itemShorthand
	};
	BreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {
	  return {
	    icon: icon
	  };
	});

	/**
	 * A section sub-component for Breadcrumb component.
	 */

	var BreadcrumbSection =
	/*#__PURE__*/
	function (_Component) {
	  inherits(BreadcrumbSection, _Component);

	  function BreadcrumbSection() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, BreadcrumbSection);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(BreadcrumbSection)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "computeElementType", function () {
	      var _this$props = _this.props,
	          link = _this$props.link,
	          onClick = _this$props.onClick;
	      if (link || onClick) return 'a';
	    });

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      return lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(BreadcrumbSection, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          active = _this$props2.active,
	          children = _this$props2.children,
	          className = _this$props2.className,
	          content = _this$props2.content,
	          href = _this$props2.href;
	      var classes = classNames(useKeyOnly(active, 'active'), 'section', className);
	      var rest$$1 = getUnhandledProps(BreadcrumbSection, this.props);
	      var ElementType = getElementType(BreadcrumbSection, this.props, this.computeElementType);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), isNil$1(children) ? content : children);
	    }
	  }]);

	  return BreadcrumbSection;
	}(React.Component);

	defineProperty(BreadcrumbSection, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Style as the currently active section. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: every$1([disallow(['link']), propTypes.string]),

	  /** Render as an `a` tag instead of a `div`. */
	  link: every$1([disallow(['href']), propTypes.bool]),

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func
	});
	BreadcrumbSection.create = createShorthandFactory(BreadcrumbSection, function (content) {
	  return {
	    content: content,
	    link: true
	  };
	});

	/**
	 * A breadcrumb is used to show hierarchy between content.
	 */

	function Breadcrumb(props) {
	  var children = props.children,
	      className = props.className,
	      divider = props.divider,
	      icon = props.icon,
	      sections = props.sections,
	      size$$1 = props.size;
	  var classes = classNames('ui', size$$1, 'breadcrumb', className);
	  var rest$$1 = getUnhandledProps(Breadcrumb, props);
	  var ElementType = getElementType(Breadcrumb, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  var childElements = [];

	  lodash.each(sections, function (section, index) {
	    // section
	    var breadcrumbElement = BreadcrumbSection.create(section);
	    childElements.push(breadcrumbElement); // divider

	    if (index !== sections.length - 1) {
	      var key = "".concat(breadcrumbElement.key, "_divider") || JSON.stringify(section);
	      childElements.push(BreadcrumbDivider.create({
	        content: divider,
	        icon: icon,
	        key: key
	      }));
	    }
	  });

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), childElements);
	}

	Breadcrumb.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content of the Breadcrumb.Divider. */
	  divider: every$1([disallow(['icon']), contentShorthand]),

	  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in
	   *  Breadcrumb.Divider. */
	  icon: every$1([disallow(['divider']), itemShorthand]),

	  /** Shorthand array of props for Breadcrumb.Section. */
	  sections: collectionShorthand,

	  /** Size of Breadcrumb. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium'))
	};
	Breadcrumb.Divider = BreadcrumbDivider;
	Breadcrumb.Section = BreadcrumbSection;

	/**
	 * A field is a form element containing a label and an input.
	 * @see Form
	 * @see Button
	 * @see Checkbox
	 * @see Dropdown
	 * @see Input
	 * @see Radio
	 * @see Select
	 * @see Visibility
	 */

	function FormField(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      control = props.control,
	      disabled = props.disabled,
	      error = props.error,
	      inline = props.inline,
	      label = props.label,
	      required = props.required,
	      type = props.type,
	      width = props.width;
	  var classes = classNames(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);
	  var rest$$1 = getUnhandledProps(FormField, props);
	  var ElementType = getElementType(FormField, props); // ----------------------------------------
	  // No Control
	  // ----------------------------------------

	  if (lodash.isNil(control)) {
	    if (lodash.isNil(label)) {
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), isNil$1(children) ? content : children);
	    }

	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), createHTMLLabel(label, {
	      autoGenerateKey: false
	    }));
	  } // ----------------------------------------
	  // Checkbox/Radio Control
	  // ----------------------------------------


	  var controlProps = objectSpread({}, rest$$1, {
	    content: content,
	    children: children,
	    disabled: disabled,
	    required: required,
	    type: type // wrap HTML checkboxes/radios in the label

	  });

	  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {
	    return React__default.createElement(ElementType, {
	      className: classes
	    }, React__default.createElement("label", null, React.createElement(control, controlProps), " ", label));
	  } // pass label prop to controls that support it


	  if (control === Checkbox || control === Radio) {
	    return React__default.createElement(ElementType, {
	      className: classes
	    }, React.createElement(control, objectSpread({}, controlProps, {
	      label: label
	    })));
	  } // ----------------------------------------
	  // Other Control
	  // ----------------------------------------


	  return React__default.createElement(ElementType, {
	    className: classes
	  }, createHTMLLabel(label, {
	    defaultProps: {
	      htmlFor: lodash.get(controlProps, 'id')
	    },
	    autoGenerateKey: false
	  }), React.createElement(control, controlProps));
	}

	FormField.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /**
	   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').
	   * Extra FormField props are passed to the control component.
	   * Mutually exclusive with children.
	   */
	  control: some$1([propTypes.func, propTypes.oneOf(['button', 'input', 'select', 'textarea'])]),

	  /** Individual fields may be disabled. */
	  disabled: propTypes.bool,

	  /** Individual fields may display an error state. */
	  error: propTypes.bool,

	  /** A field can have its label next to instead of above it. */
	  inline: propTypes.bool,
	  // Heads Up!
	  // Do not disallow children with `label` shorthand
	  // The `control` might accept a `label` prop and `children`

	  /** Mutually exclusive with children. */
	  label: propTypes.oneOfType([propTypes.node, propTypes.object]),

	  /** A field can show that input is mandatory. */
	  required: propTypes.bool,

	  /** Passed to the control component (i.e. <input type='password' />) */
	  type: every$1([demand(['control'])]),

	  /** A field can specify its width in grid columns */
	  width: propTypes.oneOf(WIDTHS)
	};

	/**
	 * Sugar for <Form.Field control={Button} />.
	 * @see Button
	 * @see Form
	 */

	function FormButton(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormButton, props);
	  var ElementType = getElementType(FormButton, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormButton.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormButton.defaultProps = {
	  as: FormField,
	  control: Button
	};

	/**
	 * Sugar for <Form.Field control={Checkbox} />.
	 * @see Checkbox
	 * @see Form
	 */

	function FormCheckbox(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormCheckbox, props);
	  var ElementType = getElementType(FormCheckbox, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormCheckbox.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormCheckbox.defaultProps = {
	  as: FormField,
	  control: Checkbox
	};

	/**
	 * Sugar for <Form.Field control={Dropdown} />.
	 * @see Dropdown
	 * @see Form
	 */

	function FormDropdown(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormDropdown, props);
	  var ElementType = getElementType(FormDropdown, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormDropdown.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormDropdown.defaultProps = {
	  as: FormField,
	  control: Dropdown
	};

	/**
	 * A set of fields can appear grouped together.
	 * @see Form
	 */

	function FormGroup(props) {
	  var children = props.children,
	      className = props.className,
	      grouped = props.grouped,
	      inline = props.inline,
	      unstackable = props.unstackable,
	      widths = props.widths;
	  var classes = classNames(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);
	  var rest = getUnhandledProps(FormGroup, props);
	  var ElementType = getElementType(FormGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), children);
	}

	FormGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Fields can show related choices. */
	  grouped: every$1([disallow(['inline']), propTypes.bool]),

	  /** Multiple fields may be inline in a row. */
	  inline: every$1([disallow(['grouped']), propTypes.bool]),

	  /** A form group can prevent itself from stacking on mobile. */
	  unstackable: propTypes.bool,

	  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */
	  widths: propTypes.oneOf([].concat(toConsumableArray$1(WIDTHS), ['equal']))
	};

	/**
	 * An Input is a field used to elicit a response from a user.
	 * @see Button
	 * @see Form
	 * @see Icon
	 * @see Label
	 */

	var Input =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Input, _Component);

	  function Input() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Input);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "inputRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "computeIcon", function () {
	      var _this$props = _this.props,
	          loading = _this$props.loading,
	          icon = _this$props.icon;
	      if (!lodash.isNil(icon)) return icon;
	      if (loading) return 'spinner';
	    });

	    defineProperty(assertThisInitialized(_this), "computeTabIndex", function () {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!lodash.isNil(tabIndex)) return tabIndex;
	      if (disabled) return -1;
	    });

	    defineProperty(assertThisInitialized(_this), "focus", function () {
	      return _this.inputRef.current.focus();
	    });

	    defineProperty(assertThisInitialized(_this), "select", function () {
	      return _this.inputRef.current.select();
	    });

	    defineProperty(assertThisInitialized(_this), "handleChange", function (e) {
	      var value = lodash.get(e, 'target.value');

	      lodash.invoke(_this.props, 'onChange', e, objectSpread({}, _this.props, {
	        value: value
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleChildOverrides", function (child, defaultProps) {
	      return objectSpread({}, defaultProps, child.props, {
	        ref: function ref$$1(c) {
	          handleRef(child.ref, c);
	          _this.inputRef.current = c;
	        }
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "partitionProps", function () {
	      var _this$props3 = _this.props,
	          disabled = _this$props3.disabled,
	          type = _this$props3.type;

	      var tabIndex = _this.computeTabIndex();

	      var unhandled = getUnhandledProps(Input, _this.props);

	      var _partitionHTMLProps = partitionHTMLProps(unhandled),
	          _partitionHTMLProps2 = slicedToArray(_partitionHTMLProps, 2),
	          htmlInputProps$$1 = _partitionHTMLProps2[0],
	          rest$$1 = _partitionHTMLProps2[1];

	      return [objectSpread({}, htmlInputProps$$1, {
	        disabled: disabled,
	        type: type,
	        tabIndex: tabIndex,
	        onChange: _this.handleChange,
	        ref: _this.inputRef
	      }), rest$$1];
	    });

	    return _this;
	  }

	  createClass(Input, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props4 = this.props,
	          action = _this$props4.action,
	          actionPosition = _this$props4.actionPosition,
	          children = _this$props4.children,
	          className = _this$props4.className,
	          disabled = _this$props4.disabled,
	          error = _this$props4.error,
	          fluid = _this$props4.fluid,
	          focus = _this$props4.focus,
	          icon = _this$props4.icon,
	          iconPosition = _this$props4.iconPosition,
	          input = _this$props4.input,
	          inverted = _this$props4.inverted,
	          label = _this$props4.label,
	          labelPosition = _this$props4.labelPosition,
	          loading = _this$props4.loading,
	          size$$1 = _this$props4.size,
	          transparent = _this$props4.transparent,
	          type = _this$props4.type;
	      var classes = classNames('ui', size$$1, useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(fluid, 'fluid'), useKeyOnly(focus, 'focus'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(transparent, 'transparent'), useValueAndKey(actionPosition, 'action') || useKeyOnly(action, 'action'), useValueAndKey(iconPosition, 'icon') || useKeyOnly(icon || loading, 'icon'), useValueAndKey(labelPosition, 'labeled') || useKeyOnly(label, 'labeled'), 'input', className);
	      var ElementType = getElementType(Input, this.props);

	      var _this$partitionProps = this.partitionProps(),
	          _this$partitionProps2 = slicedToArray(_this$partitionProps, 2),
	          htmlInputProps$$1 = _this$partitionProps2[0],
	          rest$$1 = _this$partitionProps2[1]; // Render with children
	      // ----------------------------------------


	      if (!isNil$1(children)) {
	        // add htmlInputProps to the `<input />` child
	        var childElements = lodash.map(React.Children.toArray(children), function (child) {
	          if (child.type !== 'input') return child;
	          return React.cloneElement(child, _this2.handleChildOverrides(child, htmlInputProps$$1));
	        });

	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes
	        }), childElements);
	      } // Render Shorthand
	      // ----------------------------------------


	      var actionElement = Button.create(action, {
	        autoGenerateKey: false
	      });
	      var labelElement = Label.create(label, {
	        defaultProps: {
	          className: classNames('label', // add 'left|right corner'
	          lodash.includes(labelPosition, 'corner') && labelPosition)
	        },
	        autoGenerateKey: false
	      });
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), actionPosition === 'left' && actionElement, labelPosition !== 'right' && labelElement, createHTMLInput(input || type, {
	        defaultProps: htmlInputProps$$1,
	        autoGenerateKey: false
	      }), Icon.create(this.computeIcon(), {
	        autoGenerateKey: false
	      }), actionPosition !== 'left' && actionElement, labelPosition === 'right' && labelElement);
	    }
	  }]);

	  return Input;
	}(React.Component);

	defineProperty(Input, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An Input can be formatted to alert the user to an action they may perform. */
	  action: propTypes.oneOfType([propTypes.bool, itemShorthand]),

	  /** An action can appear along side an Input on the left or right. */
	  actionPosition: propTypes.oneOf(['left']),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** An Input field can show that it is disabled. */
	  disabled: propTypes.bool,

	  /** An Input field can show the data contains errors. */
	  error: propTypes.bool,

	  /** Take on the size of its container. */
	  fluid: propTypes.bool,

	  /** An Input field can show a user is currently interacting with it. */
	  focus: propTypes.bool,

	  /** Optional Icon to display inside the Input. */
	  icon: propTypes.oneOfType([propTypes.bool, itemShorthand]),

	  /** An Icon can appear inside an Input on the left or right. */
	  iconPosition: propTypes.oneOf(['left']),

	  /** Shorthand for creating the HTML Input. */
	  input: itemShorthand,

	  /** Format to appear on dark backgrounds. */
	  inverted: propTypes.bool,

	  /** Optional Label to display along side the Input. */
	  label: itemShorthand,

	  /** A Label can appear outside an Input on the left or right. */
	  labelPosition: propTypes.oneOf(['left', 'right', 'left corner', 'right corner']),

	  /** An Icon Input field can show that it is currently loading data. */
	  loading: propTypes.bool,

	  /**
	   * Called on change.
	   *
	   * @param {ChangeEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and a proposed value.
	   */
	  onChange: propTypes.func,

	  /** An Input can vary in size. */
	  size: propTypes.oneOf(['mini', 'small', 'large', 'big', 'huge', 'massive']),

	  /** An Input can receive focus. */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Transparent Input has no background. */
	  transparent: propTypes.bool,

	  /** The HTML input type. */
	  type: propTypes.string
	});

	defineProperty(Input, "defaultProps", {
	  type: 'text'
	});

	Input.create = createShorthandFactory(Input, function (type) {
	  return {
	    type: type
	  };
	});

	/**
	 * Sugar for <Form.Field control={Input} />.
	 * @see Form
	 * @see Input
	 */

	function FormInput(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormInput, props);
	  var ElementType = getElementType(FormInput, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormInput.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormInput.defaultProps = {
	  as: FormField,
	  control: Input
	};

	/**
	 * Sugar for <Form.Field control={Radio} />.
	 * @see Form
	 * @see Radio
	 */

	function FormRadio(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormRadio, props);
	  var ElementType = getElementType(FormRadio, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormRadio.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormRadio.defaultProps = {
	  as: FormField,
	  control: Radio
	};

	/**
	 * Sugar for <Form.Field control={Select} />.
	 * @see Form
	 * @see Select
	 */

	function FormSelect(props) {
	  var control = props.control,
	      options = props.options;
	  var rest = getUnhandledProps(FormSelect, props);
	  var ElementType = getElementType(FormSelect, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control,
	    options: options
	  }));
	}

	FormSelect.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control,

	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: propTypes.arrayOf(propTypes.shape(Dropdown.Item.propTypes)).isRequired
	};
	FormSelect.defaultProps = {
	  as: FormField,
	  control: Select
	};

	/**
	 * Sugar for <Form.Field control={TextArea} />.
	 * @see Form
	 * @see TextArea
	 */

	function FormTextArea(props) {
	  var control = props.control;
	  var rest = getUnhandledProps(FormTextArea, props);
	  var ElementType = getElementType(FormTextArea, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    control: control
	  }));
	}

	FormTextArea.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A FormField control prop. */
	  control: FormField.propTypes.control
	};
	FormTextArea.defaultProps = {
	  as: FormField,
	  control: TextArea
	};

	/**
	 * A Form displays a set of related user input fields in a structured way.
	 * @see Button
	 * @see Checkbox
	 * @see Dropdown
	 * @see Input
	 * @see Message
	 * @see Radio
	 * @see Select
	 * @see Visibility
	 */

	var Form =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Form, _Component);

	  function Form() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Form);

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(_args)));

	    defineProperty(assertThisInitialized(_this), "handleSubmit", function (e) {
	      var action = _this.props.action; // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()
	      // method.

	      if (typeof action !== 'string') lodash.invoke(e, 'preventDefault');

	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      lodash.invoke.apply(lodash, [_this.props, 'onSubmit', e, _this.props].concat(args));
	    });

	    return _this;
	  }

	  createClass(Form, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          action = _this$props.action,
	          children = _this$props.children,
	          className = _this$props.className,
	          error = _this$props.error,
	          inverted = _this$props.inverted,
	          loading = _this$props.loading,
	          reply = _this$props.reply,
	          size$$1 = _this$props.size,
	          success = _this$props.success,
	          unstackable = _this$props.unstackable,
	          warning = _this$props.warning,
	          widths = _this$props.widths;
	      var classes = classNames('ui', size$$1, useKeyOnly(error, 'error'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(reply, 'reply'), useKeyOnly(success, 'success'), useKeyOnly(unstackable, 'unstackable'), useKeyOnly(warning, 'warning'), useWidthProp(widths, null, true), 'form', className);
	      var rest$$1 = getUnhandledProps(Form, this.props);
	      var ElementType = getElementType(Form, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        action: action,
	        className: classes,
	        onSubmit: this.handleSubmit
	      }), children);
	    }
	  }]);

	  return Form;
	}(React.Component);

	defineProperty(Form, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** The HTML form action */
	  action: propTypes.string,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Automatically show any error Message children. */
	  error: propTypes.bool,

	  /** A form can have its color inverted for contrast. */
	  inverted: propTypes.bool,

	  /** Automatically show a loading indicator. */
	  loading: propTypes.bool,

	  /** The HTML form submit handler. */
	  onSubmit: propTypes.func,

	  /** A comment can contain a form to reply to a comment. This may have arbitrary content. */
	  reply: propTypes.bool,

	  /** A form can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** Automatically show any success Message children. */
	  success: propTypes.bool,

	  /** A form can prevent itself from stacking on mobile. */
	  unstackable: propTypes.bool,

	  /** Automatically show any warning Message children. */
	  warning: propTypes.bool,

	  /** Forms can automatically divide fields to be equal width. */
	  widths: propTypes.oneOf(['equal'])
	});

	defineProperty(Form, "defaultProps", {
	  as: 'form'
	});

	defineProperty(Form, "Field", FormField);

	defineProperty(Form, "Button", FormButton);

	defineProperty(Form, "Checkbox", FormCheckbox);

	defineProperty(Form, "Dropdown", FormDropdown);

	defineProperty(Form, "Group", FormGroup);

	defineProperty(Form, "Input", FormInput);

	defineProperty(Form, "Radio", FormRadio);

	defineProperty(Form, "Select", FormSelect);

	defineProperty(Form, "TextArea", FormTextArea);

	/**
	 * A column sub-component for Grid.
	 */

	function GridColumn(props) {
	  var children = props.children,
	      className = props.className,
	      computer = props.computer,
	      color = props.color,
	      floated = props.floated,
	      largeScreen = props.largeScreen,
	      mobile = props.mobile,
	      only = props.only,
	      stretched = props.stretched,
	      tablet = props.tablet,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      widescreen = props.widescreen,
	      width = props.width;
	  var classes = classNames(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);
	  var rest = getUnhandledProps(GridColumn, props);
	  var ElementType = getElementType(GridColumn, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), children);
	}

	GridColumn.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A grid column can be colored. */
	  color: propTypes.oneOf(COLORS),

	  /** A column can specify a width for a computer. */
	  computer: every$1([disallow(['width']), propTypes.oneOf(WIDTHS)]),

	  /** A column can sit flush against the left or right edge of a row. */
	  floated: propTypes.oneOf(FLOATS),

	  /** A column can specify a width for a large screen device. */
	  largeScreen: every$1([disallow(['width']), propTypes.oneOf(WIDTHS)]),

	  /** A column can specify a width for a mobile device. */
	  mobile: every$1([disallow(['width']), propTypes.oneOf(WIDTHS)]),

	  /** A column can appear only for a specific device, or screen sizes. */
	  only: multipleProp(VISIBILITY),

	  /** A column can stretch its contents to take up the entire grid or row height. */
	  stretched: propTypes.bool,

	  /** A column can specify a width for a tablet device. */
	  tablet: every$1([disallow(['width']), propTypes.oneOf(WIDTHS)]),

	  /** A column can specify its text alignment. */
	  textAlign: propTypes.oneOf(TEXT_ALIGNMENTS),

	  /** A column can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS),

	  /** A column can specify a width for a wide screen device. */
	  widescreen: every$1([disallow(['width']), propTypes.oneOf(WIDTHS)]),

	  /** Represents width of column. */
	  width: every$1([disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), propTypes.oneOf(WIDTHS)])
	};
	GridColumn.create = createShorthandFactory(GridColumn, function (children) {
	  return {
	    children: children
	  };
	});

	/**
	 * A row sub-component for Grid.
	 */

	function GridRow(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      columns = props.columns,
	      divided = props.divided,
	      only = props.only,
	      reversed = props.reversed,
	      stretched = props.stretched,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);
	  var rest = getUnhandledProps(GridRow, props);
	  var ElementType = getElementType(GridRow, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), children);
	}

	GridRow.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A row can have its columns centered. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A grid row can be colored. */
	  color: propTypes.oneOf(COLORS),

	  /** Represents column count per line in Row. */
	  columns: propTypes.oneOf([].concat(toConsumableArray$1(WIDTHS), ['equal'])),

	  /** A row can have dividers between its columns. */
	  divided: propTypes.bool,

	  /** A row can appear only for a specific device, or screen sizes. */
	  only: multipleProp(VISIBILITY),

	  /** A row can specify that its columns should reverse order at different device sizes. */
	  reversed: multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),

	  /** A row can stretch its contents to take up the entire column height. */
	  stretched: propTypes.bool,

	  /** A row can specify its text alignment. */
	  textAlign: propTypes.oneOf(TEXT_ALIGNMENTS),

	  /** A row can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};

	/**
	 * A grid is used to harmonize negative space in a layout.
	 */

	function Grid(props) {
	  var celled = props.celled,
	      centered = props.centered,
	      children = props.children,
	      className = props.className,
	      columns = props.columns,
	      container = props.container,
	      divided = props.divided,
	      doubling = props.doubling,
	      inverted = props.inverted,
	      padded = props.padded,
	      relaxed = props.relaxed,
	      reversed = props.reversed,
	      stackable = props.stackable,
	      stretched = props.stretched,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);
	  var rest = getUnhandledProps(Grid, props);
	  var ElementType = getElementType(Grid, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), children);
	}

	Grid.Column = GridColumn;
	Grid.Row = GridRow;
	Grid.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A grid can have rows divided into cells. */
	  celled: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['internally'])]),

	  /** A grid can have its columns centered. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Represents column count per row in Grid. */
	  columns: propTypes.oneOf([].concat(toConsumableArray$1(WIDTHS), ['equal'])),

	  /** A grid can be combined with a container to use the available layout and alignment. */
	  container: propTypes.bool,

	  /** A grid can have dividers between its columns. */
	  divided: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['vertically'])]),

	  /** A grid can double its column width on tablet and mobile sizes. */
	  doubling: propTypes.bool,

	  /** A grid's colors can be inverted. */
	  inverted: propTypes.bool,

	  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */
	  padded: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['horizontally', 'vertically'])]),

	  /** A grid can increase its gutters to allow for more negative space. */
	  relaxed: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** A grid can specify that its columns should reverse order at different device sizes. */
	  reversed: multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),

	  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */
	  stackable: propTypes.bool,

	  /** A grid can stretch its contents to take up the entire grid height. */
	  stretched: propTypes.bool,

	  /** A grid can specify its text alignment. */
	  textAlign: propTypes.oneOf(TEXT_ALIGNMENTS),

	  /** A grid can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};

	/**
	 * A message can contain a content.
	 */

	function MessageContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(MessageContent, props);
	  var ElementType = getElementType(MessageContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	MessageContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A message can contain a header.
	 */

	function MessageHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(MessageHeader, props);
	  var ElementType = getElementType(MessageHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	MessageHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	MessageHeader.create = createShorthandFactory(MessageHeader, function (val) {
	  return {
	    content: val
	  };
	});

	/**
	 * A message list can contain an item.
	 */

	function MessageItem(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(MessageItem, props);
	  var ElementType = getElementType(MessageItem, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	MessageItem.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	MessageItem.defaultProps = {
	  as: 'li'
	};
	MessageItem.create = createShorthandFactory(MessageItem, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A message can contain a list of items.
	 */

	function MessageList(props) {
	  var children = props.children,
	      className = props.className,
	      items = props.items;
	  var classes = classNames('list', className);
	  var rest$$1 = getUnhandledProps(MessageList, props);
	  var ElementType = getElementType(MessageList, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? lodash.map(items, MessageItem.create) : children);
	}

	MessageList.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand Message.Items. */
	  items: collectionShorthand
	};
	MessageList.defaultProps = {
	  as: 'ul'
	};
	MessageList.create = createShorthandFactory(MessageList, function (val) {
	  return {
	    items: val
	  };
	});

	/**
	 * A message displays information that explains nearby content.
	 * @see Form
	 */

	var Message =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Message, _Component);

	  function Message() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Message);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Message)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleDismiss", function (e) {
	      var onDismiss = _this.props.onDismiss;
	      if (onDismiss) onDismiss(e, _this.props);
	    });

	    return _this;
	  }

	  createClass(Message, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          attached = _this$props.attached,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          compact$$1 = _this$props.compact,
	          content = _this$props.content,
	          error = _this$props.error,
	          floating = _this$props.floating,
	          header = _this$props.header,
	          hidden = _this$props.hidden,
	          icon = _this$props.icon,
	          info = _this$props.info,
	          list = _this$props.list,
	          negative = _this$props.negative,
	          onDismiss = _this$props.onDismiss,
	          positive = _this$props.positive,
	          size$$1 = _this$props.size,
	          success = _this$props.success,
	          visible = _this$props.visible,
	          warning = _this$props.warning;
	      var classes = classNames('ui', color, size$$1, useKeyOnly(compact$$1, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);
	      var dismissIcon = onDismiss && React__default.createElement(Icon, {
	        name: "close",
	        onClick: this.handleDismiss
	      });
	      var rest$$1 = getUnhandledProps(Message, this.props);
	      var ElementType = getElementType(Message, this.props);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes
	        }), dismissIcon, children);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), dismissIcon, Icon.create(icon, {
	        autoGenerateKey: false
	      }), (!lodash.isNil(header) || !lodash.isNil(content) || !lodash.isNil(list)) && React__default.createElement(MessageContent, null, MessageHeader.create(header, {
	        autoGenerateKey: false
	      }), MessageList.create(list, {
	        autoGenerateKey: false
	      }), createHTMLParagraph(content, {
	        autoGenerateKey: false
	      })));
	    }
	  }]);

	  return Message;
	}(React.Component);

	defineProperty(Message, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A message can be formatted to attach itself to other content. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['bottom', 'top'])]),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A message can be formatted to be different colors. */
	  color: propTypes.oneOf(COLORS),

	  /** A message can only take up the width of its content. */
	  compact: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A message may be formatted to display a negative message. Same as `negative`. */
	  error: propTypes.bool,

	  /** A message can float above content that it is related to. */
	  floating: propTypes.bool,

	  /** Shorthand for MessageHeader. */
	  header: itemShorthand,

	  /** A message can be hidden. */
	  hidden: propTypes.bool,

	  /** A message can contain an icon. */
	  icon: propTypes.oneOfType([itemShorthand, propTypes.bool]),

	  /** A message may be formatted to display information. */
	  info: propTypes.bool,

	  /** Array shorthand items for the MessageList. Mutually exclusive with children. */
	  list: collectionShorthand,

	  /** A message may be formatted to display a negative message. Same as `error`. */
	  negative: propTypes.bool,

	  /**
	   * A message that the user can choose to hide.
	   * Called when the user clicks the "x" icon. This also adds the "x" icon.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onDismiss: propTypes.func,

	  /** A message may be formatted to display a positive message.  Same as `success`. */
	  positive: propTypes.bool,

	  /** A message can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** A message may be formatted to display a positive message.  Same as `positive`. */
	  success: propTypes.bool,

	  /** A message can be set to visible to force itself to be shown. */
	  visible: propTypes.bool,

	  /** A message may be formatted to display warning messages. */
	  warning: propTypes.bool
	});

	defineProperty(Message, "Content", MessageContent);

	defineProperty(Message, "Header", MessageHeader);

	defineProperty(Message, "List", MessageList);

	defineProperty(Message, "Item", MessageItem);

	function TableBody(props) {
	  var children = props.children,
	      className = props.className;
	  var classes = classNames(className);
	  var rest = getUnhandledProps(TableBody, props);
	  var ElementType = getElementType(TableBody, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), children);
	}

	TableBody.defaultProps = {
	  as: 'tbody'
	};
	TableBody.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string
	};

	/**
	 * A table row can have cells.
	 */

	function TableCell(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      collapsing = props.collapsing,
	      content = props.content,
	      disabled = props.disabled,
	      error = props.error,
	      icon = props.icon,
	      negative = props.negative,
	      positive = props.positive,
	      selectable = props.selectable,
	      singleLine = props.singleLine,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      warning = props.warning,
	      width = props.width;
	  var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);
	  var rest$$1 = getUnhandledProps(TableCell, props);
	  var ElementType = getElementType(TableCell, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), Icon.create(icon), content);
	}

	TableCell.defaultProps = {
	  as: 'td'
	};
	TableCell.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A cell can be active or selected by a user. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A cell can be collapsing so that it only uses as much space as required. */
	  collapsing: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A cell can be disabled. */
	  disabled: propTypes.bool,

	  /** A cell may call attention to an error or a negative value. */
	  error: propTypes.bool,

	  /** Add an Icon by name, props object, or pass an <Icon /> */
	  icon: itemShorthand,

	  /** A cell may let a user know whether a value is bad. */
	  negative: propTypes.bool,

	  /** A cell may let a user know whether a value is good. */
	  positive: propTypes.bool,

	  /** A cell can be selectable. */
	  selectable: propTypes.bool,

	  /** A cell can specify that its contents should remain on a single line and not wrap. */
	  singleLine: propTypes.bool,

	  /** A table cell can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified')),

	  /** A table cell can adjust its text alignment. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS),

	  /** A cell may warn a user. */
	  warning: propTypes.bool,

	  /** A table can specify the width of individual columns independently. */
	  width: propTypes.oneOf(WIDTHS)
	};
	TableCell.create = createShorthandFactory(TableCell, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A table can have a header.
	 */

	function TableHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fullWidth = props.fullWidth;
	  var classes = classNames(useKeyOnly(fullWidth, 'full-width'), className);
	  var rest = getUnhandledProps(TableHeader, props);
	  var ElementType = getElementType(TableHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	TableHeader.defaultProps = {
	  as: 'thead'
	};
	TableHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */
	  fullWidth: propTypes.bool
	};

	/**
	 * A table can have a footer.
	 */

	function TableFooter(props) {
	  var as$$1 = props.as;
	  var rest = getUnhandledProps(TableFooter, props);
	  return React__default.createElement(TableHeader, _extends_1({}, rest, {
	    as: as$$1
	  }));
	}

	TableFooter.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as
	};
	TableFooter.defaultProps = {
	  as: 'tfoot'
	};

	/**
	 * A table can have a header cell.
	 */

	function TableHeaderCell(props) {
	  var as$$1 = props.as,
	      className = props.className,
	      sorted = props.sorted;
	  var classes = classNames(useValueAndKey(sorted, 'sorted'), className);
	  var rest = getUnhandledProps(TableHeaderCell, props);
	  return React__default.createElement(TableCell, _extends_1({}, rest, {
	    as: as$$1,
	    className: classes
	  }));
	}

	TableHeaderCell.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A header cell can be sorted in ascending or descending order. */
	  sorted: propTypes.oneOf(['ascending', 'descending'])
	};
	TableHeaderCell.defaultProps = {
	  as: 'th'
	};

	/**
	 * A table can have rows.
	 */

	function TableRow(props) {
	  var active = props.active,
	      cellAs = props.cellAs,
	      cells = props.cells,
	      children = props.children,
	      className = props.className,
	      disabled = props.disabled,
	      error = props.error,
	      negative = props.negative,
	      positive = props.positive,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      warning = props.warning;
	  var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);
	  var rest$$1 = getUnhandledProps(TableRow, props);
	  var ElementType = getElementType(TableRow, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), lodash.map(cells, function (cell) {
	    return TableCell.create(cell, {
	      defaultProps: {
	        as: cellAs
	      }
	    });
	  }));
	}

	TableRow.defaultProps = {
	  as: 'tr',
	  cellAs: 'td'
	};
	TableRow.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A row can be active or selected by a user. */
	  active: propTypes.bool,

	  /** An element type to render as (string or function). */
	  cellAs: as,

	  /** Shorthand array of props for TableCell. */
	  cells: collectionShorthand,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A row can be disabled. */
	  disabled: propTypes.bool,

	  /** A row may call attention to an error or a negative value. */
	  error: propTypes.bool,

	  /** A row may let a user know whether a value is bad. */
	  negative: propTypes.bool,

	  /** A row may let a user know whether a value is good. */
	  positive: propTypes.bool,

	  /** A table row can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified')),

	  /** A table row can adjust its vertical alignment. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS),

	  /** A row may warn a user. */
	  warning: propTypes.bool
	};
	TableRow.create = createShorthandFactory(TableRow, function (cells) {
	  return {
	    cells: cells
	  };
	});

	/**
	 * A table displays a collections of data grouped into rows.
	 */

	function Table(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      celled = props.celled,
	      children = props.children,
	      className = props.className,
	      collapsing = props.collapsing,
	      color = props.color,
	      columns = props.columns,
	      compact$$1 = props.compact,
	      definition = props.definition,
	      fixed = props.fixed,
	      footerRow = props.footerRow,
	      headerRow = props.headerRow,
	      inverted = props.inverted,
	      padded = props.padded,
	      renderBodyRow = props.renderBodyRow,
	      selectable = props.selectable,
	      singleLine = props.singleLine,
	      size$$1 = props.size,
	      sortable = props.sortable,
	      stackable = props.stackable,
	      striped = props.striped,
	      structured = props.structured,
	      tableData = props.tableData,
	      textAlign = props.textAlign,
	      unstackable = props.unstackable,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames('ui', color, size$$1, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact$$1, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);
	  var rest$$1 = getUnhandledProps(Table, props);
	  var ElementType = getElementType(Table, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), headerRow && React__default.createElement(TableHeader, null, TableRow.create(headerRow, {
	    defaultProps: {
	      cellAs: 'th'
	    }
	  })), React__default.createElement(TableBody, null, renderBodyRow && lodash.map(tableData, function (data, index) {
	    return TableRow.create(renderBodyRow(data, index));
	  })), footerRow && React__default.createElement(TableFooter, null, TableRow.create(footerRow)));
	}

	Table.defaultProps = {
	  as: 'table'
	};
	Table.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Attach table to other content */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top', 'bottom'])]),

	  /** A table can reduce its complexity to increase readability. */
	  basic: propTypes.oneOfType([propTypes.oneOf(['very']), propTypes.bool]),

	  /** A table may be divided each row into separate cells. */
	  celled: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A table can be collapsing, taking up only as much space as its rows. */
	  collapsing: propTypes.bool,

	  /** A table can be given a color to distinguish it from other tables. */
	  color: propTypes.oneOf(COLORS),

	  /** A table can specify its column count to divide its content evenly. */
	  columns: propTypes.oneOf(WIDTHS),

	  /** A table may sometimes need to be more compact to make more rows visible at a time. */
	  compact: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** A table may be formatted to emphasize a first column that defines a rows content. */
	  definition: propTypes.bool,

	  /**
	   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content
	   */
	  fixed: propTypes.bool,

	  /** Shorthand for a TableRow to be placed within Table.Footer. */
	  footerRow: itemShorthand,

	  /** Shorthand for a TableRow to be placed within Table.Header. */
	  headerRow: itemShorthand,

	  /** A table's colors can be inverted. */
	  inverted: propTypes.bool,

	  /** A table may sometimes need to be more padded for legibility. */
	  padded: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /**
	   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.
	   *
	   * @param {*} data - An element in the `tableData` array.
	   * @param {number} index - The index of the current element in `tableData`.
	   * @returns {*} Shorthand for a Table.Row.
	   */
	  renderBodyRow: every$1([disallow(['children']), demand(['tableData']), propTypes.func]),

	  /** A table can have its rows appear selectable. */
	  selectable: propTypes.bool,

	  /** A table can specify that its cell contents should remain on a single line and not wrap. */
	  singleLine: propTypes.bool,

	  /** A table can also be small or large. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),

	  /** A table may allow a user to sort contents by clicking on a table header. */
	  sortable: propTypes.bool,

	  /** A table can specify how it stacks table content responsively. */
	  stackable: propTypes.bool,

	  /** A table can stripe alternate rows of content with a darker color to increase contrast. */
	  striped: propTypes.bool,

	  /** A table can be formatted to display complex structured data. */
	  structured: propTypes.bool,

	  /** Data to be passed to the renderBodyRow function. */
	  tableData: every$1([disallow(['children']), demand(['renderBodyRow']), propTypes.array]),

	  /** A table can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified')),

	  /** A table can specify how it stacks table content responsively. */
	  unstackable: propTypes.bool,

	  /** A table can adjust its text alignment. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};
	Table.Body = TableBody;
	Table.Cell = TableCell;
	Table.Footer = TableFooter;
	Table.Header = TableHeader;
	Table.HeaderCell = TableHeaderCell;
	Table.Row = TableRow;

	/**
	 * A container limits content to a maximum width.
	 */

	function Container(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      text = props.text,
	      textAlign = props.textAlign;
	  var classes = classNames('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);
	  var rest = getUnhandledProps(Container, props);
	  var ElementType = getElementType(Container, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Container.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Container has no maximum width. */
	  fluid: propTypes.bool,

	  /** Reduce maximum width to more naturally accommodate text. */
	  text: propTypes.bool,

	  /** Align container text. */
	  textAlign: propTypes.oneOf(TEXT_ALIGNMENTS)
	};

	/**
	 * A divider visually segments content into groups.
	 */

	function Divider(props) {
	  var children = props.children,
	      className = props.className,
	      clearing = props.clearing,
	      content = props.content,
	      fitted = props.fitted,
	      hidden = props.hidden,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      section = props.section,
	      vertical = props.vertical;
	  var classes = classNames('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);
	  var rest = getUnhandledProps(Divider, props);
	  var ElementType = getElementType(Divider, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Divider.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Divider can clear the content above it. */
	  clearing: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Divider can be fitted without any space above or below it. */
	  fitted: propTypes.bool,

	  /** Divider can divide content without creating a dividing line. */
	  hidden: propTypes.bool,

	  /** Divider can segment content horizontally. */
	  horizontal: propTypes.bool,

	  /** Divider can have its colours inverted. */
	  inverted: propTypes.bool,

	  /** Divider can provide greater margins to divide sections of content. */
	  section: propTypes.bool,

	  /** Divider can segment content vertically. */
	  vertical: propTypes.bool
	};

	/**
	 * Headers may contain subheaders.
	 */

	function HeaderSubheader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('sub header', className);
	  var rest = getUnhandledProps(HeaderSubheader, props);
	  var ElementType = getElementType(HeaderSubheader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	HeaderSubheader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	HeaderSubheader.create = createShorthandFactory(HeaderSubheader, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * Header content wraps the main content when there is an adjacent Icon or Image.
	 */

	function HeaderContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(HeaderContent, props);
	  var ElementType = getElementType(HeaderContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	HeaderContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A header provides a short summary of content
	 */

	function Header(props) {
	  var attached = props.attached,
	      block = props.block,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      disabled = props.disabled,
	      dividing = props.dividing,
	      floated = props.floated,
	      icon = props.icon,
	      image = props.image,
	      inverted = props.inverted,
	      size$$1 = props.size,
	      sub = props.sub,
	      subheader = props.subheader,
	      textAlign = props.textAlign;
	  var classes = classNames('ui', color, size$$1, useKeyOnly(block, 'block'), useKeyOnly(disabled, 'disabled'), useKeyOnly(dividing, 'dividing'), useValueAndKey(floated, 'floated'), useKeyOnly(icon === true, 'icon'), useKeyOnly(image === true, 'image'), useKeyOnly(inverted, 'inverted'), useKeyOnly(sub, 'sub'), useKeyOrValueAndKey(attached, 'attached'), useTextAlignProp(textAlign), 'header', className);
	  var rest$$1 = getUnhandledProps(Header, props);
	  var ElementType = getElementType(Header, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  var iconElement = Icon.create(icon, {
	    autoGenerateKey: false
	  });
	  var imageElement = Image.create(image, {
	    autoGenerateKey: false
	  });
	  var subheaderElement = HeaderSubheader.create(subheader, {
	    autoGenerateKey: false
	  });

	  if (iconElement || imageElement) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), iconElement || imageElement, (content || subheaderElement) && React__default.createElement(HeaderContent, null, content, subheaderElement));
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), content, subheaderElement);
	}

	Header.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Attach header  to other content, like a segment. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top', 'bottom'])]),

	  /** Format header to appear inside a content block. */
	  block: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Color of the header. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Show that the header is inactive. */
	  disabled: propTypes.bool,

	  /** Divide header from the content below it. */
	  dividing: propTypes.bool,

	  /** Header can sit to the left or right of other content. */
	  floated: propTypes.oneOf(FLOATS),

	  /** Add an icon by icon name or pass an Icon. */
	  icon: every$1([disallow(['image']), propTypes.oneOfType([propTypes.bool, itemShorthand])]),

	  /** Add an image by img src or pass an Image. */
	  image: every$1([disallow(['icon']), propTypes.oneOfType([propTypes.bool, itemShorthand])]),

	  /** Inverts the color of the header for dark backgrounds. */
	  inverted: propTypes.bool,

	  /** Content headings are sized with em and are based on the font-size of their container. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'big', 'massive', 'mini')),

	  /** Headers may be formatted to label smaller or de-emphasized content. */
	  sub: propTypes.bool,

	  /** Shorthand for Header.Subheader. */
	  subheader: itemShorthand,

	  /** Align header content. */
	  textAlign: propTypes.oneOf(TEXT_ALIGNMENTS)
	};
	Header.Content = HeaderContent;
	Header.Subheader = HeaderSubheader;

	/**
	 * A list item can contain a description.
	 */

	function ListDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames(className, 'description');
	  var rest = getUnhandledProps(ListDescription, props);
	  var ElementType = getElementType(ListDescription, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ListDescription.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ListDescription.create = createShorthandFactory(ListDescription, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A list item can contain a header.
	 */

	function ListHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(ListHeader, props);
	  var ElementType = getElementType(ListHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ListHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ListHeader.create = createShorthandFactory(ListHeader, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A list item can contain a content.
	 */

	function ListContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      floated = props.floated,
	      header = props.header,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames(useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), 'content', className);
	  var rest = getUnhandledProps(ListContent, props);
	  var ElementType = getElementType(ListContent, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), ListHeader.create(header), ListDescription.create(description), content);
	}

	ListContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for ListDescription. */
	  description: itemShorthand,

	  /** An list content can be floated left or right. */
	  floated: propTypes.oneOf(FLOATS),

	  /** Shorthand for ListHeader. */
	  header: itemShorthand,

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};
	ListContent.create = createShorthandFactory(ListContent, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A list item can contain an icon.
	 */

	function ListIcon(props) {
	  var className = props.className,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames(useVerticalAlignProp(verticalAlign), className);
	  var rest = getUnhandledProps(ListIcon, props);
	  return React__default.createElement(Icon, _extends_1({}, rest, {
	    className: classes
	  }));
	}

	ListIcon.propTypes = {
	  /** Additional classes. */
	  className: propTypes.string,

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};
	ListIcon.create = createShorthandFactory(ListIcon, function (name) {
	  return {
	    name: name
	  };
	});

	/**
	 * A list item can contain a set of items.
	 */

	var ListItem =
	/*#__PURE__*/
	function (_Component) {
	  inherits(ListItem, _Component);

	  function ListItem() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, ListItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(ListItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          description = _this$props.description,
	          disabled = _this$props.disabled,
	          header = _this$props.header,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          value = _this$props.value;
	      var ElementType = getElementType(ListItem, this.props);
	      var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(ElementType !== 'li', 'item'), className);
	      var rest$$1 = getUnhandledProps(ListItem, this.props);
	      var valueProp = ElementType === 'li' ? {
	        value: value
	      } : {
	        'data-value': value
	      };

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest$$1), children);
	      }

	      var iconElement = ListIcon.create(icon, {
	        autoGenerateKey: false
	      });
	      var imageElement = Image.create(image, {
	        autoGenerateKey: false
	      }); // See description of `content` prop for explanation about why this is necessary.

	      if (!React.isValidElement(content) && lodash.isPlainObject(content)) {
	        return React__default.createElement(ElementType, _extends_1({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest$$1), iconElement || imageElement, ListContent.create(content, {
	          autoGenerateKey: false,
	          defaultProps: {
	            header: header,
	            description: description
	          }
	        }));
	      }

	      var headerElement = ListHeader.create(header, {
	        autoGenerateKey: false
	      });
	      var descriptionElement = ListDescription.create(description, {
	        autoGenerateKey: false
	      });

	      if (iconElement || imageElement) {
	        return React__default.createElement(ElementType, _extends_1({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest$$1), iconElement || imageElement, (content || headerElement || descriptionElement) && React__default.createElement(ListContent, null, headerElement, descriptionElement, content));
	      }

	      return React__default.createElement(ElementType, _extends_1({}, valueProp, {
	        role: "listitem",
	        className: classes,
	        onClick: this.handleClick
	      }, rest$$1), headerElement, descriptionElement, content);
	    }
	  }]);

	  return ListItem;
	}(React.Component);

	defineProperty(ListItem, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A list item can active. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /**
	   * Shorthand for primary content.
	   *
	   * Heads up!
	   *
	   * This is handled slightly differently than the typical `content` prop since
	   * the wrapping ListContent is not used when there's no icon or image.
	   *
	   * If you pass content as:
	   * - an element/literal, it's treated as the sibling node to
	   * header/description (whether wrapped in Item.Content or not).
	   * - a props object, it forces the presence of Item.Content and passes those
	   * props to it. If you pass a content prop within that props object, it
	   * will be treated as the sibling node to header/description.
	   */
	  content: itemShorthand,

	  /** Shorthand for ListDescription. */
	  description: itemShorthand,

	  /** A list item can disabled. */
	  disabled: propTypes.bool,

	  /** Shorthand for ListHeader. */
	  header: itemShorthand,

	  /** Shorthand for ListIcon. */
	  icon: every$1([disallow(['image']), itemShorthand]),

	  /** Shorthand for Image. */
	  image: every$1([disallow(['icon']), itemShorthand]),

	  /** A ListItem can be clicked */
	  onClick: propTypes.func,

	  /** A value for an ordered list. */
	  value: propTypes.string
	});

	ListItem.create = createShorthandFactory(ListItem, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A list can contain a sub list.
	 */

	function ListList(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var rest = getUnhandledProps(ListList, props);
	  var ElementType = getElementType(ListList, props);
	  var classes = classNames(useKeyOnly(ElementType !== 'ul' && ElementType !== 'ol', 'list'), className);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ListList.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A list groups related content.
	 */

	var List =
	/*#__PURE__*/
	function (_Component) {
	  inherits(List, _Component);

	  function List() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, List);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleItemOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, itemProps) {
	          lodash.invoke(predefinedProps, 'onClick', e, itemProps);

	          lodash.invoke(_this.props, 'onItemClick', e, itemProps);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(List, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          animated = _this$props.animated,
	          bulleted = _this$props.bulleted,
	          celled = _this$props.celled,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          divided = _this$props.divided,
	          floated = _this$props.floated,
	          horizontal = _this$props.horizontal,
	          inverted = _this$props.inverted,
	          items = _this$props.items,
	          link = _this$props.link,
	          ordered = _this$props.ordered,
	          relaxed = _this$props.relaxed,
	          selection = _this$props.selection,
	          size$$1 = _this$props.size,
	          verticalAlign = _this$props.verticalAlign;
	      var classes = classNames('ui', size$$1, useKeyOnly(animated, 'animated'), useKeyOnly(bulleted, 'bulleted'), useKeyOnly(celled, 'celled'), useKeyOnly(divided, 'divided'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(link, 'link'), useKeyOnly(ordered, 'ordered'), useKeyOnly(selection, 'selection'), useKeyOrValueAndKey(relaxed, 'relaxed'), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), 'list', className);
	      var rest$$1 = getUnhandledProps(List, this.props);
	      var ElementType = getElementType(List, this.props);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({
	          role: "list",
	          className: classes
	        }, rest$$1), children);
	      }

	      if (!isNil$1(content)) {
	        return React__default.createElement(ElementType, _extends_1({
	          role: "list",
	          className: classes
	        }, rest$$1), content);
	      }

	      return React__default.createElement(ElementType, _extends_1({
	        role: "list",
	        className: classes
	      }, rest$$1), lodash.map(items, function (item) {
	        return ListItem.create(item, {
	          overrideProps: _this2.handleItemOverrides
	        });
	      }));
	    }
	  }]);

	  return List;
	}(React.Component);

	defineProperty(List, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A list can animate to set the current item apart from the list. */
	  animated: propTypes.bool,

	  /** A list can mark items with a bullet. */
	  bulleted: propTypes.bool,

	  /** A list can divide its items into cells. */
	  celled: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A list can show divisions between content. */
	  divided: propTypes.bool,

	  /** An list can be floated left or right. */
	  floated: propTypes.oneOf(FLOATS),

	  /** A list can be formatted to have items appear horizontally. */
	  horizontal: propTypes.bool,

	  /** A list can be inverted to appear on a dark background. */
	  inverted: propTypes.bool,

	  /** Shorthand array of props for ListItem. */
	  items: collectionShorthand,

	  /** A list can be specially formatted for navigation links. */
	  link: propTypes.bool,

	  /**
	   * onClick handler for ListItem. Mutually exclusive with children.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onItemClick: every$1([disallow(['children']), propTypes.func]),

	  /** A list can be ordered numerically. */
	  ordered: propTypes.bool,

	  /** A list can relax its padding to provide more negative space. */
	  relaxed: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** A selection list formats list items as possible choices. */
	  selection: propTypes.bool,

	  /** A list can vary in size. */
	  size: propTypes.oneOf(SIZES),

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	});

	defineProperty(List, "Content", ListContent);

	defineProperty(List, "Description", ListDescription);

	defineProperty(List, "Header", ListHeader);

	defineProperty(List, "Icon", ListIcon);

	defineProperty(List, "Item", ListItem);

	defineProperty(List, "List", ListList);

	/**
	 * A loader alerts a user to wait for an activity to complete.
	 * @see Dimmer
	 */

	function Loader(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      disabled = props.disabled,
	      indeterminate = props.indeterminate,
	      inline = props.inline,
	      inverted = props.inverted,
	      size = props.size;
	  var classes = classNames('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);
	  var rest = getUnhandledProps(Loader, props);
	  var ElementType = getElementType(Loader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Loader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A loader can be active or visible. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A loader can be disabled or hidden. */
	  disabled: propTypes.bool,

	  /** A loader can show it's unsure of how long a task will take. */
	  indeterminate: propTypes.bool,

	  /** Loaders can appear inline with content. */
	  inline: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['centered'])]),

	  /** Loaders can have their colors inverted. */
	  inverted: propTypes.bool,

	  /** Loaders can have different sizes. */
	  size: propTypes.oneOf(SIZES)
	};

	/**
	 * A placeholder can contain a header.
	 */

	function PlaceholderHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      image = props.image;
	  var classes = classNames(useKeyOnly(image, 'image'), 'header', className);
	  var rest = getUnhandledProps(PlaceholderHeader, props);
	  var ElementType = getElementType(PlaceholderHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	PlaceholderHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A placeholder can contain an image. */
	  image: propTypes.bool
	};

	/**
	 * A placeholder can contain an image.
	 */

	function PlaceholderImage(props) {
	  var className = props.className,
	      square = props.square,
	      rectangular = props.rectangular;
	  var classes = classNames(useKeyOnly(square, 'square'), useKeyOnly(rectangular, 'rectangular'), 'image', className);
	  var rest = getUnhandledProps(PlaceholderImage, props);
	  var ElementType = getElementType(PlaceholderImage, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }));
	}

	PlaceholderImage.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** An image can modify size correctly with responsive styles. */
	  square: every$1([disallow(['rectangular']), propTypes.bool]),

	  /** An image can modify size correctly with responsive styles. */
	  rectangular: every$1([disallow(['square']), propTypes.bool])
	};

	/**
	 * A placeholder can contain have lines of text.
	 */

	function PlaceholderLine(props) {
	  var className = props.className,
	      length = props.length;
	  var classes = classNames('line', length, className);
	  var rest = getUnhandledProps(PlaceholderLine, props);
	  var ElementType = getElementType(PlaceholderLine, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }));
	}

	PlaceholderLine.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A line can specify how long its contents should appear. */
	  length: propTypes.oneOf(['full', 'very long', 'long', 'medium', 'short', 'very short'])
	};

	/**
	 * A placeholder can contain a paragraph.
	 */

	function PlaceholderParagraph(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('paragraph', className);
	  var rest = getUnhandledProps(PlaceholderParagraph, props);
	  var ElementType = getElementType(PlaceholderParagraph, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	PlaceholderParagraph.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A placeholder is used to reserve splace for content that soon will appear in a layout.
	 */

	function Placeholder(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      inverted = props.inverted;
	  var classes = classNames('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), 'placeholder', className);
	  var rest = getUnhandledProps(Placeholder, props);
	  var ElementType = getElementType(Placeholder, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Placeholder.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A fluid placeholder takes up the width of its container. */
	  fluid: propTypes.bool,

	  /** A placeholder can have their colors inverted. */
	  inverted: propTypes.bool
	};
	Placeholder.Header = PlaceholderHeader;
	Placeholder.Image = PlaceholderImage;
	Placeholder.Line = PlaceholderLine;
	Placeholder.Paragraph = PlaceholderParagraph;

	/**
	 * A rail is used to show accompanying content outside the boundaries of the main view of a site.
	 */

	function Rail(props) {
	  var attached = props.attached,
	      children = props.children,
	      className = props.className,
	      close = props.close,
	      content = props.content,
	      dividing = props.dividing,
	      internal = props.internal,
	      position = props.position,
	      size$$1 = props.size;
	  var classes = classNames('ui', position, size$$1, useKeyOnly(attached, 'attached'), useKeyOnly(dividing, 'dividing'), useKeyOnly(internal, 'internal'), useKeyOrValueAndKey(close, 'close'), 'rail', className);
	  var rest$$1 = getUnhandledProps(Rail, props);
	  var ElementType = getElementType(Rail, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Rail.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A rail can appear attached to the main viewport. */
	  attached: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A rail can appear closer to the main viewport. */
	  close: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A rail can create a division between itself and a container. */
	  dividing: propTypes.bool,

	  /** A rail can attach itself to the inside of a container. */
	  internal: propTypes.bool,

	  /** A rail can be presented on the left or right side of a container. */
	  position: propTypes.oneOf(FLOATS).isRequired,

	  /** A rail can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium'))
	};

	/**
	 * A content sub-component for the Reveal.
	 */

	function RevealContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      hidden = props.hidden,
	      visible = props.visible;
	  var classes = classNames('ui', useKeyOnly(hidden, 'hidden'), useKeyOnly(visible, 'visible'), 'content', className);
	  var rest = getUnhandledProps(RevealContent, props);
	  var ElementType = getElementType(RevealContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	RevealContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A reveal may contain content that is visible before interaction. */
	  hidden: propTypes.bool,

	  /** A reveal may contain content that is hidden before user interaction. */
	  visible: propTypes.bool
	};

	/**
	 * A reveal displays additional content in place of previous content when activated.
	 */

	function Reveal(props) {
	  var active = props.active,
	      animated = props.animated,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      disabled = props.disabled,
	      instant = props.instant;
	  var classes = classNames('ui', animated, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(instant, 'instant'), 'reveal', className);
	  var rest = getUnhandledProps(Reveal, props);
	  var ElementType = getElementType(Reveal, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Reveal.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An active reveal displays its hidden content. */
	  active: propTypes.bool,

	  /** An animation name that will be applied to Reveal. */
	  animated: propTypes.oneOf(['fade', 'small fade', 'move', 'move right', 'move up', 'move down', 'rotate', 'rotate left']),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A disabled reveal will not animate when hovered. */
	  disabled: propTypes.bool,

	  /** An element can show its content without delay. */
	  instant: propTypes.bool
	};
	Reveal.Content = RevealContent;

	/**
	 * A group of segments can be formatted to appear together.
	 */

	function SegmentGroup(props) {
	  var children = props.children,
	      className = props.className,
	      compact$$1 = props.compact,
	      content = props.content,
	      horizontal = props.horizontal,
	      piled = props.piled,
	      raised = props.raised,
	      size$$1 = props.size,
	      stacked = props.stacked;
	  var classes = classNames('ui', size$$1, useKeyOnly(compact$$1, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);
	  var rest$$1 = getUnhandledProps(SegmentGroup, props);
	  var ElementType = getElementType(SegmentGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	SegmentGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A segment may take up only as much space as is necessary. */
	  compact: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Formats content to be aligned horizontally. */
	  horizontal: propTypes.bool,

	  /** Formatted to look like a pile of pages. */
	  piled: propTypes.bool,

	  /** A segment group may be formatted to raise above the page. */
	  raised: propTypes.bool,

	  /** A segment group can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** Formatted to show it contains multiple pages. */
	  stacked: propTypes.bool
	};

	/**
	 * A placeholder segment can be inline.
	 */

	function SegmentInline(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('inline', className);
	  var rest = getUnhandledProps(SegmentInline, props);
	  var ElementType = getElementType(SegmentInline, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	SegmentInline.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A segment is used to create a grouping of related content.
	 */

	function Segment(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      children = props.children,
	      circular = props.circular,
	      className = props.className,
	      clearing = props.clearing,
	      color = props.color,
	      compact$$1 = props.compact,
	      content = props.content,
	      disabled = props.disabled,
	      floated = props.floated,
	      inverted = props.inverted,
	      loading = props.loading,
	      placeholder = props.placeholder,
	      padded = props.padded,
	      piled = props.piled,
	      raised = props.raised,
	      secondary = props.secondary,
	      size$$1 = props.size,
	      stacked = props.stacked,
	      tertiary = props.tertiary,
	      textAlign = props.textAlign,
	      vertical = props.vertical;
	  var classes = classNames('ui', color, size$$1, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact$$1, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);
	  var rest$$1 = getUnhandledProps(Segment, props);
	  var ElementType = getElementType(Segment, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Segment.Group = SegmentGroup;
	Segment.Inline = SegmentInline;
	Segment.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Attach segment to other content, like a header. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top', 'bottom'])]),

	  /** A basic segment has no special formatting. */
	  basic: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** A segment can be circular. */
	  circular: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A segment can clear floated content. */
	  clearing: propTypes.bool,

	  /** Segment can be colored. */
	  color: propTypes.oneOf(COLORS),

	  /** A segment may take up only as much space as is necessary. */
	  compact: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A segment may show its content is disabled. */
	  disabled: propTypes.bool,

	  /** Segment content can be floated to the left or right. */
	  floated: propTypes.oneOf(FLOATS),

	  /** A segment can have its colors inverted for contrast. */
	  inverted: propTypes.bool,

	  /** A segment may show its content is being loaded. */
	  loading: propTypes.bool,

	  /** A segment can increase its padding. */
	  padded: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** A segment can be used to reserve space for conditionally displayed content. */
	  placeholder: propTypes.bool,

	  /** Formatted to look like a pile of pages. */
	  piled: propTypes.bool,

	  /** A segment may be formatted to raise above the page. */
	  raised: propTypes.bool,

	  /** A segment can be formatted to appear less noticeable. */
	  secondary: propTypes.bool,

	  /** A segment can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** Formatted to show it contains multiple pages. */
	  stacked: propTypes.bool,

	  /** A segment can be formatted to appear even less noticeable. */
	  tertiary: propTypes.bool,

	  /** Formats content to be aligned as part of a vertical group. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified')),

	  /** Formats content to be aligned vertically. */
	  vertical: propTypes.bool
	};

	function StepDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('description', className);
	  var rest = getUnhandledProps(StepDescription, props);
	  var ElementType = getElementType(StepDescription, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	StepDescription.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	StepDescription.create = createShorthandFactory(StepDescription, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A step can contain a title.
	 */

	function StepTitle(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('title', className);
	  var rest = getUnhandledProps(StepTitle, props);
	  var ElementType = getElementType(StepTitle, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	StepTitle.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	StepTitle.create = createShorthandFactory(StepTitle, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A step can contain a content.
	 */

	function StepContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      title = props.title;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(StepContent, props);
	  var ElementType = getElementType(StepContent, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), StepTitle.create(title, {
	    autoGenerateKey: false
	  }), StepDescription.create(description, {
	    autoGenerateKey: false
	  }));
	}

	StepContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for StepDescription. */
	  description: itemShorthand,

	  /** Shorthand for StepTitle. */
	  title: itemShorthand
	};
	StepContent.create = createShorthandFactory(StepContent, function (content) {
	  return {
	    content: content
	  };
	});

	var numberMap = lodash.pickBy(numberToWordMap, function (val, key) {
	  return key <= 8;
	});
	/**
	 * A set of steps.
	 */


	function StepGroup(props) {
	  var attached = props.attached,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      items = props.items,
	      ordered = props.ordered,
	      size$$1 = props.size,
	      stackable = props.stackable,
	      unstackable = props.unstackable,
	      vertical = props.vertical,
	      widths = props.widths;
	  var classes = classNames('ui', size$$1, useKeyOnly(fluid, 'fluid'), useKeyOnly(ordered, 'ordered'), useKeyOnly(unstackable, 'unstackable'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useValueAndKey(stackable, 'stackable'), useWidthProp(widths), 'steps', className);
	  var rest$$1 = getUnhandledProps(StepGroup, props);
	  var ElementType = getElementType(StepGroup, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), lodash.map(items, function (item) {
	    return Step.create(item);
	  }));
	}

	StepGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Steps can be attached to other elements. */
	  attached: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['top', 'bottom'])]),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A fluid step takes up the width of its container. */
	  fluid: propTypes.bool,

	  /** Shorthand array of props for Step. */
	  items: collectionShorthand,

	  /** A step can show a ordered sequence of steps. */
	  ordered: propTypes.bool,

	  /** Steps can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** A step can stack vertically only on smaller screens. */
	  stackable: propTypes.oneOf(['tablet']),

	  /** A step can prevent itself from stacking on mobile. */
	  unstackable: propTypes.bool,

	  /** A step can be displayed stacked vertically. */
	  vertical: propTypes.bool,

	  /** Steps can be divided evenly inside their parent. */
	  widths: propTypes.oneOf([].concat(toConsumableArray$1(lodash.keys(numberMap)), toConsumableArray$1(lodash.keys(numberMap).map(Number)), toConsumableArray$1(lodash.values(numberMap))))
	};

	/**
	 * A step shows the completion status of an activity in a series of activities.
	 */

	var Step =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Step, _Component);

	  function Step() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Step);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Step)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "computeElementType", function () {
	      var onClick = _this.props.onClick;
	      if (onClick) return 'a';
	    });

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(Step, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          completed = _this$props.completed,
	          content = _this$props.content,
	          description = _this$props.description,
	          disabled = _this$props.disabled,
	          href = _this$props.href,
	          icon = _this$props.icon,
	          link = _this$props.link,
	          title = _this$props.title;
	      var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(completed, 'completed'), useKeyOnly(disabled, 'disabled'), useKeyOnly(link, 'link'), 'step', className);
	      var rest$$1 = getUnhandledProps(Step, this.props);
	      var ElementType = getElementType(Step, this.props, this.computeElementType);

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), children);
	      }

	      if (!isNil$1(content)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), content);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), Icon.create(icon, {
	        autoGenerateKey: false
	      }), StepContent.create({
	        description: description,
	        title: title
	      }, {
	        autoGenerateKey: false
	      }));
	    }
	  }]);

	  return Step;
	}(React.Component);

	defineProperty(Step, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A step can be highlighted as active. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A step can show that a user has completed it. */
	  completed: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for StepDescription. */
	  description: itemShorthand,

	  /** Show that the Loader is inactive. */
	  disabled: propTypes.bool,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: propTypes.string,

	  /** Shorthand for Icon. */
	  icon: itemShorthand,

	  /** A step can be link. */
	  link: propTypes.bool,

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /** A step can show a ordered sequence of steps. Passed from StepGroup. */
	  ordered: propTypes.bool,

	  /** Shorthand for StepTitle. */
	  title: itemShorthand
	});

	defineProperty(Step, "Content", StepContent);

	defineProperty(Step, "Description", StepDescription);

	defineProperty(Step, "Group", StepGroup);

	defineProperty(Step, "Title", StepTitle);

	Step.create = createShorthandFactory(Step, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A title sub-component for Accordion component.
	 */

	var AccordionTitle =
	/*#__PURE__*/
	function (_Component) {
	  inherits(AccordionTitle, _Component);

	  function AccordionTitle() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, AccordionTitle);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      return lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(AccordionTitle, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          icon = _this$props.icon;
	      var classes = classNames(useKeyOnly(active, 'active'), 'title', className);
	      var rest$$1 = getUnhandledProps(AccordionTitle, this.props);
	      var ElementType = getElementType(AccordionTitle, this.props);
	      var iconValue = lodash.isNil(icon) ? 'dropdown' : icon;

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onClick: this.handleClick
	      }), Icon.create(iconValue, {
	        autoGenerateKey: false
	      }), content);
	    }
	  }]);

	  return AccordionTitle;
	}(React.Component);

	defineProperty(AccordionTitle, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Whether or not the title is in the open state. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for Icon. */
	  icon: itemShorthand,

	  /** AccordionTitle index inside Accordion. */
	  index: propTypes.oneOfType([propTypes.string, propTypes.number]),

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func
	});
	AccordionTitle.create = createShorthandFactory(AccordionTitle, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A content sub-component for Accordion component.
	 */

	function AccordionContent(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('content', useKeyOnly(active, 'active'), className);
	  var rest = getUnhandledProps(AccordionContent, props);
	  var ElementType = getElementType(AccordionContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	AccordionContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Whether or not the content is visible. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	AccordionContent.create = createShorthandFactory(AccordionContent, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A panel sub-component for Accordion component.
	 */

	var AccordionPanel =
	/*#__PURE__*/
	function (_Component) {
	  inherits(AccordionPanel, _Component);

	  function AccordionPanel() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, AccordionPanel);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(AccordionPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleTitleOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, titleProps) {
	          lodash.invoke(predefinedProps, 'onClick', e, titleProps);

	          lodash.invoke(_this.props, 'onTitleClick', e, titleProps);
	        }
	      };
	    });

	    return _this;
	  }

	  createClass(AccordionPanel, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          content = _this$props.content,
	          index = _this$props.index,
	          title = _this$props.title;
	      return React__default.createElement(React.Fragment, null, AccordionTitle.create(title, {
	        autoGenerateKey: false,
	        defaultProps: {
	          active: active,
	          index: index
	        },
	        overrideProps: this.handleTitleOverrides
	      }), AccordionContent.create(content, {
	        autoGenerateKey: false,
	        defaultProps: {
	          active: active
	        }
	      }));
	    }
	  }]);

	  return AccordionPanel;
	}(React.Component);

	defineProperty(AccordionPanel, "propTypes", {
	  /** Whether or not the title is in the open state. */
	  active: propTypes.bool,

	  /** A shorthand for Accordion.Content. */
	  content: itemShorthand,

	  /** A panel index. */
	  index: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Called when a panel title is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onTitleClick: propTypes.func,

	  /** A shorthand for Accordion.Title. */
	  title: itemShorthand
	});

	AccordionPanel.create = createShorthandFactory(AccordionPanel, null);

	/**
	 * An Accordion can contain sub-accordions.
	 */


	var AccordionAccordion =
	/*#__PURE__*/
	function (_Component) {
	  inherits(AccordionAccordion, _Component);

	  function AccordionAccordion() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, AccordionAccordion);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(AccordionAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "computeNewIndex", function (index) {
	      var exclusive = _this.props.exclusive;
	      var activeIndex = _this.state.activeIndex;
	      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it

	      return lodash.includes(activeIndex, index) ? lodash.without(activeIndex, index) : [].concat(toConsumableArray$1(activeIndex), [index]);
	    });

	    defineProperty(assertThisInitialized(_this), "handleTitleClick", function (e, titleProps) {
	      var index = titleProps.index;

	      _this.trySetState({
	        activeIndex: _this.computeNewIndex(index)
	      });

	      lodash.invoke(_this.props, 'onTitleClick', e, titleProps);
	    });

	    defineProperty(assertThisInitialized(_this), "isIndexActive", function (index) {
	      var exclusive = _this.props.exclusive;
	      var activeIndex = _this.state.activeIndex;
	      return exclusive ? activeIndex === index : lodash.includes(activeIndex, index);
	    });

	    return _this;
	  }

	  createClass(AccordionAccordion, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState(_ref) {
	      var exclusive = _ref.exclusive;
	      return {
	        activeIndex: exclusive ? -1 : []
	      };
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          className = _this$props.className,
	          children = _this$props.children,
	          panels = _this$props.panels;
	      var classes = classNames('accordion', className);
	      var rest$$1 = getUnhandledProps(AccordionAccordion, this.props);
	      var ElementType = getElementType(AccordionAccordion, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), isNil$1(children) ? lodash.map(panels, function (panel, index) {
	        return AccordionPanel.create(panel, {
	          defaultProps: {
	            active: _this2.isIndexActive(index),
	            index: index,
	            onTitleClick: _this2.handleTitleClick
	          }
	        });
	      }) : children);
	    }
	  }]);

	  return AccordionAccordion;
	}(AutoControlledComponent);

	defineProperty(AccordionAccordion, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Index of the currently active panel. */
	  activeIndex: every$1([disallow(['children']), propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number])]),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Initial activeIndex value. */
	  defaultActiveIndex: every$1([disallow(['children']), propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number])]),

	  /** Only allow one panel open at a time. */
	  exclusive: propTypes.bool,

	  /**
	   * Called when a panel title is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onTitleClick: every$1([disallow(['children']), propTypes.func]),

	  /** Shorthand array of props for Accordion. */
	  panels: every$1([disallow(['children']), propTypes.arrayOf(propTypes.shape({
	    content: itemShorthand,
	    title: itemShorthand
	  }))])
	});

	defineProperty(AccordionAccordion, "defaultProps", {
	  exclusive: true
	});

	defineProperty(AccordionAccordion, "autoControlledProps", ['activeIndex']);
	AccordionAccordion.create = createShorthandFactory(AccordionAccordion, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * An accordion allows users to toggle the display of sections of content.
	 */

	function Accordion(props) {
	  var className = props.className,
	      fluid = props.fluid,
	      inverted = props.inverted,
	      styled = props.styled;
	  var classes = classNames('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(styled, 'styled'), className);
	  var rest = getUnhandledProps(Accordion, props);
	  return React__default.createElement(AccordionAccordion, _extends_1({}, rest, {
	    className: classes
	  }));
	}

	Accordion.propTypes = {
	  /** Additional classes. */
	  className: propTypes.string,

	  /** Format to take up the width of its container. */
	  fluid: propTypes.bool,

	  /** Format for dark backgrounds. */
	  inverted: propTypes.bool,

	  /** Adds some basic styling to accordion panels. */
	  styled: propTypes.bool
	};
	Accordion.Accordion = AccordionAccordion;
	Accordion.Content = AccordionContent;
	Accordion.Panel = AccordionPanel;
	Accordion.Title = AccordionTitle;

	/**
	 * An embed displays content from other websites like YouTube videos or Google Maps.
	 */

	var Embed =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Embed, _Component);

	  function Embed() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Embed);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Embed)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      var active = _this.state.active;
	      if (onClick) onClick(e, objectSpread({}, _this.props, {
	        active: true
	      }));
	      if (!active) _this.trySetState({
	        active: true
	      });
	    });

	    return _this;
	  }

	  createClass(Embed, [{
	    key: "getSrc",
	    value: function getSrc() {
	      var _this$props = this.props,
	          _this$props$autoplay = _this$props.autoplay,
	          autoplay = _this$props$autoplay === void 0 ? true : _this$props$autoplay,
	          _this$props$brandedUI = _this$props.brandedUI,
	          brandedUI = _this$props$brandedUI === void 0 ? false : _this$props$brandedUI,
	          _this$props$color = _this$props.color,
	          color = _this$props$color === void 0 ? '#444444' : _this$props$color,
	          _this$props$hd = _this$props.hd,
	          hd = _this$props$hd === void 0 ? true : _this$props$hd,
	          id = _this$props.id,
	          source = _this$props.source,
	          url = _this$props.url;

	      if (source === 'youtube') {
	        return ["//www.youtube.com/embed/".concat(id), '?autohide=true', "&amp;autoplay=".concat(autoplay), "&amp;color=".concat(encodeURIComponent(color)), "&amp;hq=".concat(hd), '&amp;jsapi=false', "&amp;modestbranding=".concat(brandedUI), "&amp;rel=".concat(brandedUI ? 0 : 1)].join('');
	      }

	      if (source === 'vimeo') {
	        return ["//player.vimeo.com/video/".concat(id), '?api=false', "&amp;autoplay=".concat(autoplay), '&amp;byline=false', "&amp;color=".concat(encodeURIComponent(color)), '&amp;portrait=false', '&amp;title=false'].join('');
	      }

	      return url;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          aspectRatio = _this$props2.aspectRatio,
	          className = _this$props2.className,
	          icon = _this$props2.icon,
	          placeholder = _this$props2.placeholder;
	      var active = this.state.active;
	      var classes = classNames('ui', aspectRatio, useKeyOnly(active, 'active'), 'embed', className);
	      var rest = getUnhandledProps(Embed, this.props);
	      var ElementType = getElementType(Embed, this.props);
	      var iconShorthand = icon !== undefined ? icon : 'video play';
	      return React__default.createElement(ElementType, _extends_1({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), Icon.create(iconShorthand, {
	        autoGenerateKey: false
	      }), placeholder && React__default.createElement("img", {
	        className: "placeholder",
	        src: placeholder
	      }), this.renderEmbed());
	    }
	  }, {
	    key: "renderEmbed",
	    value: function renderEmbed() {
	      var _this$props3 = this.props,
	          children = _this$props3.children,
	          content = _this$props3.content,
	          iframe = _this$props3.iframe,
	          source = _this$props3.source;
	      var active = this.state.active;
	      if (!active) return null;
	      if (!isNil$1(children)) return React__default.createElement("div", {
	        className: "embed"
	      }, children);
	      if (!isNil$1(content)) return React__default.createElement("div", {
	        className: "embed"
	      }, content);
	      return React__default.createElement("div", {
	        className: "embed"
	      }, createHTMLIframe(isNil$1(iframe) ? this.getSrc() : iframe, {
	        defaultProps: {
	          allowFullScreen: false,
	          frameBorder: 0,
	          height: '100%',
	          scrolling: 'no',
	          src: this.getSrc(),
	          title: "Embedded content from ".concat(source, "."),
	          width: '100%'
	        },
	        autoGenerateKey: false
	      }));
	    }
	  }]);

	  return Embed;
	}(AutoControlledComponent);

	defineProperty(Embed, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** An embed can be active. */
	  active: propTypes.bool,

	  /** An embed can specify an alternative aspect ratio. */
	  aspectRatio: propTypes.oneOf(['4:3', '16:9', '21:9']),

	  /** Setting to true or false will force autoplay. */
	  autoplay: every$1([demand(['source']), propTypes.bool]),

	  /** Whether to show networks branded UI like title cards, or after video calls to action. */
	  brandedUI: every$1([demand(['source']), propTypes.bool]),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Specifies a default chrome color with Vimeo or YouTube. */
	  color: every$1([demand(['source']), propTypes.string]),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Initial value of active. */
	  defaultActive: propTypes.bool,

	  /** Whether to prefer HD content. */
	  hd: every$1([demand(['source']), propTypes.bool]),

	  /** Specifies an icon to use with placeholder content. */
	  icon: itemShorthand,

	  /** Specifies an id for source. */
	  id: every$1([demand(['source']), propTypes.string]),

	  /** Shorthand for HTML iframe. */
	  iframe: every$1([demand(['source']), itemShorthand]),

	  /**
	   * Сalled on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed value.
	   */
	  onClick: propTypes.func,

	  /** A placeholder image for embed. */
	  placeholder: propTypes.string,

	  /** Specifies a source to use. */
	  source: every$1([disallow(['sourceUrl']), propTypes.oneOf(['youtube', 'vimeo'])]),

	  /** Specifies a url to use for embed. */
	  url: every$1([disallow(['source']), propTypes.string])
	});

	defineProperty(Embed, "autoControlledProps", ['active']);

	/**
	 * A PopupContent displays the content body of a Popover.
	 */

	function PopupContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(PopupContent, props);
	  var ElementType = getElementType(PopupContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}
	PopupContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** The content of the Popup */
	  children: propTypes.node,

	  /** Classes to add to the Popup content className. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	PopupContent.create = createShorthandFactory(PopupContent, function (children) {
	  return {
	    children: children
	  };
	});

	/**
	 * A PopupHeader displays a header in a Popover.
	 */

	function PopupHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(PopupHeader, props);
	  var ElementType = getElementType(PopupHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}
	PopupHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	PopupHeader.create = createShorthandFactory(PopupHeader, function (children) {
	  return {
	    children: children
	  };
	});

	var debug$8 = makeDebugger('popup');
	var POSITIONS = ['top left', 'top right', 'bottom right', 'bottom left', 'right center', 'left center', 'top center', 'bottom center'];
	/**
	 * A Popup displays additional information on top of a page.
	 */

	var Popup =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Popup, _Component);

	  function Popup() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Popup);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Popup)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "state", {});

	    defineProperty(assertThisInitialized(_this), "computePopupStyle", function (positions) {
	      var style = {
	        position: 'absolute'
	      };

	      var context = _this.getContext(); // Do not access window/document when server side rendering


	      if (!isBrowser()) return style;
	      debug$8('computePopupStyle()');
	      var _this$props = _this.props,
	          horizontalOffset = _this$props.horizontalOffset,
	          verticalOffset = _this$props.verticalOffset;
	      var _window = window,
	          pageYOffset = _window.pageYOffset,
	          pageXOffset = _window.pageXOffset;
	      var _document$documentEle = document.documentElement,
	          clientWidth = _document$documentEle.clientWidth,
	          clientHeight = _document$documentEle.clientHeight;
	      var coords = _this.coords || context.getBoundingClientRect();

	      if (lodash.includes(positions, 'right')) {
	        style.right = Math.round(clientWidth - (coords.right + pageXOffset));
	        style.left = 'auto';
	      } else if (lodash.includes(positions, 'left')) {
	        style.left = Math.round(coords.left + pageXOffset);
	        style.right = 'auto';
	      } else {
	        // if not left nor right, we are horizontally centering the element
	        var xOffset = (coords.width - _this.popupCoords.width) / 2;
	        style.left = Math.round(coords.left + xOffset + pageXOffset);
	        style.right = 'auto';
	      }

	      if (lodash.includes(positions, 'top')) {
	        style.bottom = Math.round(clientHeight - (coords.top + pageYOffset));
	        style.top = 'auto';
	      } else if (lodash.includes(positions, 'bottom')) {
	        style.top = Math.round(coords.bottom + pageYOffset);
	        style.bottom = 'auto';
	      } else {
	        // if not top nor bottom, we are vertically centering the element
	        var yOffset = (coords.height + _this.popupCoords.height) / 2;
	        style.top = Math.round(coords.bottom + pageYOffset - yOffset);
	        style.bottom = 'auto';

	        var _xOffset = _this.popupCoords.width + 8;

	        if (lodash.includes(positions, 'right')) {
	          style.right -= _xOffset;
	        } else {
	          style.left -= _xOffset;
	        }
	      }

	      if (horizontalOffset) {
	        if (lodash.isNumber(style.right)) {
	          style.right -= horizontalOffset;
	        } else {
	          style.left -= horizontalOffset;
	        }
	      }

	      if (verticalOffset) {
	        if (lodash.isNumber(style.top)) {
	          style.top += verticalOffset;
	        } else {
	          style.bottom += verticalOffset;
	        }
	      }

	      return style;
	    });

	    defineProperty(assertThisInitialized(_this), "isStyleInViewport", function (style) {
	      debug$8("isStyleInViewport(".concat(style, ")"));
	      var _window2 = window,
	          pageYOffset = _window2.pageYOffset,
	          pageXOffset = _window2.pageXOffset;
	      var _document$documentEle2 = document.documentElement,
	          clientWidth = _document$documentEle2.clientWidth,
	          clientHeight = _document$documentEle2.clientHeight;
	      var element = {
	        top: style.top,
	        left: style.left,
	        width: _this.popupCoords.width,
	        height: _this.popupCoords.height
	      };

	      if (lodash.isNumber(style.right)) {
	        element.left = clientWidth - style.right - element.width;
	      }

	      if (lodash.isNumber(style.bottom)) {
	        element.top = clientHeight - style.bottom - element.height;
	      } // hidden on top


	      if (element.top < pageYOffset) return false; // hidden on the bottom

	      if (element.top + element.height > pageYOffset + clientHeight) return false; // hidden the left

	      if (element.left < pageXOffset) return false; // hidden on the right

	      if (element.left + element.width > pageXOffset + clientWidth) return false;
	      return true;
	    });

	    defineProperty(assertThisInitialized(_this), "setPopupStyle", function () {
	      var context = _this.getContext();

	      if (!_this.coords && !context || !_this.popupCoords) return;
	      debug$8('setPopupStyle()');
	      var position = _this.props.position;

	      var style = _this.computePopupStyle(position);

	      var keepInViewPort = _this.props.keepInViewPort;

	      if (keepInViewPort) {
	        // Lets detect if the popup is out of the viewport and adjust
	        // the position accordingly
	        var positions = lodash.without(POSITIONS, position).concat([position]);

	        for (var i = 0; !_this.isStyleInViewport(style) && i < positions.length; i += 1) {
	          style = _this.computePopupStyle(positions[i]);
	          position = positions[i];
	        }
	      } // Append 'px' to every numerical values in the style


	      style = lodash.mapValues(style, function (value) {
	        return lodash.isNumber(value) ? "".concat(value, "px") : value;
	      });

	      _this.setState({
	        style: style,
	        position: position
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "getPortalProps", function () {
	      debug$8('getPortalProps()');
	      var portalProps = {};
	      var _this$props2 = _this.props,
	          on = _this$props2.on,
	          hoverable = _this$props2.hoverable;
	      var normalizedOn = lodash.isArray(on) ? on : [on];

	      if (hoverable) {
	        portalProps.closeOnPortalMouseLeave = true;
	        portalProps.mouseLeaveDelay = 300;
	      }

	      if (lodash.includes(normalizedOn, 'click')) {
	        portalProps.openOnTriggerClick = true;
	        portalProps.closeOnTriggerClick = true;
	        portalProps.closeOnDocumentClick = true;
	      }

	      if (lodash.includes(normalizedOn, 'focus')) {
	        portalProps.openOnTriggerFocus = true;
	        portalProps.closeOnTriggerBlur = true;
	      }

	      if (lodash.includes(normalizedOn, 'hover')) {
	        portalProps.openOnTriggerMouseEnter = true;
	        portalProps.closeOnTriggerMouseLeave = true; // Taken from SUI: https://git.io/vPmCm

	        portalProps.mouseLeaveDelay = 70;
	        portalProps.mouseEnterDelay = 50;
	      }

	      return portalProps;
	    });

	    defineProperty(assertThisInitialized(_this), "hideOnScroll", function (e) {
	      debug$8('hideOnScroll()');

	      _this.setState({
	        closed: true
	      });

	      instance$1.unsub('scroll', _this.hideOnScroll, {
	        target: window
	      });
	      _this.timeoutId = setTimeout(function () {
	        _this.setState({
	          closed: false
	        });
	      }, 50);

	      _this.handleClose(e);
	    });

	    defineProperty(assertThisInitialized(_this), "handleClose", function (e) {
	      debug$8('handleClose()');

	      lodash.invoke(_this.props, 'onClose', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleOpen", function (e) {
	      debug$8('handleOpen()');
	      _this.coords = _this.getContext().getBoundingClientRect();

	      lodash.invoke(_this.props, 'onOpen', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalMount", function (e) {
	      debug$8('handlePortalMount()');
	      var hideOnScroll = _this.props.hideOnScroll;
	      if (hideOnScroll) instance$1.sub('scroll', _this.hideOnScroll, {
	        target: window
	      });

	      _this.setPopupStyle();

	      lodash.invoke(_this.props, 'onMount', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePortalUnmount", function (e) {
	      debug$8('handlePortalUnmount()');
	      var hideOnScroll = _this.props.hideOnScroll;
	      if (hideOnScroll) instance$1.unsub('scroll', _this.hideOnScroll, {
	        target: window
	      });

	      lodash.invoke(_this.props, 'onUnmount', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handlePopupRef", function (popupRef) {
	      debug$8("handlePopupRef(".concat(popupRef, ")"));
	      _this.popupCoords = popupRef ? popupRef.getBoundingClientRect() : null;

	      _this.setPopupStyle();
	    });

	    defineProperty(assertThisInitialized(_this), "handleTriggerRef", function (triggerRef) {
	      debug$8("handleTriggerRef(".concat(triggerRef, ")"));
	      _this.triggerRef = triggerRef;

	      _this.setPopupStyle();
	    });

	    defineProperty(assertThisInitialized(_this), "getContext", function () {
	      var context = _this.props.context;
	      var contextFromProp = isRefObject$1(context) ? context.current : context;
	      return contextFromProp || _this.triggerRef;
	    });

	    return _this;
	  }

	  createClass(Popup, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      // if horizontal/vertical offsets change, re-calculate the CSS style
	      var _this$props3 = this.props,
	          horizontalOffset = _this$props3.horizontalOffset,
	          verticalOffset = _this$props3.verticalOffset;

	      if (horizontalOffset !== prevProps.horizontalOffset || verticalOffset !== prevProps.verticalOffset) {
	        this.setPopupStyle();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeoutId);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          basic = _this$props4.basic,
	          children = _this$props4.children,
	          className = _this$props4.className,
	          content = _this$props4.content,
	          flowing = _this$props4.flowing,
	          header = _this$props4.header,
	          inverted = _this$props4.inverted,
	          size$$1 = _this$props4.size,
	          trigger = _this$props4.trigger,
	          wide = _this$props4.wide,
	          disabled = _this$props4.disabled;
	      var _this$state = this.state,
	          position = _this$state.position,
	          closed = _this$state.closed;

	      var style = lodash.assign({}, this.state.style, this.props.style);

	      var classes = classNames('ui', position, size$$1, useKeyOrValueAndKey(wide, 'wide'), useKeyOnly(basic, 'basic'), useKeyOnly(flowing, 'flowing'), useKeyOnly(inverted, 'inverted'), 'popup transition visible', className);
	      if (closed || disabled) return trigger;
	      var unhandled = getUnhandledProps(Popup, this.props);
	      var portalPropNames = Portal.handledProps;

	      var rest$$1 = lodash.reduce(unhandled, function (acc, val, key) {
	        if (!lodash.includes(portalPropNames, key)) acc[key] = val;
	        return acc;
	      }, {});

	      var portalProps = lodash.pick(unhandled, portalPropNames);

	      var ElementType = getElementType(Popup, this.props);
	      var popupJSX = React__default.createElement(Ref, {
	        innerRef: this.handlePopupRef
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        style: style
	      }), children, isNil$1(children) && PopupHeader.create(header, {
	        autoGenerateKey: false
	      }), isNil$1(children) && PopupContent.create(content, {
	        autoGenerateKey: false
	      })));

	      var mergedPortalProps = objectSpread({}, this.getPortalProps(), portalProps);

	      debug$8('portal props:', mergedPortalProps);
	      return React__default.createElement(Portal, _extends_1({}, mergedPortalProps, {
	        onClose: this.handleClose,
	        onMount: this.handlePortalMount,
	        onOpen: this.handleOpen,
	        onUnmount: this.handlePortalUnmount,
	        trigger: trigger,
	        triggerRef: this.handleTriggerRef
	      }), popupJSX);
	    }
	  }]);

	  return Popup;
	}(React.Component);

	defineProperty(Popup, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Display the popup without the pointing arrow. */
	  basic: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Simple text content for the popover. */
	  content: itemShorthand,

	  /** Existing element the pop-up should be bound to. */
	  context: propTypes.oneOfType([propTypes.object, refObject]),

	  /** A disabled popup only renders its trigger. */
	  disabled: propTypes.bool,

	  /** A flowing Popup has no maximum width and continues to flow to fit its content. */
	  flowing: propTypes.bool,

	  /** Takes up the entire width of its offset container. */
	  // TODO: implement the Popup fluid layout
	  // fluid: PropTypes.bool,

	  /** Header displayed above the content in bold. */
	  header: itemShorthand,

	  /** Hide the Popup when scrolling the window. */
	  hideOnScroll: propTypes.bool,

	  /** Whether the popup should not close on hover. */
	  hoverable: propTypes.bool,

	  /** Invert the colors of the Popup. */
	  inverted: propTypes.bool,

	  /** Horizontal offset in pixels to be applied to the Popup. */
	  horizontalOffset: propTypes.number,

	  /** Vertical offset in pixels to be applied to the Popup. */
	  verticalOffset: propTypes.number,

	  /** Events triggering the popup. */
	  on: propTypes.oneOfType([propTypes.oneOf(['hover', 'click', 'focus']), propTypes.arrayOf(propTypes.oneOf(['hover', 'click', 'focus']))]),

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: propTypes.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: propTypes.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: propTypes.func,

	  /** Position for the popover. */
	  position: propTypes.oneOf(POSITIONS),

	  /** Popup size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium', 'big', 'massive')),

	  /** Custom Popup style. */
	  style: propTypes.object,

	  /** Element to be rendered in-place where the popup is defined. */
	  trigger: propTypes.node,

	  /** Popup width. */
	  wide: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** Element to be rendered within the confines of the viewport whenever possible. */
	  keepInViewPort: propTypes.bool
	});

	defineProperty(Popup, "defaultProps", {
	  position: 'top left',
	  on: 'hover',
	  keepInViewPort: true,
	  disabled: false
	});

	defineProperty(Popup, "Content", PopupContent);

	defineProperty(Popup, "Header", PopupHeader);

	/**
	 * A progress bar shows the progression of a task.
	 */

	var Progress =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Progress, _Component);

	  function Progress() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Progress);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Progress)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "calculatePercent", function () {
	      var _this$props = _this.props,
	          percent = _this$props.percent,
	          total = _this$props.total,
	          value = _this$props.value;
	      if (!lodash.isUndefined(percent)) return percent;
	      if (!lodash.isUndefined(total) && !lodash.isUndefined(value)) return value / total * 100;
	    });

	    defineProperty(assertThisInitialized(_this), "computeValueText", function (percent) {
	      var _this$props2 = _this.props,
	          progress = _this$props2.progress,
	          total = _this$props2.total,
	          value = _this$props2.value;
	      if (progress === 'value') return value;
	      if (progress === 'ratio') return "".concat(value, "/").concat(total);
	      return "".concat(percent, "%");
	    });

	    defineProperty(assertThisInitialized(_this), "getPercent", function () {
	      var _this$props3 = _this.props,
	          precision = _this$props3.precision,
	          progress = _this$props3.progress,
	          total = _this$props3.total,
	          value = _this$props3.value;

	      var percent = lodash.clamp(_this.calculatePercent(), 0, 100);

	      if (!lodash.isUndefined(total) && !lodash.isUndefined(value) && progress === 'value') {
	        return value / total * 100;
	      }

	      if (progress === 'value') return value;
	      if (lodash.isUndefined(precision)) return percent;
	      return lodash.round(percent, precision);
	    });

	    defineProperty(assertThisInitialized(_this), "isAutoSuccess", function () {
	      var _this$props4 = _this.props,
	          autoSuccess = _this$props4.autoSuccess,
	          percent = _this$props4.percent,
	          total = _this$props4.total,
	          value = _this$props4.value;
	      return autoSuccess && (percent >= 100 || value >= total);
	    });

	    defineProperty(assertThisInitialized(_this), "renderLabel", function () {
	      var _this$props5 = _this.props,
	          children = _this$props5.children,
	          content = _this$props5.content,
	          label = _this$props5.label;
	      if (!isNil$1(children)) return React__default.createElement("div", {
	        className: "label"
	      }, children);
	      if (!isNil$1(content)) return React__default.createElement("div", {
	        className: "label"
	      }, content);
	      return createHTMLDivision(label, {
	        autoGenerateKey: false,
	        defaultProps: {
	          className: 'label'
	        }
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderProgress", function (percent) {
	      var _this$props6 = _this.props,
	          precision = _this$props6.precision,
	          progress = _this$props6.progress;
	      if (!progress && lodash.isUndefined(precision)) return;
	      return React__default.createElement("div", {
	        className: "progress"
	      }, _this.computeValueText(percent));
	    });

	    return _this;
	  }

	  createClass(Progress, [{
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          active = _this$props7.active,
	          attached = _this$props7.attached,
	          className = _this$props7.className,
	          color = _this$props7.color,
	          disabled = _this$props7.disabled,
	          error = _this$props7.error,
	          indicating = _this$props7.indicating,
	          inverted = _this$props7.inverted,
	          size$$1 = _this$props7.size,
	          success = _this$props7.success,
	          warning = _this$props7.warning;
	      var classes = classNames('ui', color, size$$1, useKeyOnly(active || indicating, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(indicating, 'indicating'), useKeyOnly(inverted, 'inverted'), useKeyOnly(success || this.isAutoSuccess(), 'success'), useKeyOnly(warning, 'warning'), useValueAndKey(attached, 'attached'), 'progress', className);
	      var rest$$1 = getUnhandledProps(Progress, this.props);
	      var ElementType = getElementType(Progress, this.props);
	      var percent = this.getPercent() || 0;
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        "data-percent": Math.floor(percent)
	      }), React__default.createElement("div", {
	        className: "bar",
	        style: {
	          width: "".concat(percent, "%")
	        }
	      }, this.renderProgress(percent)), this.renderLabel());
	    }
	  }]);

	  return Progress;
	}(React.Component);

	defineProperty(Progress, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A progress bar can show activity. */
	  active: propTypes.bool,

	  /** A progress bar can attach to and show the progress of an element (i.e. Card or Segment). */
	  attached: propTypes.oneOf(['top', 'bottom']),

	  /** Whether success state should automatically trigger when progress completes. */
	  autoSuccess: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A progress bar can have different colors. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A progress bar be disabled. */
	  disabled: propTypes.bool,

	  /** A progress bar can show a error state. */
	  error: propTypes.bool,

	  /** An indicating progress bar visually indicates the current level of progress of a task. */
	  indicating: propTypes.bool,

	  /** A progress bar can have its colors inverted. */
	  inverted: propTypes.bool,

	  /** Can be set to either to display progress as percent or ratio. */
	  label: itemShorthand,

	  /** Current percent complete. */
	  percent: every$1([disallow(['total', 'value']), propTypes.oneOfType([propTypes.number, propTypes.string])]),

	  /** Decimal point precision for calculated progress. */
	  precision: propTypes.number,

	  /** A progress bar can contain a text value indicating current progress. */
	  progress: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['percent', 'ratio', 'value'])]),

	  /** A progress bar can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'mini', 'huge', 'massive')),

	  /** A progress bar can show a success state. */
	  success: propTypes.bool,

	  /** For use with value. Together, these will calculate the percent. Mutually excludes percent. */
	  total: every$1([demand(['value']), disallow(['percent']), propTypes.oneOfType([propTypes.number, propTypes.string])]),

	  /** For use with total. Together, these will calculate the percent. Mutually excludes percent. */
	  value: every$1([disallow(['percent']), propTypes.oneOfType([propTypes.number, propTypes.string])]),

	  /** A progress bar can show a warning state. */
	  warning: propTypes.bool
	});

	/**
	 * An internal icon sub-component for Rating component
	 */

	var RatingIcon =
	/*#__PURE__*/
	function (_Component) {
	  inherits(RatingIcon, _Component);

	  function RatingIcon() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, RatingIcon);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(RatingIcon)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      lodash.invoke(_this.props, 'onClick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleKeyUp", function (e) {
	      lodash.invoke(_this.props, 'onKeyUp', e, _this.props);

	      switch (keyboardKey_1.getCode(e)) {
	        case keyboardKey_1.Enter:
	        case keyboardKey_1.Spacebar:
	          e.preventDefault();

	          lodash.invoke(_this.props, 'onClick', e, _this.props);

	          break;

	        default:
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseEnter", function (e) {
	      lodash.invoke(_this.props, 'onMouseEnter', e, _this.props);
	    });

	    return _this;
	  }

	  createClass(RatingIcon, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          className = _this$props.className,
	          selected = _this$props.selected;
	      var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(selected, 'selected'), 'icon', className);
	      var rest$$1 = getUnhandledProps(RatingIcon, this.props);
	      var ElementType = getElementType(RatingIcon, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onClick: this.handleClick,
	        onKeyUp: this.handleKeyUp,
	        onMouseEnter: this.handleMouseEnter,
	        role: "radio"
	      }));
	    }
	  }]);

	  return RatingIcon;
	}(React.Component);

	defineProperty(RatingIcon, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Indicates activity of an icon. */
	  active: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** An index of icon inside Rating. */
	  index: propTypes.number,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /**
	   * Called on keyup.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onKeyUp: propTypes.func,

	  /**
	   * Called on mouseenter.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseEnter: propTypes.func,

	  /** Indicates selection of an icon. */
	  selected: propTypes.bool
	});

	defineProperty(RatingIcon, "defaultProps", {
	  as: 'i'
	});

	/**
	 * A rating indicates user interest in content.
	 */

	var Rating =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Rating, _Component);

	  function Rating() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Rating);

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Rating)).call.apply(_getPrototypeOf2, [this].concat(_args)));

	    defineProperty(assertThisInitialized(_this), "handleIconClick", function (e, _ref) {
	      var index = _ref.index;
	      var _this$props = _this.props,
	          clearable = _this$props.clearable,
	          disabled = _this$props.disabled,
	          maxRating = _this$props.maxRating,
	          onRate = _this$props.onRate;
	      var rating = _this.state.rating;
	      if (disabled) return; // default newRating is the clicked icon
	      // allow toggling a binary rating
	      // allow clearing ratings

	      var newRating = index + 1;

	      if (clearable === 'auto' && maxRating === 1) {
	        newRating = +!rating;
	      } else if (clearable === true && newRating === rating) {
	        newRating = 0;
	      } // set rating


	      _this.trySetState({
	        rating: newRating
	      }, {
	        isSelecting: false
	      });

	      if (onRate) onRate(e, objectSpread({}, _this.props, {
	        rating: newRating
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleIconMouseEnter", function (e, _ref2) {
	      var index = _ref2.index;
	      if (_this.props.disabled) return;

	      _this.setState({
	        selectedIndex: index,
	        isSelecting: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseLeave", function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      lodash.invoke.apply(lodash, [_this.props, 'onMouseLeave'].concat(args));

	      if (_this.props.disabled) return;

	      _this.setState({
	        selectedIndex: -1,
	        isSelecting: false
	      });
	    });

	    return _this;
	  }

	  createClass(Rating, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          className = _this$props2.className,
	          disabled = _this$props2.disabled,
	          icon = _this$props2.icon,
	          maxRating = _this$props2.maxRating,
	          size$$1 = _this$props2.size;
	      var _this$state = this.state,
	          rating = _this$state.rating,
	          selectedIndex = _this$state.selectedIndex,
	          isSelecting = _this$state.isSelecting;
	      var classes = classNames('ui', icon, size$$1, useKeyOnly(disabled, 'disabled'), useKeyOnly(isSelecting && !disabled && selectedIndex >= 0, 'selected'), 'rating', className);
	      var rest$$1 = getUnhandledProps(Rating, this.props);
	      var ElementType = getElementType(Rating, this.props);
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        role: "radiogroup",
	        onMouseLeave: this.handleMouseLeave,
	        tabIndex: disabled ? 0 : -1
	      }), lodash.times(maxRating, function (i) {
	        return React__default.createElement(RatingIcon, {
	          tabIndex: disabled ? -1 : 0,
	          active: rating >= i + 1,
	          "aria-checked": rating === i + 1,
	          "aria-posinset": i + 1,
	          "aria-setsize": maxRating,
	          index: i,
	          key: i,
	          onClick: _this2.handleIconClick,
	          onMouseEnter: _this2.handleIconMouseEnter,
	          selected: selectedIndex >= i && isSelecting
	        });
	      }));
	    }
	  }]);

	  return Rating;
	}(AutoControlledComponent);

	defineProperty(Rating, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /**
	   * You can clear the rating by clicking on the current start rating.
	   * By default a rating will be only clearable if there is 1 icon.
	   * Setting to `true`/`false` will allow or disallow a user to clear their rating.
	   */
	  clearable: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['auto'])]),

	  /** The initial rating value. */
	  defaultRating: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** You can disable or enable interactive rating.  Makes a read-only rating. */
	  disabled: propTypes.bool,

	  /** A rating can use a set of star or heart icons. */
	  icon: propTypes.oneOf(['star', 'heart']),

	  /** The total number of icons. */
	  maxRating: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Called after user selects a new rating.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed rating.
	   */
	  onRate: propTypes.func,

	  /** The current number of active icons. */
	  rating: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** A progress bar can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium', 'big'))
	});

	defineProperty(Rating, "autoControlledProps", ['rating']);

	defineProperty(Rating, "defaultProps", {
	  clearable: 'auto',
	  maxRating: 1
	});

	defineProperty(Rating, "Icon", RatingIcon);

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var objectWithoutProperties = _objectWithoutProperties;

	function SearchCategory(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      renderer = props.renderer;
	  var classes = classNames(useKeyOnly(active, 'active'), 'category', className);
	  var rest = getUnhandledProps(SearchCategory, props);
	  var ElementType = getElementType(SearchCategory, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), React__default.createElement("div", {
	    className: "name"
	  }, renderer(props)), React__default.createElement("div", {
	    className: "results"
	  }, isNil$1(children) ? content : children));
	}

	SearchCategory.defaultProps = {
	  renderer: function renderer(_ref) {
	    var name = _ref.name;
	    return name;
	  }
	};
	SearchCategory.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** The item currently selected by keyboard shortcut. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Display name. */
	  name: propTypes.string,

	  /**
	   * Renders the category contents.
	   *
	   * @param {object} props - The SearchCategory props object.
	   * @returns {*} - Renderable category contents.
	   */
	  renderer: propTypes.func,

	  /** Array of Search.Result props. */
	  results: propTypes.array
	};

	// image. However, optionally wrapping it makes this function a lot more
	// complicated and harder to read. Since always wrapping it doesn't affect
	// the style in any way let's just do that.
	//
	// Note: To avoid requiring a wrapping div, we return an array here so to
	// prevent rendering issues each node needs a unique key.

	var defaultRenderer = function defaultRenderer(_ref) {
	  var image = _ref.image,
	      price = _ref.price,
	      title = _ref.title,
	      description = _ref.description;
	  return [image && React__default.createElement("div", {
	    key: "image",
	    className: "image"
	  }, createHTMLImage(image, {
	    autoGenerateKey: false
	  })), React__default.createElement("div", {
	    key: "content",
	    className: "content"
	  }, price && React__default.createElement("div", {
	    className: "price"
	  }, price), title && React__default.createElement("div", {
	    className: "title"
	  }, title), description && React__default.createElement("div", {
	    className: "description"
	  }, description))];
	};

	var SearchResult =
	/*#__PURE__*/
	function (_Component) {
	  inherits(SearchResult, _Component);

	  function SearchResult() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, SearchResult);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(SearchResult)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });

	    return _this;
	  }

	  createClass(SearchResult, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          className = _this$props.className,
	          renderer = _this$props.renderer;
	      var classes = classNames(useKeyOnly(active, 'active'), 'result', className);
	      var rest = getUnhandledProps(SearchResult, this.props);
	      var ElementType = getElementType(SearchResult, this.props); // Note: You technically only need the 'content' wrapper when there's an
	      // image. However, optionally wrapping it makes this function a lot more
	      // complicated and harder to read. Since always wrapping it doesn't affect
	      // the style in any way let's just do that.

	      return React__default.createElement(ElementType, _extends_1({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), renderer(this.props));
	    }
	  }]);

	  return SearchResult;
	}(React.Component);

	defineProperty(SearchResult, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** The item currently selected by keyboard shortcut. */
	  active: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Additional text with less emphasis. */
	  description: propTypes.string,

	  /** A unique identifier. */
	  id: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Add an image to the item. */
	  image: propTypes.string,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /** Customized text for price. */
	  price: propTypes.string,

	  /**
	   * Renders the result contents.
	   *
	   * @param {object} props - The SearchResult props object.
	   * @returns {*} - Renderable result contents.
	   */
	  renderer: propTypes.func,

	  /** Display title. */
	  title: propTypes.string.isRequired
	});

	defineProperty(SearchResult, "defaultProps", {
	  renderer: defaultRenderer
	});

	function SearchResults(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('results transition', className);
	  var rest = getUnhandledProps(SearchResults, props);
	  var ElementType = getElementType(SearchResults, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	SearchResults.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	var debug$9 = makeDebugger('search');
	/**
	 * A search module allows a user to query for results from a selection of data
	 */

	var Search =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Search, _Component);

	  function Search() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Search);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleResultSelect", function (e, result$$1) {
	      debug$9('handleResultSelect()');
	      debug$9(result$$1);

	      lodash.invoke(_this.props, 'onResultSelect', e, objectSpread({}, _this.props, {
	        result: result$$1
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "handleSelectionChange", function (e) {
	      debug$9('handleSelectionChange()');

	      var result$$1 = _this.getSelectedResult();

	      lodash.invoke(_this.props, 'onSelectionChange', e, objectSpread({}, _this.props, {
	        result: result$$1
	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "closeOnEscape", function (e) {
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Escape) return;
	      e.preventDefault();

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "moveSelectionOnKeyDown", function (e) {
	      debug$9('moveSelectionOnKeyDown()');
	      debug$9(keyboardKey_1.getKey(e));

	      switch (keyboardKey_1.getCode(e)) {
	        case keyboardKey_1.ArrowDown:
	          e.preventDefault();

	          _this.moveSelectionBy(e, 1);

	          break;

	        case keyboardKey_1.ArrowUp:
	          e.preventDefault();

	          _this.moveSelectionBy(e, -1);

	          break;

	        default:
	          break;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "selectItemOnEnter", function (e) {
	      debug$9('selectItemOnEnter()');
	      debug$9(keyboardKey_1.getKey(e));
	      if (keyboardKey_1.getCode(e) !== keyboardKey_1.Enter) return;

	      var result$$1 = _this.getSelectedResult(); // prevent selecting null if there was no selected item value


	      if (!result$$1) return;
	      e.preventDefault(); // notify the onResultSelect prop that the user is trying to change value

	      _this.setValue(result$$1.title);

	      _this.handleResultSelect(e, result$$1);

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "closeOnDocumentClick", function (e) {
	      debug$9('closeOnDocumentClick()');
	      debug$9(e);

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "handleMouseDown", function (e) {
	      debug$9('handleMouseDown()');
	      _this.isMouseDown = true;

	      lodash.invoke(_this.props, 'onMouseDown', e, _this.props);

	      instance$1.sub('mouseup', _this.handleDocumentMouseUp);
	    });

	    defineProperty(assertThisInitialized(_this), "handleDocumentMouseUp", function () {
	      debug$9('handleDocumentMouseUp()');
	      _this.isMouseDown = false;
	      instance$1.unsub('mouseup', _this.handleDocumentMouseUp);
	    });

	    defineProperty(assertThisInitialized(_this), "handleInputClick", function (e) {
	      debug$9('handleInputClick()', e); // prevent closeOnDocumentClick()

	      e.nativeEvent.stopImmediatePropagation();

	      _this.tryOpen();
	    });

	    defineProperty(assertThisInitialized(_this), "handleItemClick", function (e, _ref) {
	      var id = _ref.id;
	      debug$9('handleItemClick()');
	      debug$9(id);

	      var result$$1 = _this.getSelectedResult(id); // prevent closeOnDocumentClick()


	      e.nativeEvent.stopImmediatePropagation(); // notify the onResultSelect prop that the user is trying to change value

	      _this.setValue(result$$1.title);

	      _this.handleResultSelect(e, result$$1);

	      _this.close();
	    });

	    defineProperty(assertThisInitialized(_this), "handleItemMouseDown", function (e) {
	      debug$9('handleItemMouseDown()'); // Heads up! We should prevent default to prevent blur events.
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/3298

	      e.preventDefault();
	    });

	    defineProperty(assertThisInitialized(_this), "handleFocus", function (e) {
	      debug$9('handleFocus()');

	      lodash.invoke(_this.props, 'onFocus', e, _this.props);

	      _this.setState({
	        focus: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleBlur", function (e) {
	      debug$9('handleBlur()');

	      lodash.invoke(_this.props, 'onBlur', e, _this.props);

	      _this.setState({
	        focus: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleSearchChange", function (e) {
	      debug$9('handleSearchChange()');
	      debug$9(e.target.value); // prevent propagating to this.props.onChange()

	      e.stopPropagation();
	      var minCharacters = _this.props.minCharacters;
	      var open = _this.state.open;
	      var newQuery = e.target.value;

	      lodash.invoke(_this.props, 'onSearchChange', e, objectSpread({}, _this.props, {
	        value: newQuery
	      })); // open search dropdown on search query


	      if (newQuery.length < minCharacters) {
	        _this.close();
	      } else if (!open) {
	        _this.tryOpen(newQuery);
	      }

	      _this.setValue(newQuery);
	    });

	    defineProperty(assertThisInitialized(_this), "getFlattenedResults", function () {
	      var _this$props = _this.props,
	          category = _this$props.category,
	          results = _this$props.results;
	      return !category ? results : lodash.reduce(results, function (memo, categoryData) {
	        return memo.concat(categoryData.results);
	      }, []);
	    });

	    defineProperty(assertThisInitialized(_this), "getSelectedResult", function () {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.selectedIndex;

	      var results = _this.getFlattenedResults();

	      return lodash.get(results, index);
	    });

	    defineProperty(assertThisInitialized(_this), "setValue", function (value) {
	      debug$9('setValue()');
	      debug$9('value', value);
	      var selectFirstResult = _this.props.selectFirstResult;

	      _this.trySetState({
	        value: value
	      }, {
	        selectedIndex: selectFirstResult ? 0 : -1
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "moveSelectionBy", function (e, offset) {
	      debug$9('moveSelectionBy()');
	      debug$9("offset: ".concat(offset));
	      var selectedIndex = _this.state.selectedIndex;

	      var results = _this.getFlattenedResults();

	      var lastIndex = results.length - 1; // next is after last, wrap to beginning
	      // next is before first, wrap to end

	      var nextIndex = selectedIndex + offset;
	      if (nextIndex > lastIndex) nextIndex = 0;else if (nextIndex < 0) nextIndex = lastIndex;

	      _this.setState({
	        selectedIndex: nextIndex
	      });

	      _this.scrollSelectedItemIntoView();

	      _this.handleSelectionChange(e);
	    });

	    defineProperty(assertThisInitialized(_this), "scrollSelectedItemIntoView", function () {
	      debug$9('scrollSelectedItemIntoView()'); // Do not access document when server side rendering

	      if (!isBrowser()) return;
	      var menu = document.querySelector('.ui.search.active.visible .results.visible');
	      var item = menu.querySelector('.result.active');
	      if (!item) return;
	      debug$9("menu (results): ".concat(menu));
	      debug$9("item (result): ".concat(item));
	      var isOutOfUpperView = item.offsetTop < menu.scrollTop;
	      var isOutOfLowerView = item.offsetTop + item.clientHeight > menu.scrollTop + menu.clientHeight;

	      if (isOutOfUpperView) {
	        menu.scrollTop = item.offsetTop;
	      } else if (isOutOfLowerView) {
	        menu.scrollTop = item.offsetTop + item.clientHeight - menu.clientHeight;
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "tryOpen", function () {
	      var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      debug$9('open()');
	      var minCharacters = _this.props.minCharacters;
	      if (currentValue.length < minCharacters) return;

	      _this.open();
	    });

	    defineProperty(assertThisInitialized(_this), "open", function () {
	      debug$9('open()');

	      _this.trySetState({
	        open: true
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "close", function () {
	      debug$9('close()');

	      _this.trySetState({
	        open: false
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderSearchInput", function (rest$$1) {
	      var _this$props2 = _this.props,
	          icon = _this$props2.icon,
	          input = _this$props2.input;
	      var value = _this.state.value;
	      return Input.create(input, {
	        autoGenerateKey: false,
	        defaultProps: objectSpread({}, rest$$1, {
	          icon: icon,
	          input: {
	            className: 'prompt',
	            tabIndex: '0',
	            autoComplete: 'off'
	          },
	          onChange: _this.handleSearchChange,
	          onClick: _this.handleInputClick,
	          value: value
	        })
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderNoResults", function () {
	      var _this$props3 = _this.props,
	          noResultsDescription = _this$props3.noResultsDescription,
	          noResultsMessage = _this$props3.noResultsMessage;
	      return React__default.createElement("div", {
	        className: "message empty"
	      }, React__default.createElement("div", {
	        className: "header"
	      }, noResultsMessage), noResultsDescription && React__default.createElement("div", {
	        className: "description"
	      }, noResultsDescription));
	    });

	    defineProperty(assertThisInitialized(_this), "renderResult", function (_ref2, index, _array) {
	      var childKey = _ref2.childKey,
	          result$$1 = objectWithoutProperties(_ref2, ["childKey"]);

	      var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	      var resultRenderer = _this.props.resultRenderer;
	      var selectedIndex = _this.state.selectedIndex;
	      var offsetIndex = index + offset;
	      return React__default.createElement(SearchResult, _extends_1({
	        key: childKey || result$$1.title,
	        active: selectedIndex === offsetIndex,
	        onClick: _this.handleItemClick,
	        onMouseDown: _this.handleItemMouseDown,
	        renderer: resultRenderer
	      }, result$$1, {
	        id: offsetIndex // Used to lookup the result on item click

	      }));
	    });

	    defineProperty(assertThisInitialized(_this), "renderResults", function () {
	      var results = _this.props.results;
	      return lodash.map(results, _this.renderResult);
	    });

	    defineProperty(assertThisInitialized(_this), "renderCategories", function () {
	      var _this$props4 = _this.props,
	          categoryRenderer = _this$props4.categoryRenderer,
	          categories = _this$props4.results;
	      var selectedIndex = _this.state.selectedIndex;
	      var count = 0;
	      return lodash.map(categories, function (_ref3) {
	        var childKey = _ref3.childKey,
	            category = objectWithoutProperties(_ref3, ["childKey"]);

	        var categoryProps = objectSpread({
	          key: childKey || category.name,
	          active: lodash.inRange(selectedIndex, count, count + category.results.length),
	          renderer: categoryRenderer
	        }, category);

	        var renderFn = lodash.partialRight(_this.renderResult, count);

	        count += category.results.length;
	        return React__default.createElement(SearchCategory, categoryProps, category.results.map(renderFn));
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "renderMenuContent", function () {
	      var _this$props5 = _this.props,
	          category = _this$props5.category,
	          showNoResults = _this$props5.showNoResults,
	          results = _this$props5.results;

	      if (lodash.isEmpty(results)) {
	        return showNoResults ? _this.renderNoResults() : null;
	      }

	      return category ? _this.renderCategories() : _this.renderResults();
	    });

	    defineProperty(assertThisInitialized(_this), "renderResultsMenu", function () {
	      var open = _this.state.open;
	      var resultsClasses = open ? 'visible' : '';

	      var menuContent = _this.renderMenuContent();

	      if (!menuContent) return;
	      return React__default.createElement(SearchResults, {
	        className: resultsClasses
	      }, menuContent);
	    });

	    return _this;
	  }

	  createClass(Search, [{
	    key: "componentWillMount",
	    value: function componentWillMount() {
	      debug$9('componentWillMount()');
	      var _this$state = this.state,
	          open = _this$state.open,
	          value = _this$state.value;
	      this.setValue(value);
	      if (open) this.open();
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      get$1(getPrototypeOf(Search.prototype), "componentWillReceiveProps", this).call(this, nextProps);

	      debug$9('componentWillReceiveProps()');
	      debug$9('changed props:', objectDiff(nextProps, this.props));

	      if (!shallowequal(nextProps.value, this.props.value)) {
	        debug$9('value changed, setting', nextProps.value);
	        this.setValue(nextProps.value);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !shallowequal(nextProps, this.props) || !shallowequal(nextState, this.state);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      // eslint-disable-line complexity
	      debug$9('componentDidUpdate()');
	      debug$9('to state:', objectDiff(prevState, this.state)); // focused / blurred

	      if (!prevState.focus && this.state.focus) {
	        debug$9('search focused');

	        if (!this.isMouseDown) {
	          debug$9('mouse is not down, opening');
	          this.tryOpen();
	        }

	        if (this.state.open) {
	          instance$1.sub('keydown', [this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	        }
	      } else if (prevState.focus && !this.state.focus) {
	        debug$9('search blurred');

	        if (!this.isMouseDown) {
	          debug$9('mouse is not down, closing');
	          this.close();
	        }

	        instance$1.unsub('keydown', [this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      } // opened / closed


	      if (!prevState.open && this.state.open) {
	        debug$9('search opened');
	        this.open();
	        instance$1.sub('click', this.closeOnDocumentClick);
	        instance$1.sub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      } else if (prevState.open && !this.state.open) {
	        debug$9('search closed');
	        this.close();
	        instance$1.unsub('click', this.closeOnDocumentClick);
	        instance$1.unsub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      debug$9('componentWillUnmount()');
	      instance$1.unsub('click', this.closeOnDocumentClick);
	      instance$1.unsub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      debug$9('render()');
	      debug$9('props', this.props);
	      debug$9('state', this.state);
	      var _this$state2 = this.state,
	          searchClasses = _this$state2.searchClasses,
	          focus = _this$state2.focus,
	          open = _this$state2.open;
	      var _this$props6 = this.props,
	          aligned = _this$props6.aligned,
	          category = _this$props6.category,
	          className = _this$props6.className,
	          fluid = _this$props6.fluid,
	          loading = _this$props6.loading,
	          size$$1 = _this$props6.size; // Classes

	      var classes = classNames('ui', open && 'active visible', size$$1, searchClasses, useKeyOnly(category, 'category'), useKeyOnly(focus, 'focus'), useKeyOnly(fluid, 'fluid'), useKeyOnly(loading, 'loading'), useValueAndKey(aligned, 'aligned'), 'search', className);
	      var unhandled = getUnhandledProps(Search, this.props);
	      var ElementType = getElementType(Search, this.props);

	      var _partitionHTMLProps = partitionHTMLProps(unhandled, {
	        htmlProps: htmlInputAttrs
	      }),
	          _partitionHTMLProps2 = slicedToArray(_partitionHTMLProps, 2),
	          htmlInputProps$$1 = _partitionHTMLProps2[0],
	          rest$$1 = _partitionHTMLProps2[1];

	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes,
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onMouseDown: this.handleMouseDown
	      }), this.renderSearchInput(htmlInputProps$$1), this.renderResultsMenu());
	    }
	  }]);

	  return Search;
	}(AutoControlledComponent);

	defineProperty(Search, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,
	  // ------------------------------------
	  // Behavior
	  // ------------------------------------

	  /** Initial value of open. */
	  defaultOpen: propTypes.bool,

	  /** Initial value. */
	  defaultValue: propTypes.string,

	  /** Shorthand for Icon. */
	  icon: propTypes.oneOfType([propTypes.node, propTypes.object]),

	  /** Minimum characters to query for results */
	  minCharacters: propTypes.number,

	  /** Additional text for "No Results" message with less emphasis. */
	  noResultsDescription: propTypes.node,

	  /** Message to display when there are no results. */
	  noResultsMessage: propTypes.node,

	  /** Controls whether or not the results menu is displayed. */
	  open: propTypes.bool,

	  /**
	   * One of:
	   * - array of Search.Result props e.g. `{ title: '', description: '' }` or
	   * - object of categories e.g. `{ name: '', results: [{ title: '', description: '' }]`
	   */
	  results: propTypes.oneOfType([propTypes.arrayOf(propTypes.shape(SearchResult.propTypes)), propTypes.shape(SearchCategory.propTypes)]),

	  /** Whether the search should automatically select the first result after searching. */
	  selectFirstResult: propTypes.bool,

	  /** Whether a "no results" message should be shown if no results are found. */
	  showNoResults: propTypes.bool,

	  /** Current value of the search input. Creates a controlled component. */
	  value: propTypes.string,
	  // ------------------------------------
	  // Rendering
	  // ------------------------------------

	  /**
	   * Renders the SearchCategory contents.
	   *
	   * @param {object} props - The SearchCategory props object.
	   * @returns {*} - Renderable SearchCategory contents.
	   */
	  categoryRenderer: propTypes.func,

	  /**
	   * Renders the SearchResult contents.
	   *
	   * @param {object} props - The SearchResult props object.
	   * @returns {*} - Renderable SearchResult contents.
	   */
	  resultRenderer: propTypes.func,
	  // ------------------------------------
	  // Callbacks
	  // ------------------------------------

	  /**
	   * Called on blur.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBlur: propTypes.func,

	  /**
	   * Called on focus.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onFocus: propTypes.func,

	  /**
	   * Called on mousedown.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseDown: propTypes.func,

	  /**
	   * Called when a result is selected.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onResultSelect: propTypes.func,

	  /**
	   * Called on search input change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props, includes current value of search input.
	   */
	  onSearchChange: propTypes.func,

	  /**
	   * Called when the active selection index is changed.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onSelectionChange: propTypes.func,
	  // ------------------------------------
	  // Style
	  // ------------------------------------

	  /** A search can have its results aligned to its left or right container edge. */
	  aligned: propTypes.string,

	  /** A search can display results from remote content ordered by categories. */
	  category: propTypes.bool,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A search can have its results take up the width of its container. */
	  fluid: propTypes.bool,

	  /** A search input can take up the width of its container. */
	  input: itemShorthand,

	  /** A search can show a loading indicator. */
	  loading: propTypes.bool,

	  /** A search can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium'))
	});

	defineProperty(Search, "defaultProps", {
	  icon: 'search',
	  input: 'text',
	  minCharacters: 1,
	  noResultsMessage: 'No results found.',
	  showNoResults: true
	});

	defineProperty(Search, "autoControlledProps", ['open', 'value']);

	defineProperty(Search, "Category", SearchCategory);

	defineProperty(Search, "Result", SearchResult);

	defineProperty(Search, "Results", SearchResults);

	/**
	 * A pushable sub-component for Sidebar.
	 */

	function SidebarPushable(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames('pushable', className);
	  var rest = getUnhandledProps(SidebarPushable, props);
	  var ElementType = getElementType(SidebarPushable, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	SidebarPushable.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A pushable sub-component for Sidebar.
	 */

	function SidebarPusher(props) {
	  var className = props.className,
	      dimmed = props.dimmed,
	      children = props.children,
	      content = props.content;
	  var classes = classNames('pusher', useKeyOnly(dimmed, 'dimmed'), className);
	  var rest = getUnhandledProps(SidebarPusher, props);
	  var ElementType = getElementType(SidebarPusher, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	SidebarPusher.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Controls whether or not the dim is displayed. */
	  dimmed: propTypes.bool
	};

	/**
	 * A sidebar hides additional content beside a page.
	 */

	var Sidebar =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Sidebar, _Component);

	  function Sidebar() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Sidebar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Sidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "state", {});

	    defineProperty(assertThisInitialized(_this), "ref", React.createRef());

	    defineProperty(assertThisInitialized(_this), "handleAnimationStart", function () {
	      var visible = _this.props.visible;
	      var callback = visible ? 'onVisible' : 'onHide';

	      _this.setState({
	        animating: true
	      }, function () {
	        clearTimeout(_this.animationTimer);
	        _this.animationTimer = setTimeout(_this.handleAnimationEnd, Sidebar.animationDuration);

	        if (_this.skipNextCallback) {
	          _this.skipNextCallback = false;
	          return;
	        }

	        lodash.invoke(_this.props, callback, null, _this.props);
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "handleAnimationEnd", function () {
	      var visible = _this.props.visible;
	      var callback = visible ? 'onShow' : 'onHidden';

	      _this.setState({
	        animating: false
	      });

	      lodash.invoke(_this.props, callback, null, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "handleDocumentClick", function (e) {
	      if (!doesNodeContainClick(_this.ref.current, e)) {
	        _this.skipNextCallback = true;

	        lodash.invoke(_this.props, 'onHide', e, objectSpread({}, _this.props, {
	          visible: false
	        }));
	      }
	    });

	    return _this;
	  }

	  createClass(Sidebar, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var prevVisible = prevProps.visible;
	      var currentVisible = this.props.visible;
	      if (prevVisible !== currentVisible) this.handleAnimationStart();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      clearTimeout(this.animationTimer);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          animation = _this$props.animation,
	          className = _this$props.className,
	          children = _this$props.children,
	          content = _this$props.content,
	          direction = _this$props.direction,
	          target = _this$props.target,
	          visible = _this$props.visible,
	          width = _this$props.width;
	      var animating = this.state.animating;
	      var classes = classNames('ui', animation, direction, width, useKeyOnly(animating, 'animating'), useKeyOnly(visible, 'visible'), 'sidebar', className);
	      var rest$$1 = getUnhandledProps(Sidebar, this.props);
	      var ElementType = getElementType(Sidebar, this.props);
	      return React__default.createElement(Ref, {
	        innerRef: this.ref
	      }, React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: classes
	      }), isNil$1(children) ? content : children, visible && React__default.createElement(lib, {
	        name: "click",
	        on: this.handleDocumentClick,
	        target: target
	      })));
	    }
	  }]);

	  return Sidebar;
	}(React.Component);

	defineProperty(Sidebar, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Animation style. */
	  animation: propTypes.oneOf(['overlay', 'push', 'scale down', 'uncover', 'slide out', 'slide along']),

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Direction the sidebar should appear on. */
	  direction: propTypes.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * Called before a sidebar begins to animate out.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onHide: propTypes.func,

	  /**
	   * Called after a sidebar has finished animating out.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onHidden: propTypes.func,

	  /**
	   * Called when a sidebar has finished animating in.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onShow: propTypes.func,

	  /**
	   * Called when a sidebar begins animating in.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onVisible: propTypes.func,

	  /** A sidebar can handle clicks on the passed element. */
	  target: propTypes.oneOfType([domNode, refObject]),

	  /** Controls whether or not the sidebar is visible on the page. */
	  visible: propTypes.bool,

	  /** Sidebar width. */
	  width: propTypes.oneOf(['very thin', 'thin', 'wide', 'very wide'])
	});

	defineProperty(Sidebar, "defaultProps", {
	  direction: 'left'
	});

	defineProperty(Sidebar, "animationDuration", 500);

	defineProperty(Sidebar, "autoControlledProps", ['visible']);

	defineProperty(Sidebar, "Pushable", SidebarPushable);

	defineProperty(Sidebar, "Pusher", SidebarPusher);

	/**
	 * Sticky content stays fixed to the browser viewport while another column of content is visible on the page.
	 */

	var Sticky =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Sticky, _Component);

	  function Sticky() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Sticky);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Sticky)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "state", {
	      sticky: false
	    });

	    defineProperty(assertThisInitialized(_this), "stickyRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "triggerRef", React.createRef());

	    defineProperty(assertThisInitialized(_this), "addListeners", function (props) {
	      var scrollContext = props.scrollContext;
	      var scrollContextNode = isRefObject$1(scrollContext) ? scrollContext.current : scrollContext;

	      if (scrollContextNode) {
	        instance$1.sub('resize', _this.handleUpdate, {
	          target: scrollContextNode
	        });
	        instance$1.sub('scroll', _this.handleUpdate, {
	          target: scrollContextNode
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "removeListeners", function () {
	      var scrollContext = _this.props.scrollContext;
	      var scrollContextNode = isRefObject$1(scrollContext) ? scrollContext.current : scrollContext;

	      if (scrollContextNode) {
	        instance$1.unsub('resize', _this.handleUpdate, {
	          target: scrollContextNode
	        });
	        instance$1.unsub('scroll', _this.handleUpdate, {
	          target: scrollContextNode
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "update", function (e) {
	      var pushing = _this.state.pushing;
	      _this.ticking = false;

	      _this.assignRects();

	      if (pushing) {
	        if (_this.didReachStartingPoint()) return _this.stickToContextTop(e);
	        if (_this.didTouchScreenBottom()) return _this.stickToScreenBottom(e);
	        return _this.stickToContextBottom(e);
	      }

	      if (_this.isOversized()) {
	        if (_this.contextRect.top > 0) return _this.stickToContextTop(e);
	        if (_this.contextRect.bottom < window.innerHeight) return _this.stickToContextBottom(e);
	      }

	      if (_this.didTouchScreenTop()) {
	        if (_this.didReachContextBottom()) return _this.stickToContextBottom(e);
	        return _this.stickToScreenTop(e);
	      }

	      return _this.stickToContextTop(e);
	    });

	    defineProperty(assertThisInitialized(_this), "handleUpdate", function (e) {
	      if (!_this.ticking) {
	        _this.ticking = true;
	        _this.frameId = requestAnimationFrame(function () {
	          return _this.update(e);
	        });
	      }
	    });

	    defineProperty(assertThisInitialized(_this), "assignRects", function () {
	      var context = _this.props.context;
	      var contextNode = isRefObject$1(context) ? context.current : context || document.body;
	      _this.triggerRect = _this.triggerRef.current.getBoundingClientRect();
	      _this.contextRect = contextNode.getBoundingClientRect();
	      _this.stickyRect = _this.stickyRef.current.getBoundingClientRect();
	    });

	    defineProperty(assertThisInitialized(_this), "didReachContextBottom", function () {
	      var offset = _this.props.offset;
	      return _this.stickyRect.height + offset >= _this.contextRect.bottom;
	    });

	    defineProperty(assertThisInitialized(_this), "didReachStartingPoint", function () {
	      return _this.stickyRect.top <= _this.triggerRect.top;
	    });

	    defineProperty(assertThisInitialized(_this), "didTouchScreenTop", function () {
	      return _this.triggerRect.top < _this.props.offset;
	    });

	    defineProperty(assertThisInitialized(_this), "didTouchScreenBottom", function () {
	      var bottomOffset = _this.props.bottomOffset;
	      return _this.contextRect.bottom + bottomOffset > window.innerHeight;
	    });

	    defineProperty(assertThisInitialized(_this), "isOversized", function () {
	      return _this.stickyRect.height > window.innerHeight;
	    });

	    defineProperty(assertThisInitialized(_this), "pushing", function (pushing) {
	      var possible = _this.props.pushing;
	      if (possible) _this.setState({
	        pushing: pushing
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "stick", function (e, bound) {
	      _this.setState({
	        bound: bound,
	        sticky: true
	      });

	      lodash.invoke(_this.props, 'onStick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "unstick", function (e, bound) {
	      _this.setState({
	        bound: bound,
	        sticky: false
	      });

	      lodash.invoke(_this.props, 'onUnstick', e, _this.props);
	    });

	    defineProperty(assertThisInitialized(_this), "stickToContextBottom", function (e) {
	      lodash.invoke(_this.props, 'onBottom', e, _this.props);

	      _this.stick(e, true);

	      _this.pushing(true);
	    });

	    defineProperty(assertThisInitialized(_this), "stickToContextTop", function (e) {
	      lodash.invoke(_this.props, 'onTop', e, _this.props);

	      _this.unstick(e, false);

	      _this.pushing(false);
	    });

	    defineProperty(assertThisInitialized(_this), "stickToScreenBottom", function (e) {
	      var bottom = _this.props.bottomOffset;

	      _this.stick(e, false);

	      _this.setState({
	        bottom: bottom,
	        top: null
	      });
	    });

	    defineProperty(assertThisInitialized(_this), "stickToScreenTop", function (e) {
	      var top = _this.props.offset;

	      _this.stick(e, false);

	      _this.setState({
	        top: top,
	        bottom: null
	      });
	    });

	    return _this;
	  }

	  createClass(Sticky, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (!isBrowser()) return;
	      var active = this.props.active;

	      if (active) {
	        this.handleUpdate();
	        this.addListeners(this.props);
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          current = _this$props.active,
	          currentScrollContext = _this$props.scrollContext;
	      var next = nextProps.active,
	          nextScrollContext = nextProps.scrollContext;

	      if (current === next) {
	        if (currentScrollContext !== nextScrollContext) {
	          this.removeListeners();
	          this.addListeners(nextProps);
	        }

	        return;
	      }

	      if (next) {
	        this.handleUpdate();
	        this.addListeners(nextProps);
	        return;
	      }

	      this.removeListeners();
	      this.setState({
	        sticky: false
	      });
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (!isBrowser()) return;
	      var active = this.props.active;

	      if (active) {
	        this.removeListeners();
	        cancelAnimationFrame(this.frameId);
	      }
	    } // ----------------------------------------
	    // Events
	    // ----------------------------------------

	  }, {
	    key: "computeStyle",
	    value: function computeStyle() {
	      var styleElement = this.props.styleElement;
	      var _this$state = this.state,
	          bottom = _this$state.bottom,
	          bound = _this$state.bound,
	          sticky = _this$state.sticky,
	          top = _this$state.top;
	      if (!sticky) return styleElement;
	      return objectSpread({
	        bottom: bound ? 0 : bottom,
	        top: bound ? undefined : top,
	        width: this.triggerRect.width
	      }, styleElement);
	    } // Return true when the component reached the bottom of the context

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          className = _this$props2.className;
	      var _this$state2 = this.state,
	          bottom = _this$state2.bottom,
	          bound = _this$state2.bound,
	          sticky = _this$state2.sticky;
	      var rest$$1 = getUnhandledProps(Sticky, this.props);
	      var ElementType = getElementType(Sticky, this.props);
	      var containerClasses = classNames(sticky && 'ui', sticky && 'stuck-container', sticky && (bound ? 'bound-container' : 'fixed-container'), className);
	      var elementClasses = classNames('ui', sticky && (bound ? 'bound bottom' : 'fixed'), sticky && !bound && (bottom === null ? 'top' : 'bottom'), 'sticky');
	      return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	        className: containerClasses
	      }), React__default.createElement("div", {
	        ref: this.triggerRef
	      }), React__default.createElement("div", {
	        className: elementClasses,
	        ref: this.stickyRef,
	        style: this.computeStyle()
	      }, children));
	    }
	  }]);

	  return Sticky;
	}(React.Component);

	defineProperty(Sticky, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A Sticky can be active. */
	  active: propTypes.bool,

	  /** Offset in pixels from the bottom of the screen when fixing element to viewport. */
	  bottomOffset: propTypes.number,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Context which sticky element should stick to. */
	  context: propTypes.oneOfType([domNode, refObject]),

	  /** Offset in pixels from the top of the screen when fixing element to viewport. */
	  offset: propTypes.number,

	  /**
	   * Callback when element is bound to bottom of parent container.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBottom: propTypes.func,

	  /**
	   * Callback when element is fixed to page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onStick: propTypes.func,

	  /**
	   * Callback when element is bound to top of parent container.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onTop: propTypes.func,

	  /**
	   * Callback when element is unfixed from page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onUnstick: propTypes.func,

	  /** Whether element should be "pushed" by the viewport, attaching to the bottom of the screen when scrolling up. */
	  pushing: propTypes.bool,

	  /** Context which sticky should attach onscroll events. */
	  scrollContext: propTypes.oneOfType([domNode, refObject]),

	  /** Custom style for sticky element. */
	  styleElement: propTypes.object
	});

	defineProperty(Sticky, "defaultProps", {
	  active: true,
	  bottomOffset: 0,
	  offset: 0,
	  scrollContext: isBrowser() ? window : null
	});

	/**
	 * A tab pane holds the content of a tab.
	 */

	function TabPane(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      loading = props.loading;
	  var classes = classNames(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className);
	  var rest = getUnhandledProps(TabPane, props);
	  var ElementType = getElementType(TabPane, props);
	  var calculatedDefaultProps = {};

	  if (ElementType === Segment) {
	    calculatedDefaultProps.attached = 'bottom';
	  }

	  return React__default.createElement(ElementType, _extends_1({}, calculatedDefaultProps, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	TabPane.defaultProps = {
	  as: Segment,
	  active: true
	};
	TabPane.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A tab pane can be active. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A Tab.Pane can display a loading indicator. */
	  loading: propTypes.bool
	};
	TabPane.create = createShorthandFactory(TabPane, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A Tab is a hidden section of content activated by a Menu.
	 * @see Menu
	 * @see Segment
	 */

	var Tab =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Tab, _Component);

	  function Tab() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Tab);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Tab)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleItemClick", function (e, _ref) {
	      var index = _ref.index;

	      lodash.invoke(_this.props, 'onTabChange', e, objectSpread({}, _this.props, {
	        activeIndex: index
	      }));

	      _this.trySetState({
	        activeIndex: index
	      });
	    });

	    return _this;
	  }

	  createClass(Tab, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState() {
	      return {
	        activeIndex: 0
	      };
	    }
	  }, {
	    key: "renderItems",
	    value: function renderItems() {
	      var _this$props = this.props,
	          panes = _this$props.panes,
	          renderActiveOnly = _this$props.renderActiveOnly;
	      var activeIndex = this.state.activeIndex;
	      if (renderActiveOnly) return lodash.invoke(lodash.get(panes, "[".concat(activeIndex, "]")), 'render', this.props);
	      return lodash.map(panes, function (_ref2, index) {
	        var pane = _ref2.pane;
	        return TabPane.create(pane, {
	          overrideProps: {
	            active: index === activeIndex
	          }
	        });
	      });
	    }
	  }, {
	    key: "renderMenu",
	    value: function renderMenu() {
	      var _this$props2 = this.props,
	          menu = _this$props2.menu,
	          panes = _this$props2.panes,
	          menuPosition = _this$props2.menuPosition;
	      var activeIndex = this.state.activeIndex;

	      if (menu.tabular === true && menuPosition === 'right') {
	        menu.tabular = 'right';
	      }

	      return Menu.create(menu, {
	        autoGenerateKey: false,
	        overrideProps: {
	          items: lodash.map(panes, 'menuItem'),
	          onItemClick: this.handleItemClick,
	          activeIndex: activeIndex
	        }
	      });
	    }
	  }, {
	    key: "renderVertical",
	    value: function renderVertical(menu) {
	      var _this$props3 = this.props,
	          grid = _this$props3.grid,
	          menuPosition = _this$props3.menuPosition;

	      var paneWidth = grid.paneWidth,
	          tabWidth = grid.tabWidth,
	          gridProps = objectWithoutProperties(grid, ["paneWidth", "tabWidth"]);

	      var position = menuPosition || menu.props.tabular === 'right' && 'right' || 'left';
	      return React__default.createElement(Grid, gridProps, position === 'left' && GridColumn.create({
	        width: tabWidth,
	        children: menu
	      }, {
	        autoGenerateKey: false
	      }), GridColumn.create({
	        width: paneWidth,
	        children: this.renderItems(),
	        stretched: true
	      }, {
	        autoGenerateKey: false
	      }), position === 'right' && GridColumn.create({
	        width: tabWidth,
	        children: menu
	      }, {
	        autoGenerateKey: false
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var menu = this.renderMenu();
	      var rest$$1 = getUnhandledProps(Tab, this.props);
	      var ElementType = getElementType(Tab, this.props);

	      if (menu.props.vertical) {
	        return React__default.createElement(ElementType, rest$$1, this.renderVertical(menu));
	      }

	      return React__default.createElement(ElementType, rest$$1, menu.props.attached !== 'bottom' && menu, this.renderItems(), menu.props.attached === 'bottom' && menu);
	    }
	  }]);

	  return Tab;
	}(AutoControlledComponent);

	defineProperty(Tab, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** The initial activeIndex. */
	  defaultActiveIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /** Index of the currently active tab. */
	  activeIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Shorthand props for the Menu.
	   * tabular, if true, will derive final value from `menuPosition`, otherwise set 'left' or 'right' explicitly.
	   */
	  menu: propTypes.object,

	  /** Align vertical menu */
	  menuPosition: propTypes.oneOf(['left', 'right']),

	  /** Shorthand props for the Grid. */
	  grid: propTypes.object,

	  /**
	   * Called on tab change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed new activeIndex.
	   * @param {object} data.activeIndex - The new proposed activeIndex.
	   */
	  onTabChange: propTypes.func,

	  /**
	   * Array of objects describing each Menu.Item and Tab.Pane:
	   * { menuItem: 'Home', render: () => <Tab.Pane /> }
	   * or
	   * { menuItem: 'Home', pane: 'Welcome' }
	   */
	  panes: propTypes.arrayOf(propTypes.shape({
	    menuItem: itemShorthand,
	    pane: itemShorthand,
	    render: propTypes.func
	  })),

	  /** A Tab can render only active pane. */
	  renderActiveOnly: propTypes.bool
	});

	defineProperty(Tab, "autoControlledProps", ['activeIndex']);

	defineProperty(Tab, "defaultProps", {
	  grid: {
	    paneWidth: 12,
	    tabWidth: 4
	  },
	  menu: {
	    attached: true,
	    tabular: true
	  },
	  renderActiveOnly: true
	});

	defineProperty(Tab, "Pane", TabPane);

	/**
	 * An ad displays third-party promotional content.
	 */

	function Advertisement(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      test = props.test,
	      unit = props.unit;
	  var classes = classNames('ui', unit, useKeyOnly(centered, 'centered'), useKeyOnly(test, 'test'), 'ad', className);
	  var rest = getUnhandledProps(Advertisement, props);
	  var ElementType = getElementType(Advertisement, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes,
	    "data-text": test
	  }), isNil$1(children) ? content : children);
	}

	Advertisement.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Center the advertisement. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Text to be displayed on the advertisement. */
	  test: propTypes.oneOfType([propTypes.bool, propTypes.number, propTypes.string]),

	  /** Varies the size of the advertisement. */
	  unit: propTypes.oneOf(['medium rectangle', 'large rectangle', 'vertical rectangle', 'small rectangle', 'mobile banner', 'banner', 'vertical banner', 'top banner', 'half banner', 'button', 'square button', 'small button', 'skyscraper', 'wide skyscraper', 'leaderboard', 'large leaderboard', 'mobile leaderboard', 'billboard', 'panorama', 'netboard', 'half page', 'square', 'small square']).isRequired
	};

	/**
	 * A card can contain a description with one or more paragraphs.
	 */

	function CardDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = classNames(useTextAlignProp(textAlign), 'description', className);
	  var rest$$1 = getUnhandledProps(CardDescription, props);
	  var ElementType = getElementType(CardDescription, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CardDescription.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A card content can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified'))
	};

	/**
	 * A card can contain a header.
	 */

	function CardHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = classNames(useTextAlignProp(textAlign), 'header', className);
	  var rest$$1 = getUnhandledProps(CardHeader, props);
	  var ElementType = getElementType(CardHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CardHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A card header can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified'))
	};

	/**
	 * A card can contain content metadata.
	 */

	function CardMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = classNames(useTextAlignProp(textAlign), 'meta', className);
	  var rest$$1 = getUnhandledProps(CardMeta, props);
	  var ElementType = getElementType(CardMeta, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CardMeta.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A card meta can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified'))
	};

	/**
	 * A card can contain blocks of content or extra content meant to be formatted separately from the main content.
	 */

	function CardContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      meta = props.meta,
	      textAlign = props.textAlign;
	  var classes = classNames(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);
	  var rest$$1 = getUnhandledProps(CardContent, props);
	  var ElementType = getElementType(CardContent, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), createShorthand(CardHeader, function (val) {
	    return {
	      content: val
	    };
	  }, header, {
	    autoGenerateKey: false
	  }), createShorthand(CardMeta, function (val) {
	    return {
	      content: val
	    };
	  }, meta, {
	    autoGenerateKey: false
	  }), createShorthand(CardDescription, function (val) {
	    return {
	      content: val
	    };
	  }, description, {
	    autoGenerateKey: false
	  }));
	}

	CardContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for CardDescription. */
	  description: itemShorthand,

	  /** A card can contain extra content meant to be formatted separately from the main content. */
	  extra: propTypes.bool,

	  /** Shorthand for CardHeader. */
	  header: itemShorthand,

	  /** Shorthand for CardMeta. */
	  meta: itemShorthand,

	  /** A card content can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified'))
	};

	/**
	 * A group of cards.
	 */

	function CardGroup(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      doubling = props.doubling,
	      items = props.items,
	      itemsPerRow = props.itemsPerRow,
	      stackable = props.stackable,
	      textAlign = props.textAlign;
	  var classes = classNames('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);
	  var rest$$1 = getUnhandledProps(CardGroup, props);
	  var ElementType = getElementType(CardGroup, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  var itemsJSX = lodash.map(items, function (item) {
	    var key = item.key || [item.header, item.description].join('-');
	    return React__default.createElement(Card, _extends_1({
	      key: key
	    }, item));
	  });

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), itemsJSX);
	}

	CardGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A group of cards can center itself inside its container. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A group of cards can double its column width for mobile. */
	  doubling: propTypes.bool,

	  /** Shorthand array of props for Card. */
	  items: collectionShorthand,

	  /** A group of cards can set how many cards should exist in a row. */
	  itemsPerRow: propTypes.oneOf(WIDTHS),

	  /** A group of cards can automatically stack rows to a single columns on mobile devices. */
	  stackable: propTypes.bool,

	  /** A card group can adjust its text alignment. */
	  textAlign: propTypes.oneOf(lodash.without(TEXT_ALIGNMENTS, 'justified'))
	};

	/**
	 * A card displays site content in a manner similar to a playing card.
	 */

	var Card =
	/*#__PURE__*/
	function (_Component) {
	  inherits(Card, _Component);

	  function Card() {
	    var _getPrototypeOf2;

	    var _this;

	    classCallCheck(this, Card);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    defineProperty(assertThisInitialized(_this), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });

	    return _this;
	  }

	  createClass(Card, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          centered = _this$props.centered,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          description = _this$props.description,
	          extra = _this$props.extra,
	          fluid = _this$props.fluid,
	          header = _this$props.header,
	          href = _this$props.href,
	          image = _this$props.image,
	          link = _this$props.link,
	          meta = _this$props.meta,
	          onClick = _this$props.onClick,
	          raised = _this$props.raised;
	      var classes = classNames('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);
	      var rest = getUnhandledProps(Card, this.props);
	      var ElementType = getElementType(Card, this.props, function () {
	        if (onClick) return 'a';
	      });

	      if (!isNil$1(children)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), children);
	      }

	      if (!isNil$1(content)) {
	        return React__default.createElement(ElementType, _extends_1({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), content);
	      }

	      return React__default.createElement(ElementType, _extends_1({}, rest, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), Image.create(image, {
	        autoGenerateKey: false
	      }), (description || header || meta) && React__default.createElement(CardContent, {
	        description: description,
	        header: header,
	        meta: meta
	      }), extra && React__default.createElement(CardContent, {
	        extra: true
	      }, extra));
	    }
	  }]);

	  return Card;
	}(React.Component);

	defineProperty(Card, "propTypes", {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** A Card can center itself inside its container. */
	  centered: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A Card can be formatted to display different colors. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for CardDescription. */
	  description: itemShorthand,

	  /** Shorthand for primary content of CardContent. */
	  extra: contentShorthand,

	  /** A Card can be formatted to take up the width of its container. */
	  fluid: propTypes.bool,

	  /** Shorthand for CardHeader. */
	  header: itemShorthand,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: propTypes.string,

	  /** A card can contain an Image component. */
	  image: itemShorthand,

	  /** A card can be formatted to link to other content. */
	  link: propTypes.bool,

	  /** Shorthand for CardMeta. */
	  meta: itemShorthand,

	  /**
	   * Called on click. When passed, the component renders as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: propTypes.func,

	  /** A Card can be formatted to raise above the page. */
	  raised: propTypes.bool
	});

	defineProperty(Card, "Content", CardContent);

	defineProperty(Card, "Description", CardDescription);

	defineProperty(Card, "Group", CardGroup);

	defineProperty(Card, "Header", CardHeader);

	defineProperty(Card, "Meta", CardMeta);

	/**
	 * A comment can contain an action.
	 */

	function CommentAction(props) {
	  var active = props.active,
	      className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames(useKeyOnly(active, 'active'), className);
	  var rest = getUnhandledProps(CommentAction, props);
	  var ElementType = getElementType(CommentAction, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentAction.defaultProps = {
	  as: 'a'
	};
	CommentAction.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Style as the currently active action. */
	  active: propTypes.bool,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A comment can contain an list of actions a user may perform related to this comment.
	 */

	function CommentActions(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames('actions', className);
	  var rest = getUnhandledProps(CommentActions, props);
	  var ElementType = getElementType(CommentActions, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentActions.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A comment can contain an author.
	 */

	function CommentAuthor(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames('author', className);
	  var rest = getUnhandledProps(CommentAuthor, props);
	  var ElementType = getElementType(CommentAuthor, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentAuthor.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A comment can contain an image or avatar.
	 */

	function CommentAvatar(props) {
	  var className = props.className,
	      src = props.src;
	  var classes = classNames('avatar', className);
	  var rest = getUnhandledProps(CommentAvatar, props);

	  var _partitionHTMLProps = partitionHTMLProps(rest, {
	    htmlProps: htmlImageProps
	  }),
	      _partitionHTMLProps2 = slicedToArray(_partitionHTMLProps, 2),
	      imageProps = _partitionHTMLProps2[0],
	      rootProps = _partitionHTMLProps2[1];

	  var ElementType = getElementType(CommentAvatar, props);
	  return React__default.createElement(ElementType, _extends_1({}, rootProps, {
	    className: classes
	  }), createHTMLImage(src, {
	    autoGenerateKey: false,
	    defaultProps: imageProps
	  }));
	}

	CommentAvatar.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Specifies the URL of the image. */
	  src: propTypes.string
	};

	/**
	 * A comment can contain content.
	 */

	function CommentContent(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames(className, 'content');
	  var rest = getUnhandledProps(CommentContent, props);
	  var ElementType = getElementType(CommentContent, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * Comments can be grouped.
	 */

	function CommentGroup(props) {
	  var className = props.className,
	      children = props.children,
	      collapsed = props.collapsed,
	      content = props.content,
	      minimal = props.minimal,
	      size$$1 = props.size,
	      threaded = props.threaded;
	  var classes = classNames('ui', size$$1, useKeyOnly(collapsed, 'collapsed'), useKeyOnly(minimal, 'minimal'), useKeyOnly(threaded, 'threaded'), 'comments', className);
	  var rest$$1 = getUnhandledProps(CommentGroup, props);
	  var ElementType = getElementType(CommentGroup, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Comments can be collapsed, or hidden from view. */
	  collapsed: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Comments can hide extra information unless a user shows intent to interact with a comment. */
	  minimal: propTypes.bool,

	  /** Comments can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'medium')),

	  /** A comment list can be threaded to showing the relationship between conversations. */
	  threaded: propTypes.bool
	};

	/**
	 * A comment can contain metadata about the comment, an arbitrary amount of metadata may be defined.
	 */

	function CommentMetadata(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames('metadata', className);
	  var rest = getUnhandledProps(CommentMetadata, props);
	  var ElementType = getElementType(CommentMetadata, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentMetadata.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A comment can contain text.
	 */

	function CommentText(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = classNames(className, 'text');
	  var rest = getUnhandledProps(CommentText, props);
	  var ElementType = getElementType(CommentText, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	CommentText.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A comment displays user feedback to site content.
	 */

	function Comment(props) {
	  var className = props.className,
	      children = props.children,
	      collapsed = props.collapsed,
	      content = props.content;
	  var classes = classNames(useKeyOnly(collapsed, 'collapsed'), 'comment', className);
	  var rest = getUnhandledProps(Comment, props);
	  var ElementType = getElementType(Comment, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	Comment.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Comment can be collapsed, or hidden from view. */
	  collapsed: propTypes.bool,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	Comment.Author = CommentAuthor;
	Comment.Action = CommentAction;
	Comment.Actions = CommentActions;
	Comment.Avatar = CommentAvatar;
	Comment.Content = CommentContent;
	Comment.Group = CommentGroup;
	Comment.Metadata = CommentMetadata;
	Comment.Text = CommentText;

	/**
	 * An event or an event summary can contain a date.
	 */

	function FeedDate(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('date', className);
	  var rest = getUnhandledProps(FeedDate, props);
	  var ElementType = getElementType(FeedDate, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	FeedDate.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};

	/**
	 * A feed can contain an extra content.
	 */

	function FeedExtra(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      images = props.images,
	      text = props.text;
	  var classes = classNames(useKeyOnly(images, 'images'), useKeyOnly(content || text, 'text'), 'extra', className);
	  var rest$$1 = getUnhandledProps(FeedExtra, props);
	  var ElementType = getElementType(FeedExtra, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  } // TODO need a "collection factory" to handle creating multiple image elements and their keys


	  var imageElements = lodash.map(images, function (image, index) {
	    var key = [index, image].join('-');
	    return createHTMLImage(image, {
	      key: key
	    });
	  });

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), content, imageElements);
	}

	FeedExtra.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** An event can contain additional information like a set of images. */
	  images: every$1([disallow(['text']), propTypes.oneOfType([propTypes.bool, collectionShorthand])]),

	  /** An event can contain additional text information. */
	  text: propTypes.bool
	};

	/**
	 * A feed can contain a like element.
	 */

	function FeedLike(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = classNames('like', className);
	  var rest = getUnhandledProps(FeedLike, props);
	  var ElementType = getElementType(FeedLike, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), Icon.create(icon, {
	    autoGenerateKey: false
	  }), content);
	}

	FeedLike.defaultProps = {
	  as: 'a'
	};
	FeedLike.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for icon. Mutually exclusive with children. */
	  icon: itemShorthand
	};

	/**
	 * A feed can contain a meta.
	 */

	function FeedMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      like = props.like;
	  var classes = classNames('meta', className);
	  var rest = getUnhandledProps(FeedMeta, props);
	  var ElementType = getElementType(FeedMeta, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), createShorthand(FeedLike, function (val) {
	    return {
	      content: val
	    };
	  }, like, {
	    autoGenerateKey: false
	  }), content);
	}

	FeedMeta.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for FeedLike. */
	  like: itemShorthand
	};

	/**
	 * A feed can contain a user element.
	 */

	function FeedUser(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('user', className);
	  var rest = getUnhandledProps(FeedUser, props);
	  var ElementType = getElementType(FeedUser, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	FeedUser.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	FeedUser.defaultProps = {
	  as: 'a'
	};

	/**
	 * A feed can contain a summary.
	 */

	function FeedSummary(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      date = props.date,
	      user = props.user;
	  var classes = classNames('summary', className);
	  var rest = getUnhandledProps(FeedSummary, props);
	  var ElementType = getElementType(FeedSummary, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), createShorthand(FeedUser, function (val) {
	    return {
	      content: val
	    };
	  }, user, {
	    autoGenerateKey: false
	  }), content, createShorthand(FeedDate, function (val) {
	    return {
	      content: val
	    };
	  }, date, {
	    autoGenerateKey: false
	  }));
	}

	FeedSummary.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for FeedDate. */
	  date: itemShorthand,

	  /** Shorthand for FeedUser. */
	  user: itemShorthand
	};

	function FeedContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      extraImages = props.extraImages,
	      extraText = props.extraText,
	      date = props.date,
	      meta = props.meta,
	      summary = props.summary;
	  var classes = classNames('content', className);
	  var rest = getUnhandledProps(FeedContent, props);
	  var ElementType = getElementType(FeedContent, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), createShorthand(FeedDate, function (val) {
	    return {
	      content: val
	    };
	  }, date, {
	    autoGenerateKey: false
	  }), createShorthand(FeedSummary, function (val) {
	    return {
	      content: val
	    };
	  }, summary, {
	    autoGenerateKey: false
	  }), content, createShorthand(FeedExtra, function (val) {
	    return {
	      text: true,
	      content: val
	    };
	  }, extraText, {
	    autoGenerateKey: false
	  }), createShorthand(FeedExtra, function (val) {
	    return {
	      images: val
	    };
	  }, extraImages, {
	    autoGenerateKey: false
	  }), createShorthand(FeedMeta, function (val) {
	    return {
	      content: val
	    };
	  }, meta, {
	    autoGenerateKey: false
	  }));
	}

	FeedContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** An event can contain a date. */
	  date: itemShorthand,

	  /** Shorthand for FeedExtra with images. */
	  extraImages: FeedExtra.propTypes.images,

	  /** Shorthand for FeedExtra with text. */
	  extraText: itemShorthand,

	  /** Shorthand for FeedMeta. */
	  meta: itemShorthand,

	  /** Shorthand for FeedSummary. */
	  summary: itemShorthand
	};

	/**
	 * An event can contain an image or icon label.
	 */

	function FeedLabel(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon,
	      image = props.image;
	  var classes = classNames('label', className);
	  var rest = getUnhandledProps(FeedLabel, props);
	  var ElementType = getElementType(FeedLabel, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), content, Icon.create(icon, {
	    autoGenerateKey: false
	  }), createHTMLImage(image));
	}

	FeedLabel.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** An event can contain icon label. */
	  icon: itemShorthand,

	  /** An event can contain image label. */
	  image: itemShorthand
	};

	/**
	 * A feed contains an event.
	 */

	function FeedEvent(props) {
	  var content = props.content,
	      children = props.children,
	      className = props.className,
	      date = props.date,
	      extraImages = props.extraImages,
	      extraText = props.extraText,
	      image = props.image,
	      icon = props.icon,
	      meta = props.meta,
	      summary = props.summary;
	  var classes = classNames('event', className);
	  var rest = getUnhandledProps(FeedEvent, props);
	  var ElementType = getElementType(FeedEvent, props);
	  var hasContentProp = content || date || extraImages || extraText || meta || summary;
	  var contentProps = {
	    content: content,
	    date: date,
	    extraImages: extraImages,
	    extraText: extraText,
	    meta: meta,
	    summary: summary
	  };
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), createShorthand(FeedLabel, function (val) {
	    return {
	      icon: val
	    };
	  }, icon, {
	    autoGenerateKey: false
	  }), createShorthand(FeedLabel, function (val) {
	    return {
	      image: val
	    };
	  }, image, {
	    autoGenerateKey: false
	  }), hasContentProp && React__default.createElement(FeedContent, contentProps), children);
	}

	FeedEvent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for FeedContent. */
	  content: itemShorthand,

	  /** Shorthand for FeedDate. */
	  date: itemShorthand,

	  /** Shorthand for FeedExtra with images. */
	  extraImages: itemShorthand,

	  /** Shorthand for FeedExtra with content. */
	  extraText: itemShorthand,

	  /** An event can contain icon label. */
	  icon: itemShorthand,

	  /** An event can contain image label. */
	  image: itemShorthand,

	  /** Shorthand for FeedMeta. */
	  meta: itemShorthand,

	  /** Shorthand for FeedSummary. */
	  summary: itemShorthand
	};

	/**
	 * A feed presents user activity chronologically.
	 */

	function Feed(props) {
	  var children = props.children,
	      className = props.className,
	      events = props.events,
	      size$$1 = props.size;
	  var classes = classNames('ui', size$$1, 'feed', className);
	  var rest$$1 = getUnhandledProps(Feed, props);
	  var ElementType = getElementType(Feed, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  var eventElements = lodash.map(events, function (eventProps) {
	    var childKey = eventProps.childKey,
	        date = eventProps.date,
	        meta = eventProps.meta,
	        summary = eventProps.summary,
	        eventData = objectWithoutProperties(eventProps, ["childKey", "date", "meta", "summary"]);

	    var finalKey = childKey || [date, meta, summary].join('-');
	    return React__default.createElement(FeedEvent, _extends_1({
	      date: date,
	      key: finalKey,
	      meta: meta,
	      summary: summary
	    }, eventData));
	  });

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), eventElements);
	}

	Feed.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand array of props for FeedEvent. */
	  events: collectionShorthand,

	  /** A feed can have different sizes. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive'))
	};
	Feed.Content = FeedContent;
	Feed.Date = FeedDate;
	Feed.Event = FeedEvent;
	Feed.Extra = FeedExtra;
	Feed.Label = FeedLabel;
	Feed.Like = FeedLike;
	Feed.Meta = FeedMeta;
	Feed.Summary = FeedSummary;
	Feed.User = FeedUser;

	/**
	 * An item can contain a header.
	 */

	function ItemHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('header', className);
	  var rest = getUnhandledProps(ItemHeader, props);
	  var ElementType = getElementType(ItemHeader, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ItemHeader.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ItemHeader.create = createShorthandFactory(ItemHeader, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * An item can contain a description with a single or multiple paragraphs.
	 */

	function ItemDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('description', className);
	  var rest = getUnhandledProps(ItemDescription, props);
	  var ElementType = getElementType(ItemDescription, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ItemDescription.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ItemDescription.create = createShorthandFactory(ItemDescription, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * An item can contain extra content meant to be formatted separately from the main content.
	 */

	function ItemExtra(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('extra', className);
	  var rest = getUnhandledProps(ItemExtra, props);
	  var ElementType = getElementType(ItemExtra, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ItemExtra.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ItemExtra.create = createShorthandFactory(ItemExtra, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * An item can contain content metadata.
	 */

	function ItemMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('meta', className);
	  var rest = getUnhandledProps(ItemMeta, props);
	  var ElementType = getElementType(ItemMeta, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	ItemMeta.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	ItemMeta.create = createShorthandFactory(ItemMeta, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * An item can contain content.
	 */

	function ItemContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      meta = props.meta,
	      verticalAlign = props.verticalAlign;
	  var classes = classNames(useVerticalAlignProp(verticalAlign), 'content', className);
	  var rest = getUnhandledProps(ItemContent, props);
	  var ElementType = getElementType(ItemContent, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), ItemHeader.create(header, {
	    autoGenerateKey: false
	  }), ItemMeta.create(meta, {
	    autoGenerateKey: false
	  }), ItemDescription.create(description, {
	    autoGenerateKey: false
	  }), ItemExtra.create(extra, {
	    autoGenerateKey: false
	  }), content);
	}

	ItemContent.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Shorthand for ItemDescription component. */
	  description: itemShorthand,

	  /** Shorthand for ItemExtra component. */
	  extra: itemShorthand,

	  /** Shorthand for ItemHeader component. */
	  header: itemShorthand,

	  /** Shorthand for ItemMeta component. */
	  meta: itemShorthand,

	  /** Content can specify its vertical alignment. */
	  verticalAlign: propTypes.oneOf(VERTICAL_ALIGNMENTS)
	};

	/**
	 * A group of items.
	 */

	function ItemGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      divided = props.divided,
	      items = props.items,
	      link = props.link,
	      relaxed = props.relaxed,
	      unstackable = props.unstackable;
	  var classes = classNames('ui', useKeyOnly(divided, 'divided'), useKeyOnly(link, 'link'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(relaxed, 'relaxed'), 'items', className);
	  var rest$$1 = getUnhandledProps(ItemGroup, props);
	  var ElementType = getElementType(ItemGroup, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  var itemsJSX = lodash.map(items, function (item) {
	    var childKey = item.childKey,
	        itemProps = objectWithoutProperties(item, ["childKey"]);

	    var finalKey = childKey || [itemProps.content, itemProps.description, itemProps.header, itemProps.meta].join('-');
	    return React__default.createElement(Item$1, _extends_1({}, itemProps, {
	      key: finalKey
	    }));
	  });

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), itemsJSX);
	}

	ItemGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Items can be divided to better distinguish between grouped content. */
	  divided: propTypes.bool,

	  /** Shorthand array of props for Item. */
	  items: collectionShorthand,

	  /** An item can be formatted so that the entire contents link to another page. */
	  link: propTypes.bool,

	  /** A group of items can relax its padding to provide more negative space. */
	  relaxed: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['very'])]),

	  /** Prevent items from stacking on mobile. */
	  unstackable: propTypes.bool
	};

	/**
	 * An item can contain an image.
	 */

	function ItemImage(props) {
	  var size = props.size;
	  var rest = getUnhandledProps(ItemImage, props);
	  return React__default.createElement(Image, _extends_1({}, rest, {
	    size: size,
	    ui: !!size,
	    wrapped: true
	  }));
	}

	ItemImage.propTypes = {
	  /** An image may appear at different sizes. */
	  size: Image.propTypes.size
	};
	ItemImage.create = createShorthandFactory(ItemImage, function (src) {
	  return {
	    src: src
	  };
	});

	/**
	 * An item view presents large collections of site content for display.
	 */

	function Item$1(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      image = props.image,
	      meta = props.meta;
	  var classes = classNames('item', className);
	  var rest = getUnhandledProps(Item$1, props);
	  var ElementType = getElementType(Item$1, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest, {
	      className: classes
	    }), children);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), ItemImage.create(image, {
	    autoGenerateKey: false
	  }), React__default.createElement(ItemContent, {
	    content: content,
	    description: description,
	    extra: extra,
	    header: header,
	    meta: meta
	  }));
	}

	Item$1.Content = ItemContent;
	Item$1.Description = ItemDescription;
	Item$1.Extra = ItemExtra;
	Item$1.Group = ItemGroup;
	Item$1.Header = ItemHeader;
	Item$1.Image = ItemImage;
	Item$1.Meta = ItemMeta;
	Item$1.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for ItemContent component. */
	  content: contentShorthand,

	  /** Shorthand for ItemDescription component. */
	  description: itemShorthand,

	  /** Shorthand for ItemExtra component. */
	  extra: itemShorthand,

	  /** Shorthand for ItemHeader component. */
	  header: itemShorthand,

	  /** Shorthand for ItemImage component. */
	  image: itemShorthand,

	  /** Shorthand for ItemMeta component. */
	  meta: itemShorthand
	};

	/**
	 * A group of statistics.
	 */

	function StatisticGroup(props) {
	  var children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      items = props.items,
	      size$$1 = props.size,
	      widths = props.widths;
	  var classes = classNames('ui', color, size$$1, useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useWidthProp(widths), 'statistics', className);
	  var rest$$1 = getUnhandledProps(StatisticGroup, props);
	  var ElementType = getElementType(StatisticGroup, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), lodash.map(items, function (item) {
	    return Statistic.create(item);
	  }));
	}

	StatisticGroup.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A statistic group can be formatted to be different colors. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A statistic group can present its measurement horizontally. */
	  horizontal: propTypes.bool,

	  /** A statistic group can be formatted to fit on a dark background. */
	  inverted: propTypes.bool,

	  /** Array of props for Statistic. */
	  items: collectionShorthand,

	  /** A statistic group can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'big', 'massive', 'medium')),

	  /** A statistic group can have its items divided evenly. */
	  widths: propTypes.oneOf(WIDTHS)
	};

	/**
	 * A statistic can contain a label to help provide context for the presented value.
	 */

	function StatisticLabel(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = classNames('label', className);
	  var rest = getUnhandledProps(StatisticLabel, props);
	  var ElementType = getElementType(StatisticLabel, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	StatisticLabel.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand
	};
	StatisticLabel.create = createShorthandFactory(StatisticLabel, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A statistic can contain a numeric, icon, image, or text value.
	 */

	function StatisticValue(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      text = props.text;
	  var classes = classNames(useKeyOnly(text, 'text'), 'value', className);
	  var rest = getUnhandledProps(StatisticValue, props);
	  var ElementType = getElementType(StatisticValue, props);
	  return React__default.createElement(ElementType, _extends_1({}, rest, {
	    className: classes
	  }), isNil$1(children) ? content : children);
	}

	StatisticValue.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** Format the value with smaller font size to fit nicely beside number values. */
	  text: propTypes.bool
	};
	StatisticValue.create = createShorthandFactory(StatisticValue, function (content) {
	  return {
	    content: content
	  };
	});

	/**
	 * A statistic emphasizes the current value of an attribute.
	 */

	function Statistic(props) {
	  var children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      floated = props.floated,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      label = props.label,
	      size$$1 = props.size,
	      text = props.text,
	      value = props.value;
	  var classes = classNames('ui', color, size$$1, useValueAndKey(floated, 'floated'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), 'statistic', className);
	  var rest$$1 = getUnhandledProps(Statistic, props);
	  var ElementType = getElementType(Statistic, props);

	  if (!isNil$1(children)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), children);
	  }

	  if (!isNil$1(content)) {
	    return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	      className: classes
	    }), content);
	  }

	  return React__default.createElement(ElementType, _extends_1({}, rest$$1, {
	    className: classes
	  }), StatisticValue.create(value, {
	    defaultProps: {
	      text: text
	    },
	    autoGenerateKey: false
	  }), StatisticLabel.create(label, {
	    autoGenerateKey: false
	  }));
	}

	Statistic.propTypes = {
	  /** An element type to render as (string or function). */
	  as: as,

	  /** Primary content. */
	  children: propTypes.node,

	  /** Additional classes. */
	  className: propTypes.string,

	  /** A statistic can be formatted to be different colors. */
	  color: propTypes.oneOf(COLORS),

	  /** Shorthand for primary content. */
	  content: contentShorthand,

	  /** A statistic can sit to the left or right of other content. */
	  floated: propTypes.oneOf(FLOATS),

	  /** A statistic can present its measurement horizontally. */
	  horizontal: propTypes.bool,

	  /** A statistic can be formatted to fit on a dark background. */
	  inverted: propTypes.bool,

	  /** Label content of the Statistic. */
	  label: contentShorthand,

	  /** A statistic can vary in size. */
	  size: propTypes.oneOf(lodash.without(SIZES, 'big', 'massive', 'medium')),

	  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */
	  text: propTypes.bool,

	  /** Value content of the Statistic. */
	  value: contentShorthand
	};
	Statistic.Group = StatisticGroup;
	Statistic.Label = StatisticLabel;
	Statistic.Value = StatisticValue;
	Statistic.create = createShorthandFactory(Statistic, function (content) {
	  return {
	    content: content
	  };
	});

	// Addons

	exports.Confirm = Confirm;
	exports.MountNode = MountNode;
	exports.Pagination = Pagination;
	exports.PaginationItem = PaginationItem;
	exports.Portal = Portal;
	exports.PortalInner = PortalInner;
	exports.Radio = Radio;
	exports.Ref = Ref;
	exports.RefFindNode = RefFindNode;
	exports.RefForward = RefForward;
	exports.Responsive = Responsive;
	exports.Select = Select;
	exports.TextArea = TextArea;
	exports.TransitionablePortal = TransitionablePortal;
	exports.Visibility = Visibility;
	exports.Breadcrumb = Breadcrumb;
	exports.BreadcrumbDivider = BreadcrumbDivider;
	exports.BreadcrumbSection = BreadcrumbSection;
	exports.Form = Form;
	exports.FormButton = FormButton;
	exports.FormCheckbox = FormCheckbox;
	exports.FormDropdown = FormDropdown;
	exports.FormField = FormField;
	exports.FormGroup = FormGroup;
	exports.FormInput = FormInput;
	exports.FormRadio = FormRadio;
	exports.FormSelect = FormSelect;
	exports.FormTextArea = FormTextArea;
	exports.Grid = Grid;
	exports.GridColumn = GridColumn;
	exports.GridRow = GridRow;
	exports.Menu = Menu;
	exports.MenuHeader = MenuHeader;
	exports.MenuItem = MenuItem;
	exports.MenuMenu = MenuMenu;
	exports.Message = Message;
	exports.MessageContent = MessageContent;
	exports.MessageHeader = MessageHeader;
	exports.MessageItem = MessageItem;
	exports.MessageList = MessageList;
	exports.Table = Table;
	exports.TableBody = TableBody;
	exports.TableCell = TableCell;
	exports.TableFooter = TableFooter;
	exports.TableHeader = TableHeader;
	exports.TableHeaderCell = TableHeaderCell;
	exports.TableRow = TableRow;
	exports.Button = Button;
	exports.ButtonContent = ButtonContent;
	exports.ButtonGroup = ButtonGroup;
	exports.ButtonOr = ButtonOr;
	exports.Container = Container;
	exports.Divider = Divider;
	exports.Flag = Flag;
	exports.Header = Header;
	exports.HeaderContent = HeaderContent;
	exports.HeaderSubheader = HeaderSubheader;
	exports.Icon = Icon;
	exports.IconGroup = IconGroup;
	exports.Image = Image;
	exports.ImageGroup = ImageGroup;
	exports.Input = Input;
	exports.Label = Label;
	exports.LabelDetail = LabelDetail;
	exports.LabelGroup = LabelGroup;
	exports.List = List;
	exports.ListContent = ListContent;
	exports.ListDescription = ListDescription;
	exports.ListHeader = ListHeader;
	exports.ListIcon = ListIcon;
	exports.ListItem = ListItem;
	exports.ListList = ListList;
	exports.Loader = Loader;
	exports.Placeholder = Placeholder;
	exports.PlaceholderHeader = PlaceholderHeader;
	exports.PlaceholderImage = PlaceholderImage;
	exports.PlaceholderLine = PlaceholderLine;
	exports.PlaceholderParagraph = PlaceholderParagraph;
	exports.Rail = Rail;
	exports.Reveal = Reveal;
	exports.RevealContent = RevealContent;
	exports.Segment = Segment;
	exports.SegmentGroup = SegmentGroup;
	exports.SegmentInline = SegmentInline;
	exports.Step = Step;
	exports.StepContent = StepContent;
	exports.StepDescription = StepDescription;
	exports.StepGroup = StepGroup;
	exports.StepTitle = StepTitle;
	exports.Accordion = Accordion;
	exports.AccordionAccordion = AccordionAccordion;
	exports.AccordionContent = AccordionContent;
	exports.AccordionPanel = AccordionPanel;
	exports.AccordionTitle = AccordionTitle;
	exports.Checkbox = Checkbox;
	exports.Dimmer = Dimmer;
	exports.DimmerDimmable = DimmerDimmable;
	exports.DimmerInner = DimmerInner;
	exports.Dropdown = Dropdown;
	exports.DropdownDivider = DropdownDivider;
	exports.DropdownHeader = DropdownHeader;
	exports.DropdownItem = DropdownItem;
	exports.DropdownMenu = DropdownMenu;
	exports.DropdownSearchInput = DropdownSearchInput;
	exports.Embed = Embed;
	exports.Modal = Modal;
	exports.ModalActions = ModalActions;
	exports.ModalContent = ModalContent;
	exports.ModalDescription = ModalDescription;
	exports.ModalHeader = ModalHeader;
	exports.Popup = Popup;
	exports.PopupContent = PopupContent;
	exports.PopupHeader = PopupHeader;
	exports.Progress = Progress;
	exports.Rating = Rating;
	exports.RatingIcon = RatingIcon;
	exports.Search = Search;
	exports.SearchCategory = SearchCategory;
	exports.SearchResult = SearchResult;
	exports.SearchResults = SearchResults;
	exports.Sidebar = Sidebar;
	exports.SidebarPushable = SidebarPushable;
	exports.SidebarPusher = SidebarPusher;
	exports.Sticky = Sticky;
	exports.Tab = Tab;
	exports.TabPane = TabPane;
	exports.Transition = Transition;
	exports.TransitionGroup = TransitionGroup;
	exports.Advertisement = Advertisement;
	exports.Card = Card;
	exports.CardContent = CardContent;
	exports.CardDescription = CardDescription;
	exports.CardGroup = CardGroup;
	exports.CardHeader = CardHeader;
	exports.CardMeta = CardMeta;
	exports.Comment = Comment;
	exports.CommentAction = CommentAction;
	exports.CommentActions = CommentActions;
	exports.CommentAuthor = CommentAuthor;
	exports.CommentAvatar = CommentAvatar;
	exports.CommentContent = CommentContent;
	exports.CommentGroup = CommentGroup;
	exports.CommentMetadata = CommentMetadata;
	exports.CommentText = CommentText;
	exports.Feed = Feed;
	exports.FeedContent = FeedContent;
	exports.FeedDate = FeedDate;
	exports.FeedEvent = FeedEvent;
	exports.FeedExtra = FeedExtra;
	exports.FeedLabel = FeedLabel;
	exports.FeedLike = FeedLike;
	exports.FeedMeta = FeedMeta;
	exports.FeedSummary = FeedSummary;
	exports.FeedUser = FeedUser;
	exports.Item = Item$1;
	exports.ItemContent = ItemContent;
	exports.ItemDescription = ItemDescription;
	exports.ItemExtra = ItemExtra;
	exports.ItemGroup = ItemGroup;
	exports.ItemHeader = ItemHeader;
	exports.ItemImage = ItemImage;
	exports.ItemMeta = ItemMeta;
	exports.Statistic = Statistic;
	exports.StatisticGroup = StatisticGroup;
	exports.StatisticLabel = StatisticLabel;
	exports.StatisticValue = StatisticValue;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
